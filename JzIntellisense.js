// This script has been auto-generated by TheRealSolly | Solomon Blount.
// The following contents is all directly imported from DAZ's Documentation Website and inherits the license set, which is the following...
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Attribution 3.0 Unported (CC BY 3.0) | https://creativecommons.org/licenses/by/3.0/ | (C) Daz Productions, Inc 224 S 200 W, Salt Lake City, UT 84101
// I DO NOT WORK FOR DAZ PRODUCTIONS INC AND THIS SCRIPT WAS NOT SUPPORTED BY OR ENDORSED BY ANYONE AT DAZ PRODUCTIONS INC.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If I made your life wonderful, if you're feeling generious enough to donate to make me feel wonderful, you can do so by going here:
//                                                         https://www.buymeacoffee.com/therealsoll
// Anyway, here are some things you need to know.
//                                                THIS VERSION DOES NOT INCLUDE ENUMERATORS NOR SIGNALS AS OF YET.
//                                      THIS VERSION ALSO DOES NOT INCLUDE GLOBAL, STRING, NUMBER, BOOLEAN, ETC FUNCTIONS
//                                     THIS FILE PURPOSEFULLY HAS ERRORS SO THE INTELLISENSE CAN ASSIST YOU WITH YOUR CODE.
//                                             THIS HAS ONLY BEEN TESTED ON VISUAL STUDIO CODE VERSION 1.55.0.
// ok enough yelling. 
// To make .dsa scripts use the JS/TS interpreter, create a new file with the .dsa extension, on the lower-right of VSCode click on the file type and select "Configure file assocations for .dsa" and then select in JavaScript.
// Do not select TS as the interpreted language. Use JS. 
// There will be more adjustments to this script but i'm in school...so yeah: https://github.com/siblount/JzIntellisense
// Happy Coding!
/**
 * @classdesc See Also:


 DzViewport.get3DViewport()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewport_dz}*/
 class Dz3DViewport extends QWidget {
	/**
 * @description No floor is drawn.
*/
	
static NoFloor;
	/**
 * @description A grid floor is drawn.
*/
	
static WireFloor;
	/**
 * @description A solid floor is drawn. (not currently implemented)
*/
	
static SolidFloor;
	/**
 * @description Draws unlit wire-frame bounding boxes.
*/
	
static WireBox;
	/**
 * @description Draws smooth-shaded bounding boxes.
*/
	
static SolidBox;
	/**
 * @description Draws unlit wire-frames.
*/
	
static Wireframe;
	/**
 * @description Draws lit wire-frames.
*/
	
static LitWireframe;
	/**
 * @description Draws unlit wire-frames, front geometry facing only.
*/
	
static HiddenLine;
	/**
 * @description Draws lit smooth shaded objects with wireframes imposed.
*/
	
static WireShaded;
	/**
 * @description Draws lit smooth shaded objects.
*/
	
static SmoothShaded;
	/**
 * @description Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
*/
	
static WireTextured;
	/**
 * @description Draws lit smooth shaded objects with any texture/transparency maps applied.
*/
	
static Textured;
	/**
 * @description A mode that docks the toolbar along the top edge of the viewport.
*/
	
static DockedToolBar;
	/**
 * @description A mode that uses a Camera Cube HUD in the top right corner of the viewport.
*/
	
static CameraCubeHUD;
	/**
 * @description Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	static aimCamera() {
	
	}
	/**
 * @description Aim the viewport's camera at the given box. If the box is invalid this function does nothing.
*/
	static aimCameraAtBox(box:DzBox3):DzBox3 {
	
	}
	/**
 * @description Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	static aimCameraAtPrimaryNode() {
	
	}
	/**
 * @description Captures the current contents from the OpenGL frame buffer as an image.
*/
	static captureImage() {
	
	}
	/**
 * @description Return Value:
*/
	static currentDimensions() {
	
	}
	/**
 * @description Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	static frameCamera() {
	
	}
	/**
 * @description Frame the viewport's camera at the given box. If the box is invalid this function does nothing.
*/
	static frameCameraOnBox(box:DzBox3):DzBox3 {
	
	}
	/**
 * @description Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	static frameCameraOnSelectedNodes() {
	
	}
	/**
 * @description Return Value:
*/
	static getAspectFrameRect() {
	
	}
	/**
 * @description Return Value:
*/
	static getCamera() {
	
	}
	/**
 * @description Return Value:
*/
	static getCameraCube() {
	
	}
	/**
 * @description Return Value:
*/
	static getUserDrawStyle() {
	
	}
	/**
 * @description Return Value:
*/
	static getViewport() {
	
	}
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
*/
	static hardwareRender(handler:DzRenderHandler):Boolean {
	
	}
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
*/
	static hardwareRenderWithOptions(handler:DzRenderHandler, options:DzRenderOptions, camera:DzCamera, style:DzDrawStyle):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isHardwareRenderable() {
	
	}
	/**
 * @description Return Value:
*/
	static mouseIsDown() {
	
	}
	/**
 * @description Performs a facet picking operation on the scene through this viewport.
*/
	static pickOnFacet(pnt:Point):Number {
	
	}
	/**
 * @description Performs a gizmo picking operation through this viewport. View tools (see DzViewTool) can draw a 'gizmo' in the viewport for the user to interact with. The tool can assign different parts of the gizmo to specific indices, so as to tell what part of the gizmo was clicked by the user.
*/
	static pickOnGizmo(pnt:Point):Number {
	
	}
	/**
 * @description Performs a material picking operation on the scene through this viewport. This example shows the mousePress() implementation from a view tool (see DzViewTool) that sets the color of any material that the user clicks in the viewport.
*/
	static pickOnMaterial(pnt:Point):DzMaterial {
	
	}
	/**
 * @description Performs a node picking operation on the scene through this viewport. View tools (see DzViewTool) will commonly use this function to determine what node (if any) that the user clicks on. This example shows the mousePress() implementation from a view tool that selects the node that the user clicks in the viewport.
*/
	static pickOnNode(pnt:Point, useSelectionMaps:Boolean):DzNode {
	
	}
	/**
 * @description Performs a quick render of the scene suitable for a thumbnail image.
*/
	static renderThumbnail(handler:DzRenderHandler):Boolean {
	
	}
	/**
 * @description Reset the viewport's camera to its default state.
*/
	static resetCamera() {
	
	}
	/**
 * @description Set the camera for the view. If a matching camera is not found, this function does nothing.
*/
	static setCamera(cam:String):String {
	
	}
	/**
 * @description Set the camera for the view. The pointer passed in must be a camera in the scene, or one of the view cameras from DzViewportMgr.
*/
	static setCamera(cam:DzCamera):DzCamera {
	
	}
	/**
 * @description Set the draw style for the viewport. DzDrawStyle objects are ref counted, so the viewport refs the style when it is set, and unrefs it when it is no longer using the style. The draw style will then delete itself when its ref count reaches zero.
*/
	static setDrawStyle(style:DzDrawStyle):DzDrawStyle {
	
	}
	/**
 * @description Attempts to set the DrawStyle for the viewport.
*/
	static setUserDrawStyle(description:String):Boolean {
	
	}

}
/**
 * @classdesc This render handler is a DzImageRenderHandler that is the size of the aspect frame for the given viewport, and paints all data passed to it over the current view.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewrenderhandler_dz}*/
class Dz3DViewRenderHandler extends DzImageRenderHandler {
	/**
 * @description Constructor. Creates a render handler that will render to the given viewport.
 * @constructor
*/
	constructor(view:DzViewport, startTime:DzTime, filename:String) {
	
	}
	/**
 * @description Return Value:
*/
	getLeftOffset() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractassetcontainer_dz}*/
class DzAbstractAssetContainer extends QObject, DzRefCountedItem {
	static canCopyContainers:Boolean;
	static canDeleteContainer:Boolean;
	static canInsertSubContainer:Boolean;
	static canModifyAssets:Boolean;
	static canRenameContainer:Boolean;
	static id:Object;
	static removeAssetCausesDelete:Boolean;
	static tooltip:String;
	static useCount:Number;
	/**
 * @description Attempts to clear out the assets that can be rebuilt.
*/
	static clearRebuildableAssets() {
	
	}
	/**
 * @description Attempts to create a new child container.
*/
	static createNewChildContainer(containerName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static getAsset(index:Number):DzAsset {
	
	}
	/**
 * @description Return Value:
*/
	static getAssets() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getChildContainer(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	static getChildContainers() {
	
	}
	/**
 * @description Return Value:
*/
	static getChildIconSize() {
	
	}
	/**
 * @description Return Value:
*/
	static getContainerName() {
	
	}
	/**
 * @description Return Value:
*/
	static getIDPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumAssets() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumChildContainers() {
	
	}
	/**
 * @description Return Value:
*/
	static getOwner() {
	
	}
	/**
 * @description Return Value:
*/
	static getSmallChildIconSize() {
	
	}
	/**
 * @description Return Value:
*/
	static getSupportFile() {
	
	}
	/**
 * @description Parameter(s):
*/
	static hasAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static hasChildContainers() {
	
	}
	/**
 * @description Boolean DzAbstractAssetContainer.ingoreAssetConflicts()
*/
	static ignoreAssetConflicts() {
	
	}
	/**
 * @description Initializes this containers child containers.
*/
	static initChildren() {
	
	}
	/**
 * @description Attempts to insert the given asset into this container.
*/
	static insertAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Attempts to insert container as a child of this container.
*/
	static insertChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isFileSystemBased() {
	
	}
	/**
 * @description Attempts to move the given container from its parent.
*/
	static moveFromParent(child:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to remove the given asset from this container.
*/
	static removeAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static removeAssetOnCut(toContainer:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to remove the given container.
*/
	static removeChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to rename this container.
*/
	static rename(name:String):Boolean {
	
	}
	/**
 * @description Attempts to rename the given asset.
*/
	static renameAsset(asset:DzAsset, newAssetName:String):Boolean {
	
	}
	/**
 * @description Attempts to rename the given child container.
*/
	static renameChildContainer(container:DzAbstractAssetContainer, name:String):Boolean {
	
	}
	/**
 * @description Sets the name for this container.
*/
	static setContainerName(name:String):String {
	
	}
	/**
 * @description Attemps to update this container.
*/
	static update() {
	
	}
	/**
 * @description Attempts to update the assets associated with this container.
*/
	static updateAssets() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractnodeeditorpane_dz}*/
class DzAbstractNodeEditorPane extends DzPane {
	/**
 * @description Return Value:
*/
	static displaySeparate() {
	
	}

}
/**
 * @classdesc This class represents an action that the user can perform in the interface via pressing a hot key or clicking on a menu/toolbar item.


All action items are added to a list of interface actions which the user can customize. The user can specify their own keyboard shortcut or 'Hot Key' for the action, and any action item can be moved into a custom toolbar, as well as appear in the DAZ Studio main menu.


See Also:


 DzActionMgr.getAction()

 DzActionMgr.findAction()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/action_dz}*/
class DzAction extends QObject {
	static actionGroup:String;
	static autoRepeat:Boolean;
	static checkable:Boolean;
	static checked:Boolean;
	static defaultMenu:String;
	static defaultMenus:Array;
	static defaultShortcut:String;
	static defaultToolBar:String;
	static defaultToolBars:Array;
	static description:String;
	static enabled:Boolean;
	static iconFile:String;
	static iconText:String;
	static iconVisibleInMenu:Boolean;
	static shortcut:String;
	static statusTip:String;
	static styleIcon:Number;
	static text:String;
	static toolTip:String;
	static visible:Boolean;
	static whatsThis:String;
	/**
 * @description Activates the action in the 'Hover' state programatically.
*/
	static hover() {
	
	}
	/**
 * @description Sets the action's toggle state.
*/
	static setChecked(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Disables/Enables the action in the interface.
*/
	static setDisabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Enables/Disables the action in the interface.
*/
	static setEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description The same as calling setChecked( !onOff ). This method is provided for convenience when connecting this slot to a signal that emits a value that is the inverse of the desired onOff state.
*/
	static setOff(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether the action is visible in the interface.
*/
	static setVisible(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Toggles the action programatically.
*/
	static toggle() {
	
	}
	/**
 * @description Activates the action programatically.
*/
	static trigger() {
	
	}

}
/**
 * @classdesc See Also:


 DzActionMgr.getMenu(), DzPane.getOptionsMenu(), DzViewTool.getOptionsMenu(), DzPersistentMenu.getActionMenu()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenu_dz}*/
class DzActionMenu extends QObject {
	/**
 * @description A menu where each DzActionMenuItem is explicitly defined
*/
	
static CustomMenu;
	/**
 * @description A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses
*/
	
static PaneMenu;
	/**
 * @description A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses
*/
	
static ViewToolMenu;
	/**
 * @description A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses
*/
	
static SaveAsMenu;
	/**
 * @description A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr.getRecentFileList() Since: 4.6.0.44
*/
	
static OpenRecentMenu;
	/**
 * @description Removes all items from the menu.
*/
	static clear() {
	
	}

}
/**
 * @classdesc Action Menu Items are registered with a DzActionMenu and are available to access via methods on that class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenuitem_dz}*/
class DzActionMenuItem extends QObject {
	/**
 * @description A menu separator (i.e. horizontal divider)
*/
	
static Separator;
	/**
 * @description A menu entry that activates a DzAction object
*/
	
static Action;
	/**
 * @description A menu entry that activates a custom action.  See Also: DzActionMgr - for more about custom actions.
*/
	
static CustomAction;
	/**
 * @description A menu entry that opens a submenu
*/
	
static SubMenu;
	/**
 * @description A menu entry that opens a file, replacing the contents of the current scene  See Also: DzContentMgr.openFile() - for more about opening a file.
*/
	
static FileOpenAction;
	/**
 * @description A menu entry that merges a file with the current scene  See Also: DzContentMgr.openFile() - for more about merging a file.
*/
	
static FileMergeAction;
	/**
 * @description Return Value:
*/
	static getSubMenu() {
	
	}
	/**
 * @description Causes the file for a FileOpenAction or FileMergeAction item to load
*/
	static loadFile() {
	
	}
	/**
 * @description Sets the menu that is displayed as the submenu when this menu item is activated. This call has no effect unless the type of this item is SubMenu.
*/
	static setSubMenu(menu:DzActionMenu):DzActionMenu {
	
	}

}
/**
 * @classdesc This class manages actions that the user can perform in the interface by pressing the key combination specified by its shortcut or by clicking on a menu/toolbar item. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Don't create an instance of this class, rather request a pointer to it from DzMainWindow via DzMainWindow.getActionMgr().


See Also:


 DzAction
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmgr_dz}*/
class DzActionMgr extends QWidget {
	/**
 * @description Uses the regular expression "([A-z]+[A-z0-9]*)" to strip characters/symbols/etc from a string in order to 'legalize' it.
 * @constructor
*/
	constructor(name:String) {
	
	}
	/**
 * @description Adds a custom action to the action manager.
*/
	addCustomAction(text:String, desc:String, script:String, isFile:Boolean, shortcut:String, iconFile:String):String {
	
	}

}
/**
 * @classdesc Defines the layout of Toolbars, Pane Groups, Panes, Viewports and the active View Tool within an Activity of the interface.


See Also:


 DzPaneMgr, DzPaneGroup, DzPane, DzToolBar, DzDockBar, DzActionMgr and DzViewportMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/activitylayout_dz}*/
class DzActivityLayout extends QObject, DzRefCountedItem {
	description:String;
	label:String;
	/**
 * @description Default Constructor. Creates a new activity layout with the given name and description.
 * @constructor
*/
	constructor(label:String, desc:String) {
	
	}
	/**
 * @description Clears the memorized state of the activity.
*/
	clearMemorizedState() {
	
	}
	/**
 * @description Return Value:
*/
	isToolBarEnabled(toolbar:String):Boolean {
	
	}
	/**
 * @description Sets whether or not the toolbar with the given name is enabled.
*/
	setToolbarEnabled(toolbar:String, onOff:Boolean):String {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/addblend_dz}*/
class DzAddBlend extends DzImageBlend {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()



Attention:


 This class is provided by the Alembic Exporter for DAZ Studio plugin.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alembicexporter_dz}*/
class DzAlembicExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alphablend_dz}*/
class DzAlphaBlend extends DzImageBlend {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Derived from QApplication, this class embodies the main event loop, and owns application-wide settings and objects not directly related to the user interface.


Can be directly accessed using the global variable App.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/app_dz}*/
class DzApp extends QObject {
	/**
 * @description No interface or graphical subsystem is initialized.
*/
	
static NoInterface;
	/**
 * @description The OpenGL subsystem is initialized without a user interface.
*/
	
static NoInterfaceWithOpenGL;
	/**
 * @description The user interface and all graphical subsystems are initialized.
*/
	
static FullInterface;
	/**
 * @description An unknown operating system.
*/
	
static Unknown;
	/**
 * @description An unknown version of Windows.
*/
	
static WindowsUnknown;
	/**
 * @description The Windows 95 operating system.
*/
	
static Windows95;
	/**
 * @description The Windows 98 operating system.
*/
	
static Windows98;
	/**
 * @description The Windows Me operating system.
*/
	
static WindowsMe;
	/**
 * @description The Windows 2000 operating system.
*/
	
static Windows2000;
	/**
 * @description The Windows XP operating system.
*/
	
static WindowsXP;
	/**
 * @description The Windows 2003 operating system.
*/
	
static Windows2003;
	/**
 * @description The Windows Vista operating system.
*/
	
static WindowsVista;
	/**
 * @description The Windows 7 operating system.
*/
	
static Windows7;
	/**
 * @description The Windows 8 operating system.
*/
	
static Windows8;
	/**
 * @description The Windows 8.1 operating system.
*/
	
static Windows8_1;
	/**
 * @description The Windows 10 operating system.
*/
	
static Windows10;
	/**
 * @description An unknown version of the Macintosh operating system.
*/
	
static MacUnknown;
	/**
 * @description The OS X 10.0 (Cheetah) operating system.
*/
	
static Mac10_0;
	/**
 * @description The OS X 10.1 (Puma) operating system.
*/
	
static Mac10_1;
	/**
 * @description The OS X 10.2 (Jaguar) operating system.
*/
	
static Mac10_2;
	/**
 * @description The OS X 10.3 (Panther) operating system.
*/
	
static Mac10_3;
	/**
 * @description The OS X 10.4 (Tiger) operating system.
*/
	
static Mac10_4;
	/**
 * @description The OS X 10.5 (Leopard) operating system.
*/
	
static Mac10_5;
	/**
 * @description The OS X 10.6 (Snow Leopard) operating system.
*/
	
static Mac10_6;
	/**
 * @description The OS X 10.7 (Lion) operating system.
*/
	
static Mac10_7;
	/**
 * @description The OS X 10.8 (Mountain Lion) operating system.
*/
	
static Mac10_8;
	/**
 * @description The OS X 10.9 (Mavericks) operating system.
*/
	
static Mac10_9;
	/**
 * @description The OS X 10.10 (Yosemite) operating system.
*/
	
static Mac10_10;
	/**
 * @description The OSX 10.11 (El Capitan) operating system.
*/
	
static Mac10_11;
	/**
 * @description The OSX 10.12 (Sierra) operating system.
*/
	
static Mac10_12;
	/**
 * @description Supported Microsoft Windows Operating Systems.
*/
	
static Windows;
	/**
 * @description Supported Apple Macintosh OS X Operating Systems.
*/
	
static MacOSX;
	/**
 * @description TODO: Add description.
*/
	
static GeneralRelease;
	/**
 * @description TODO: Add description.
*/
	
static PublicBuild;
	/**
 * @description TODO: Add description.
*/
	
static PublishingBuild;
	/**
 * @description TODO: Add description.
*/
	
static PrivateBuild;
	/**
 * @description TODO: Add description.
*/
	
static DevBuild;
	/**
 * @description The free edition of the application.
*/
	
static Free;
	/**
 * @description The standard edition of the application.
*/
	
static Standard;
	/**
 * @description The advanced edition of the application.
*/
	
static Advanced;
	/**
 * @description The pro edition of the application.
*/
	
static Pro;
	/**
 * @description The alpha edition of the application.
*/
	
static Alpha;
	/**
 * @description The beta edition of the application.
*/
	
static Beta;
	/**
 * @description TODO:
Add description.
*/
	static addSessionFileLoad(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static bitArchitecture() {
	
	}
	/**
 * @description Return Value:
*/
	static bitArchitectureString() {
	
	}
	/**
 * @description Parameter(s):
*/
	static byteSizeToString(bytes:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static canShowSceneBuilder(definition:Object):Boolean {
	
	}
	/**
 * @description Forces a deletion of all objects currently waiting to be deleted to free up more memory. If you are using this to clear memory you will generally want to clear the Undo Stack first.
*/
	static clearDelayedDeleteStack(doProgress:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static createDigest(tokens:Array):String {
	
	}
	/**
 * @description Return Value:
*/
	static createDigest(data:ByteArray):String {
	
	}
	/**
 * @description Return Value:
*/
	static createUuid() {
	
	}
	/**
 * @description Write a debug message to the application log file.
*/
	static debug(msg:String):String {
	
	}
	/**
 * @description Posts an event that causes the application to exit.
*/
	static delayedExit(exitCode:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	static enableMultiThreading(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Writes any currently buffered log messages to the log file. This is automatically called whenever the log buffer has more than 512 characters of data, but can be called at any time to force all messages to be written out.
*/
	static flushLogBuffer() {
	
	}
	/**
 * @description Searches in default locations for a script file of the given name.
*/
	static getAbsoluteScriptPath(scriptName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getAppDataPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getApplicationBaseName() {
	
	}
	/**
 * @description Deprecated
*/
	static getAppSettingsMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getAssetIOMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getAssetMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getAuthenticationMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getCallBackMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getCommonUserDocumentPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getContentMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getCurrentAuthor() {
	
	}
	/**
 * @description Return Value:
*/
	static getDataFolderName() {
	
	}
	/**
 * @description Return Value:
*/
	static getDataFolderPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getDataFolderPathBase() {
	
	}
	/**
 * @description Return Value:
*/
	static getDAZDataPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getDeviceMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getDialogParent() {
	
	}
	/**
 * @description Return Value:
*/
	static getDocumentationPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getDocumentsPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getExportMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getFileIOPresetMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getGeneratedScriptsPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getGeneratedShadersPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getGraphicsMode() {
	
	}
	/**
 * @description Return Value:
*/
	static getHelpMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getHomePath() {
	
	}
	/**
 * @description Return Value:
*/
	static getImageMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getImportMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getInterface() {
	
	}
	/**
 * @description Last directory that files were loaded or saved to/from.
*/
	static getLoadSavePath() {
	
	}
	/**
 * @description Return Value:
*/
	static getMultiMediaMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getPluginMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getPluginsPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getProgramDataPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getRenderMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getResourcesPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getSaveFilterMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getScriptsPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getShadersPath() {
	
	}
	/**
 * @description Get the application wide style.
*/
	static getStyle() {
	
	}
	/**
 * @description Return Value:
*/
	static getStyleDefinition() {
	
	}
	/**
 * @description Return Value:
*/
	static getStyleDefinitionList() {
	
	}
	/**
 * @description Get a filename for temporary storage.
*/
	static getTempFilename() {
	
	}
	/**
 * @description Return Value:
*/
	static getTempPath() {
	
	}
	/**
 * @description Get a filename for temporary storage of rendered images.
*/
	static getTempRenderFilename() {
	
	}
	/**
 * @description Return Value:
*/
	static getUtilitiesPath() {
	
	}
	/**
 * @description Return Value:
*/
	static isClosing() {
	
	}
	/**
 * @description Parameter(s):
*/
	static isKeyDown(key:Number):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isKeySequenceDown(sequence:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isMultiThreadingEnabled() {
	
	}
	/**
 * @description Return Value:
*/
	static isRegistered() {
	
	}
	/**
 * @description Return Value:
*/
	static isRunning() {
	
	}
	/**
 * @description Return Value:
*/
	static isSlave() {
	
	}
	/**
 * @description Return Value:
*/
	static isStarting() {
	
	}
	/**
 * @description Write a message to the application log file.
*/
	static log(buffer:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static modifierKeyState() {
	
	}
	/**
 * @description Return Value:
*/
	static operatingSystem() {
	
	}
	/**
 * @description Return Value:
*/
	static operatingSystemString() {
	
	}
	/**
 * @description The application is intended to be as platform independent as possible, but there are cases where something needs to be done differently on one platform or another. This function provides a simple way to check which platform the application is running under.
*/
	static platform() {
	
	}
	/**
 * @description Posts an event that causes execution of a script as it is encountered in the event stack.
*/
	static postScriptEvent(evaluate:Boolean, script:String, args:Array):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static releaseCycle() {
	
	}
	/**
 * @description Return Value:
*/
	static releaseCycleString() {
	
	}
	/**
 * @description Return Value:
*/
	static releaseEdition() {
	
	}
	/**
 * @description Return Value:
*/
	static releaseEditionString() {
	
	}
	/**
 * @description Restores the temporary files directory to the default location.
*/
	static restoreDefaultTempPath() {
	
	}
	/**
 * @description Set the default directory for loading or saving files.
*/
	static setLoadSavePath(dir:String):String {
	
	}
	/**
 * @description Sets the current style for the application.
*/
	static setStyleDefinition(name:String):Boolean {
	
	}
	/**
 * @description Sets the directory path where temporary files are stored. The path provided needs to be an absolute path. A directory will be created at the new location if it does not already exist.
*/
	static setTempPath(tempPath:String):Boolean {
	
	}
	/**
 * @description A convenience method for opening a showing a file/directory in the OS file browser.
*/
	static showInNativeBrowser(absFilePath:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static showPrompts() {
	
	}
	/**
 * @description Displays the Scene Builder dialog.
*/
	static showSceneBuilder(definition:Object, asEvent:Boolean):Array {
	
	}
	/**
 * @description A convenience method for browsing to a given URL.
*/
	static showURL(url:String):String {
	
	}
	/**
 * @description Display a message in the current status interface.
*/
	static statusLine(msg:String, writeToLog:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	static usingInterface() {
	
	}
	/**
 * @description Write a warning message to the application log file.
*/
	static warning(msg:String):String {
	
	}
	/**
 * @description Saves out a user configuration script to the given filename. If no filename is given, the script is saved to the same file read from in startup(). The run() function calls this at the end of each execution.
*/
	static writeConfigScript(configScriptFilename:String):Boolean {
	
	}

}
/**
 * @classdesc Application Settings are used to store and retrieve settings that persist from one execution of the appliction to the next. On Windows, the settings are saved in the registry. On Mac, these settings are saved via Mac preference plist files.


You can create an instance of this class any time you need to read or write persistent settings. This class is a replacement for DzAppSettingsMgr as it is easier and safer to use. Since each instance is separate, the current path of one instance will not affect the rest of the application. It is also not necessary to call popPath() to put this class back into its previous state.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/appsettings_dz}*/
class DzAppSettings extends DzBase {
	/**
 * @description Default Constructor - creates a new settings object that starts out at the default application path.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	containsValue(key:String):Boolean {
	
	}

}
/**
 * @classdesc An "Asset" serves as an abstraction between the presentation of a content file and the actual file that resides on disk; it is a "container" for information about a content file.


At a minimum, an asset contains a reference to the relative path and filename of a file.


Metadata


When the Content Management System (CMS) is active, an asset provides an interface to its metadata within the content database. This metadata includes information such as what type of asset it is, what it is used for, what it is compatible with, which category(ies) it is presented to the user in, etc.


Conceptually, each asset belongs to exactly one "Product". By default, and until/unless modified, all newly created assets are assigned to the "LOCAL USER" product. An asset is uniquely identified within a product by the combination of its relative path and filename. While any number of products can reference a file with the same relative path and filename combination, each product's concept of that combination is unique (even if their metadata is identical).


The metadata for a given asset is divided into 2 distinct types; that which is owned and/or maintained by the vendor (the originating source), and that which is owned and/or maintained by the end-user. Unless the metadata component (e.g., userKeywords, userNotes, etc), the product (e.g., "LOCAL USER"), or the store (e.g., "LOCAL USER") indicate "user" in their name, any assumption (if there is to be one) about which type the data is should be that which is owned and/or maintained by the vendor.


The metadata for an asset that is "installed" and which belongs to a product associated with a "Store" (source) other than the "LOCAL USER" store is owned by the vendor. Conversely, the metadata for an asset that is created by the user and/or belongs to a product associated with the "LOCAL USER" store is owned by the user. The exceptions to this are those attributes which integrate "user" into their name; which in fact always belong to the user.


The significance of the distinction between the 2 types of metadata comes down to how the data is handled during an update and whether or not an effort is made to preserve it. Metadata that is owned and/or maintained by the vendor can be summarily purged during an update. This provides a vendor with the means to clean up all potential prior versions of the metadata witout being faced with complex bookkeeping tasks.


See Also:


 DzAssetMgr

 DzProductAssetContainer

 DzContentMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/asset_dz}*/
class DzAsset extends QObject, DzRefCountedItem {
	static assetID:Object;
	static assetName:String;
	static audience:Number;
	static categories:Array;
	static companionIsScript:Boolean;
	static companionPath:String;
	static compatibilities:Array;
	static compatibilityBase:String;
	static contentType:String;
	static dateCreated:Date;
	static dateLastModified:Date;
	static description:String;
	static displayName:String;
	static groupId:Number;
	static hasCloudMetadata:Boolean;
	static hasCompanion:Boolean;
	static hasCompanionScript:Boolean;
	static hidden:Boolean;
	static icon:Pixmap;
	static isCloudInstallable:Boolean;
	static isCloudInstalled:Boolean;
	static isCloudOwned:Boolean;
	static isInstalled:Boolean;
	static isMetadataValid:Boolean;
	static isNative:Boolean;
	static isScript:Boolean;
	static isSymLink:Boolean;
	static isVendor:Boolean;
	static needsCloudInstall:Boolean;
	static needsCloudUpdate:Boolean;
	static orginalFilename:String;
	static orginalPath:String;
	static productGUID:String;
	static productID:String;
	static productName:String;
	static productPath:String;
	static smallIcon:Pixmap;
	static storeID:String;
	static symLinkPath:String;
	static url:String;
	static urlEncoded:String;
	static userCategories:Array;
	static userCompatibilities:Array;
	static userKeywords:Array;
	static vendorCategories:Array;
	static vendorCompatibilities:Array;
	static vendorKeywords:Array;
	/**
 * @description Sets the compatibility bases that this asset is compatible with.
*/
	static addCompatibilities(bases:Array, create:Boolean):Array {
	
	}
	/**
 * @description Sets the categories for this asset.
*/
	static addToCategories(categories:Array, create:Boolean):Array {
	
	}
	/**
 * @description Sets the asset as belonging to the default group identifier; 0.
*/
	static clearGroup() {
	
	}
	/**
 * @description Forces the icon to reload.
*/
	static forceImageReload() {
	
	}
	/**
 * @description Return Value:
*/
	static getAsLocalFile() {
	
	}
	/**
 * @description Return Value:
*/
	static getBaseExtension() {
	
	}
	/**
 * @description Return Value:
*/
	static getDSLinkExtension() {
	
	}
	/**
 * @description Return Value:
*/
	static getDSLinkText() {
	
	}
	/**
 * @description Return Value:
*/
	static getOwner() {
	
	}
	/**
 * @description Return Value:
*/
	static getProduct() {
	
	}
	/**
 * @description Return Value:
*/
	static getRelativeFilePath() {
	
	}
	/**
 * @description Return Value:
*/
	static isGroup(id:Number):Boolean {
	
	}
	/**
 * @description Loads the default icon for the asset.
*/
	static loadDefaultIcon(delayLoad:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static readLinkData(linkPath:String):Object {
	
	}
	/**
 * @description Removes the compatibility bases that this asset is compatible with.
*/
	static removeCompatibilities(bases:Array, isVender:Boolean):Array {
	
	}
	/**
 * @description Removes the asset from the categories.
*/
	static removeFromCategories(categories:Array, isVender:Boolean):Array {
	
	}
	/**
 * @description Changes the name of this asset.
*/
	static rename(name:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static saveDSLink(linkSavePath:String):Boolean {
	
	}
	/**
 * @description Sets whether existence of the asset should be ignored.
*/
	static setIgnoreExists(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static toUri() {
	
	}
	/**
 * @description Parameter(s):
*/
	static updateFromMetadata(guid:String):Boolean {
	
	}

}
/**
 * @classdesc An asset save filter for saving a file in the DSON format.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetfileoutfilter_dz}*/
class DzAssetFileOutFilter extends DzAssetIOFilter {

}
/**
 * @classdesc Save filter classes save out a subset of scene settings in a DSON format such as poses, light sets, camera sets, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiofilter_dz}*/
class DzAssetIOFilter extends DzFileIO {
	/**
 * @description Saves to a file.
*/
	static doSave(filename:String, startingDir:String):DzError {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getAssetIOMgr().


See Also:


 Sample: Save Filter Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiomgr_dz}*/
class DzAssetIOMgr extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static DefaultMethod;
	/**
 * @description TODO: Add description.
*/
	
static OpenNew;
	/**
 * @description TODO: Add description.
*/
	
static MergeFile;
	/**
 * @description Loads an asset file.
*/
	static doLoad(filePath:String, open:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	}
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
*/
	static doSave(filterIndex:Number):DzError {
	
	}
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
*/
	static doSaveWithOptions(filter:DzAssetIOFilter, options:DzFileIOSettings, saveOnly:Boolean, filePath:String, startingDir:String, category:String):DzError {
	
	}
	/**
 * @description Save the scene contents to a file. Prompts the user for a file to save to.
*/
	static doSceneSaveAs() {
	
	}
	/**
 * @description Return Value:
*/
	static getDefaultDSONAssetCachePath() {
	
	}
	/**
 * @description Return Value:
*/
	static getDSONAssetCachePath() {
	
	}
	/**
 * @description Return Value:
*/
	static getLoadPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getSavePath() {
	
	}
	/**
 * @description Loads an asset from URI.
*/
	static loadFromUri(fileUri:DzUri, open:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	}
	/**
 * @description Parameter(s):
*/
	static setDSONAssetCachePath(cacheFullPath:String):String {
	
	}

}
/**
 * @classdesc The manager that is responsible for all content assets.


There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getAssetMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetmgr_dz}*/
class DzAssetMgr extends DzBase {
	/**
 * @description No options
*/
	
static None;
	/**
 * @description A whole word search. Only works with file system based searches.
*/
	
static WholeWord;
	/**
 * @description A Regular Expression search. Only works with file system based searches.
*/
	
static RegExp;
	/**
 * @description Include native scene files (*.duf, *.dsf, *.daz) in the search.
*/
	
static NativeScenes;
	/**
 * @description Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
static NativeScripts;
	/**
 * @description Include Poser Character files (*.cr2, *.crz) in the search.
*/
	
static PoserFigures;
	/**
 * @description Include Poser Pose files (*.pz2, *.p2z) in the search.
*/
	
static PoserPoses;
	/**
 * @description Include Poser Prop files (*.pp2, *.ppz) in the search.
*/
	
static PoserProps;
	/**
 * @description Include Poser Hair files (*.hr2, *.hrz) in the search.
*/
	
static PoserHair;
	/**
 * @description Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
*/
	
static PoserFaces;
	/**
 * @description Include Poser Light files (*.lt2, *.ltz) in the search.
*/
	
static PoserLights;
	/**
 * @description Include Poser Camera files (*.cm2, *.cmz) in the search.
*/
	
static PoserCameras;
	/**
 * @description Include Poser Hand files (*.hd2, *.hdz) in the search.
*/
	
static PoserHands;
	/**
 * @description Include Poser Material Collection files (*.mc6, *.mcz) in the search.
*/
	
static PoserMaterials;
	/**
 * @description Include Poser Scene files (*.pz3, *.pzz) in the search.
*/
	
static PoserScenes;
	/**
 * @description Include general import files in the search.
*/
	
static ImportFiles;
	/**
 * @description Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
static AllNativeFiles;
	/**
 * @description Mask for no native files in the search.
*/
	
static NoNativeFilesMask;
	/**
 * @description Include all Poser files in the search.
*/
	
static AllPoserFiles;
	/**
 * @description Mask for no Poser files in the search.
*/
	
static NoPoserFilesMask;
	/**
 * @description Search through all files.
*/
	
static AllFiles;
	/**
 * @description Same as AllFiles.
*/
	
static DefaultOptions;
	/**
 * @description Return Value:
*/
	static canStartAndStopCMS() {
	
	}
	/**
 * @description Checks for new metadata scripts within the RunOnce directories.
*/
	static checkforNewMetadataScripts() {
	
	}
	/**
 * @description Removes all groups from all assets.
*/
	static clearAllGroupIDs(notify:Boolean):Boolean {
	
	}
	/**
 * @description Clears the metadata queue.
*/
	static clearDBMetaFileQueue() {
	
	}
	/**
 * @description Creates a compatibility base.
*/
	static createCompatibilityBase(base:String):Number {
	
	}
	/**
 * @description Creates a new product.
*/
	static createProduct(name:String, storeID:String, token:String):DzProductAssetContainer {
	
	}
	/**
 * @description Creates a new product from a list of assets.
*/
	static createProductFromAssets(assets:Array, name:String):DzProductAssetContainer {
	
	}
	/**
 * @description Creates a new product from container and its children.
*/
	static createProductFromContainer(container:DzAbstractAssetContainer, name:String):DzProductAssetContainer {
	
	}
	/**
 * @description Attempts to create a store in the database.
*/
	static createStore(storeID:String, token:String, url:String):Boolean {
	
	}
	/**
 * @description Creates a content type.
*/
	static createType(type:String, defaultLoad:Boolean):Number {
	
	}
	/**
 * @description Causes the category identified by idPath to update.
*/
	static emitCategoryChanged(idPath:Array):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	static findAssetPathFromShortFilename(fileName:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static findAssetsForFile(relativePath:String, userFacing:Boolean, installed:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	static findAudienceID(audience:String):Number {
	
	}
	/**
 * @description Attempts to find a compatibility base, and potentially create it if it doesn't already exist.
*/
	static findCompatibilityBaseID(base:String, create:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	static findProductByGuid(guid:String):DzProductAssetContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	static findProductByStoreToken(storeID:String, token:String):DzProductAssetContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	static findProductsByName(name:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	static findProductsForFile(relativePath:String):Array {
	
	}
	/**
 * @description Attempts to find the identifier used to identify a content type.
*/
	static findTypeID(type:String, create:Boolean, defaultLoad:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	static getAudience(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getAudiences() {
	
	}
	/**
 * @description Return Value:
*/
	static getCategories() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getCategoryPath(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getCMSOptions() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getCompatibilityBase(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getContentDirs() {
	
	}
	/**
 * @description Return Value:
*/
	static getDatabaseDsn() {
	
	}
	/**
 * @description Return Value:
*/
	static getDatabaseFilePath() {
	
	}
	/**
 * @description Return Value:
*/
	static getDBMetaFileQueue() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getFirstCategory(assetPath:String, preferredCategory:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getGroupNewProductsAsNew() {
	
	}
	/**
 * @description Return Value:
*/
	static getImportDirs() {
	
	}
	/**
 * @description Return Value:
*/
	static getMaxFileSearchResultSize() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumMaxItemsPerPage() {
	
	}
	/**
 * @description Return Value:
*/
	static getPoserDirs() {
	
	}
	/**
 * @description Return Value:
*/
	static getProducts() {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	static getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	static getRootCategoryStrings() {
	
	}
	/**
 * @description Return Value:
*/
	static getShowHiddenVendorCategorization() {
	
	}
	/**
 * @description Return Value:
*/
	static getStoresIDs() {
	
	}
	/**
 * @description Return Value:
*/
	static getStoreToken(storeID:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getStoreUrl(storeID:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getType(id:Number):String {
	
	}
	/**
 * @description Performs a database lookup on a user-facing content file to get its content type.
*/
	static getTypeForContentFile(fullPath:String):String {
	
	}
	/**
 * @description Checks the given node for content type in its presentation (if any), falls back to a source file data item and performs a content database lookup on the path it specifies (if any), and finally falls back to the content file path of the node (if any) to find its content type.
*/
	static getTypeForNode(node:DzNode):String {
	
	}
	/**
 * @description Return Value:
*/
	static getTypes() {
	
	}
	/**
 * @description Return Value:
*/
	static haveDatabase() {
	
	}
	/**
 * @description Causes metadata files at absoluteProductPaths to be imported.
*/
	static importMetadataFiles(productRelativePaths:Array, runSilent:Boolean, markAsVendor:Boolean):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	static isClothingType(type:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isConnectedToCMS() {
	
	}
	/**
 * @description Parameter(s):
*/
	static isFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isFollowingType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isHairType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isNeedsBaseFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isPresetForFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isPresetType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isPropType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isReplaceableType(type:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isResettingDatabase() {
	
	}
	/**
 * @description Return Value:
*/
	static isSynchronizing() {
	
	}
	/**
 * @description Signals that categories need to be updated.
*/
	static markCategoriesChanged() {
	
	}
	/**
 * @description Signals that products need to be updated.
*/
	static markProductsChanged() {
	
	}
	/**
 * @description Causes the metadata file at productRelativePath to be processed and category containers to update.
*/
	static processDBMetaFile(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	}
	/**
 * @description Causes the metadata file at productRelativePath to be processed, without causing category containers to update.
*/
	static processDBMetaFileNoEmit(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	}
	/**
 * @description If metadata files are queued, causes the metadata import dialog to be displayed and allows the user to select which products to process metadata for, then starts the import process on the selected products.
*/
	static processDBMetaFileQueue() {
	
	}
	/**
 * @description Adds the file at productRelativePath to the metadata queue.
*/
	static queueDBMetaFile(productRelativePath:String):String {
	
	}
	/**
 * @description Causes the internal list of root categories to be rebuilt.
*/
	static refreshCategoryRoots() {
	
	}
	/**
 * @description Causes the internal list of stores to be rebuilt.
*/
	static refreshStores() {
	
	}
	/**
 * @description Causes the internal list of content types to be rebuilt
*/
	static refreshTypes() {
	
	}
	/**
 * @description Causes all *.dsx metadata files in the "./Runtime/Support" folder of each mapped native and Poser content directory to be queued, and then imported.
*/
	static reimportDBMetaFiles() {
	
	}
	/**
 * @description Removes assets in list that have been orphaned (no longer exist) from the database.
*/
	static removeOrphanedAssetReferences(list:Array):Array {
	
	}
	/**
 * @description Attempts to remove a store from the database.
*/
	static removeStore(storeID:String):Boolean {
	
	}
	/**
 * @description Triggers the connected PostgreSQL server to reset (delete) the current database and re-establish the default content types, compatibility bases, and categories.
*/
	static resetDatabase() {
	
	}
	/**
 * @description Performs a user-facing file scan, ultimately mapping any directories found to contain compatible content.
*/
	static scanFiles(options:SearchOption, assignToGroup:Boolean, addToCategory:Boolean, onlyNewToCategory:Boolean):SearchOption {
	
	}
	/**
 * @description Performs a user-facing file search on the mapped content directories.
*/
	static searchFiles(filename:String, options:SearchOption):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are compatible with the compatibility base of the specified asset.
*/
	static searchForAssetAddOns(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database.
*/
	static searchForAssets(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database.
*/
	static searchForAssetsByKeywords(keywords:String, options:SearchOption, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	static searchForAssetsInCategory(categoryPath:String, userFacing:Boolean, installed:Boolean):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are the compatibility base of the specified asset.
*/
	static searchForAssetTargets(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to a specified product.
*/
	static searchForProductAssets(product:DzProductAssetContainer, filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	static searchForProducts(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, installStateFlags:Number, sorting:Number):DzProductHolderContainer {
	
	}
	/**
 * @description Sets the options for the Content Management Service (CMS), if it is of the type that can accept options.
*/
	static setCMSOptions(clusterDirectory:String, port:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static setGroupNewProductsAsNew(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static setMaxFileSearchResultSize(maxNum:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	static setMaxItemsPerPage(maxNum:Number):Number {
	
	}
	/**
 * @description Sets the group identifier on products and/or files, for a list of products.
*/
	static setProductGroupIDs(guids:Array, groupId:Number, groupProduct:Boolean, groupFiles:Boolean):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	static setShowAssetToolTip(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static setShowExtensions(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not hidden vendor categorizations are shown.
*/
	static setShowHiddenVendorCategorization(shown:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static setShowLargeIcons(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static showAssetToolTip() {
	
	}
	/**
 * @description Causes the Content DB Editor to be displayed, allowing the user to view/edit metadata for products and/or assets all within a centralized dialog.
*/
	static showDatabaseEditor(assetContainer:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static showExtensions() {
	
	}
	/**
 * @description Return Value:
*/
	static showLargeIcons() {
	
	}
	/**
 * @description Executes a script named after the store associated with product, in the ./resources/stores directory. A single anonymous JSON object is passed to the script, which can be retrieved using the global "getArguments()" function. The properties on the Object consist of values stored in the content database.
*/
	static showMoreProductInfo(product:DzProductAssetContainer):DzProductAssetContainer {
	
	}
	/**
 * @description Starts the Content Management Service (CMS), if it is not already running.
*/
	static startCMS() {
	
	}
	/**
 * @description Stops all searches that were started by any of the search* methods on DzAssetMgr.
*/
	static stopAllSearches() {
	
	}
	/**
 * @description Stops the Content Management Service (CMS), if it is running and is of the type that can be stopped.
*/
	static stopCMS(mode:Number, wait:Boolean, timeout:Number):Number {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.scanFiles().
*/
	static stopFileScan() {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchFiles().
*/
	static stopFileSearch() {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetAddOns().
*/
	static stopSearchForAssetAddOns() {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssets(), DzAssetMgr.searchForAssetsByKeywords() or DzAssetMgr.searchForProductAssets().
*/
	static stopSearchForAssets() {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetTargets().
*/
	static stopSearchForAssetTargets() {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForProducts().
*/
	static stopSearchForProducts() {
	
	}
	/**
 * @description Triggers an update to asset containers within the Categories top-level container.
*/
	static updateCategoryContainers() {
	
	}
	/**
 * @description Triggers an update to asset containers within the native formats top-level container.
*/
	static updateContentContainers() {
	
	}
	/**
 * @description Triggers an update to asset containers within the folder based top-level containers.
*/
	static updateFolderBasedContainers() {
	
	}
	/**
 * @description Triggers an update to asset containers within the other import formats top-level container.
*/
	static updateImportContainers() {
	
	}
	/**
 * @description Triggers an update to asset containers within the Poser formats top-level container.
*/
	static updatePoserContainers() {
	
	}
	/**
 * @description Triggers an update to asset containers within the Products top-level container.
*/
	static updateProductContainers() {
	
	}
	/**
 * @description Reclaims space in the database previously occupied by deleted or updated data.
*/
	static vacuumDatabase() {
	
	}

}
/**
 * @classdesc This class is implemented by platform specific audioclip classes, winaudioclip_dz and macaudioclip_dz.


See Also:


 DzScene.getAudio(), DzScene.setAudio(), DzAudioImporter, DzMultiMediaMgr.importAudioClip()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioclip_dz}*/
class DzAudioClip extends DzBase, DzRefCountedItem {
	static currentPosition:DzTime;
	static filename:String;
	static length:DzTime;
	static rate:Number;
	/**
 * @description Opens the file specified by filename and sets up the audio clip.
*/
	static openFile(filename:String):DzError {
	
	}
	/**
 * @description Pauses the audio clip without resetting current position.
*/
	static pause() {
	
	}
	/**
 * @description Plays the audio clip from current position.
*/
	static play() {
	
	}
	/**
 * @description Resets the current position of the audio clip to the beginning.
*/
	static reset() {
	
	}

}
/**
 * @classdesc See Also:


 DzMultiMediaMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioimporter_dz}*/
class DzAudioImporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc This class does not provide access to any Daz 3D user account information which could be considered an invasion of the user's the privacy. This class does provide plugins and scripts with an ability to check if a user has authenticated (logged in to) a Daz 3D account, to prompt a user to authenticate (login to) their Daz 3D account, to obtain a token that uniquely and anonymously identifies the current/last account authenticated, and to logout of an account that is currently logged in.


There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getAuthenticationMgr().


See Also:


 Sample: Retrieve User Token
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/authenticationmgr_dz}*/
class DzAuthenticationMgr extends QObject {
	/**
 * @description This function will attempt to authenticate a Daz 3D user account. If no account information has been entered by the user, a dialog will be displayed to securely acquire the username and password to be authenticated.
*/
	static authenticateUser() {
	
	}

}
/**
 * @classdesc DzAuthor is used to access authorship data for native files, and the current instance of the application.


See Also:


 DzApp.getCurrentAuthor(), DzScript.getAuthor(), DzScriptContext.getScriptAuthor(), Global.getScriptAuthor()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/author_dz}*/
class DzAuthor extends Object {
	email:String;
	name:String;
	url:String;
	valid:String;
	/**
 * @description Default constructor. Creates an empty author.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(author:DzAuthor) {
	
	}
	/**
 * @description Create a DzAuthor with the given name, email, and url.
 * @constructor
*/
	constructor(name:String, email:String, url="":String) {
	
	}

}
/**
 * @classdesc This class encapsulates a 2D image and the parameters for drawing the image as a backdrop for the scene. An instance of this class only contributes to the scene if it is set as the current backdrop for the scene.


See Also:


 DzScene.setBackdrop(), DzScene.getBackdrop()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/backdrop_dz}*/
class DzBackdrop extends DzElement {
	/**
 * @description No rotation
*/
	
static NO_ROTATION;
	/**
 * @description 90 degree rotation Counter-Clockwise
*/
	
static ROTATE_LEFT_90;
	/**
 * @description 90 degree rotation Clockwise
*/
	
static ROTATE_RIGHT_90;
	/**
 * @description 180 degree rotation
*/
	
static ROTATE_180;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Changes the render aspect ratio to match the backdrop image, and the image dimensions
*/
	adjustRenderAspectRatioToMatchTexture() {
	
	}
	/**
 * @description Changes the render image dimensions and aspect ratio to match the backdrop image
*/
	adjustRenderDimensionsToMatchTexture() {
	
	}
	/**
 * @description Clears the current back drop image, and resets all parameters.
*/
	clear() {
	
	}
	/**
 * @description Return Value:
*/
	getBackgroundColorControl() {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalFlipControl() {
	
	}
	/**
 * @description Return Value:
*/
	getMaterial() {
	
	}
	/**
 * @description Return Value:
*/
	getRotationControl() {
	
	}
	/**
 * @description Return Value:
*/
	getTexture() {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalFlipControl() {
	
	}
	/**
 * @description Return Value:
*/
	getVisibleControl() {
	
	}
	/**
 * @description Return Value:
*/
	getVisibleInRenderControl() {
	
	}
	/**
 * @description Sets the backdrop image.
*/
	setTexture(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Deprecated
*/
	showOptions(parent:QWidget):QWidget {
	
	}

}
/**
 * @classdesc Derived from QObject, this base class allows for the use of the signals-slots architecture provided by the Qt framework, within the Daz Studio API. A considerable portion of classes in the Daz Studio API derive from this class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/base_dz}*/
class DzBase extends QObject {
	/**
 * @description Provides scripts a way to make objects persistent; i.e., so that Qt will not delete them when they are no longer referenced by the script. This allows object instances to be created in script, then passed into the core and remain after the script has finished execution.
*/
	static makePersistent() {
	
	}

}
/**
 * @classdesc This is the basic camera implementation for DAZ Studio. It supplies commonly-used features like focal length adjustment and depth of field alteration.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basiccamera_dz}*/
class DzBasicCamera extends DzCamera {
	currentViewHeight:Number;
	currentViewWidth:Number;
	depthOfField:Boolean;
	fStop:Number;
	isPerspective:Boolean;
	useActiveViewport:Boolean;
	/**
 * @description Create a camera of the given type.
 * @constructor
*/
	constructor(type=DzCamera.PERSPECTIVE_CAMERA:DzCamera::CameraType, isViewCamera=false:Boolean) {
	
	}
	/**
 * @description Applies the settings in a dimensions preset.
*/
	applyDimensionsPreset(preset:String):Boolean {
	
	}
	/**
 * @description A ray through the scene for a perspective view.
*/
	cursorToRay(x:Number, y:Number):DzVec3 {
	
	}
	/**
 * @description Calculates a location in the scene based on an x, y position in the viewport and distance from the camera.
*/
	cursorToScene(x:Number, y:Number, z:Number):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getApertureBladeRotationAngleControl() {
	
	}
	/**
 * @description Return Value:
*/
	getApertureNumBladesControl() {
	
	}
	/**
 * @description Return Value:
*/
	getDepthOfFieldChannel() {
	
	}
	/**
 * @description Retrieves the settings of a dimensions preset.
*/
	getDimensionsPreset(preset:String, settings:DzSettings):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDisplayPersistenceChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getDofColorChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getDofOverlayColorChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getDofOverlayOpacityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getDofVisibilityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFarDofVisibilityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFocalDistChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFocalLengthChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFocalPointScaleChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFovColorChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFovLengthChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFovOpacityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFrameWidthChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getFStopChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getHeadlampIntensityControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK1Control() {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK2Control() {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK3Control() {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionScaleControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionTypeControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLensRadialBiasControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLensShiftXControl() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLensShiftYControl() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLensStereoOffsetControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLensThicknessControl() {
	
	}
	/**
 * @description Return Value:
*/
	getNearDofVisibilityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	getSightLineOpacityChannel() {
	
	}
	/**
 * @description Return Value:
*/
	isAtDefaultSceneCameraValues() {
	
	}
	/**
 * @description Return Value:
*/
	isDefaultSceneCamera() {
	
	}
	/**
 * @description Parameter(s):
*/
	setIsDefaultSceneCamera(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Changes the type of the camera.
*/
	setType(type:DzCamera.CameraType):DzCamera {
	
	}

}
/**
 * @classdesc The buttons provided by the dialog are: 'What's This', 'Apply', 'Accept', and 'Cancel'. Custom buttons can also be added to the set of default buttons by calling addButton(). All buttons but the 'Accept' button can be hidden or shown. By default, the 'Apply' button is the only hidden button. The text on the default buttons can be customized.


The dialog has a vertical box layout above the horizontal set of buttons. Widgets and sub-layouts can be added to this layout using addWidget() and addLayout().


See Also:


 Sample: Simple Input Dialog

 Sample: Simple Image Dialog

 Sample: Action Accelerators

 Sample: Version Conversion
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basicdialog_dz}*/
class DzBasicDialog extends DzDialog {
	/**
 * @description Default Constructor. Creates a typical DAZ Studio dialog with 'What's This', 'Apply', 'Accept', and 'Cancel' buttons. By default, the 'Apply' button is hidden, call showApplyButton() to make it visible.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a button into the horizontal layout of the dialog's button bar.
*/
	addButton(btn:DzButton, index:Number):DzButton {
	
	}

}
/**
 * @classdesc This specialized DzNode subclass adds follow bone, and mesh-binding functionality to a node. All bones are assumed to be in the hierarchy of a DzSkeleton, and will not function properly if their parent is not a skeleton or another bone.


The concept of a follow bone allows the bones of one skeleton (figure) to follow another skeleton (figure). This following does not reproduce transforms from one bone to another, but tries to align center (origin) and end points so that the following bone points in the same direction as the bone it is following. Typically, this is controlled at the skeleton level.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bone_dz}*/
class DzBone extends DzNode {
	/**
 * @description Default Constructor. Creates a new Bone node.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	getBoneLocalScale(tm:DzTime):DzMatrix3 {
	
	}

}
/**
 * @classdesc Represents a three dimensional box by storing two three dimensional floating point vectors; an upper and lower corner for the box.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/box3_dz}*/
class DzBox3 extends Object {
	max:DzVec3;
	maxX:Number;
	maxY:Number;
	maxZ:Number;
	min:DzVec3;
	minX:Number;
	minY:Number;
	minZ:Number;
	/**
 * @description Creates an uninitialized box - the first point included in an uninitialized box will become the min and max for the box.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Creates an initialized box with the given min and max values.
 * @constructor
*/
	constructor(xMin:Number, yMin:Number, zMin:Number, xMax:Number, yMax:Number, zMax:Number) {
	
	}
	/**
 * @description Creates an initialized box with the given min and max values.
 * @constructor
*/
	constructor(min:DzVec3, max:DzVec3) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(box:DzBox3) {
	
	}
	/**
 * @description Parameter(s):
*/
	closestPoint(point:DzVec3):DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	containsPoint(point:DzVec3):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getCenter() {
	
	}
	/**
 * @description Tests the box for intersection with the ray, and determines the two points on the box intersected by the line.
*/
	getIntersection(ray:DzLine3, firstIntersection:DzVec3, lastIntersection:DzVec3):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getSize() {
	
	}
	/**
 * @description Creates a new box by transforming the corners of this box through the given matrix and then including them.
*/
	getTransformedBox(matrix:DzMatrix3):DzMatrix3 {
	
	}
	/**
 * @description Parameter(s):
*/
	include(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Grows the box, if necessary, to include the given box.
*/
	include(box:DzBox3):void {
	
	}
	/**
 * @description Return Value:
*/
	isValid() {
	
	}
	/**
 * @description Provides a fast intersection test without returning the intersection locations. This function is much faster than getIntersection().
*/
	testIntersection(ray:DzLine3, tolerance:Number):Boolean {
	
	}
	/**
 * @description Translates the corners of the box by adding the given vector.
*/
	translate(vec:DzVec3):DzVec3 {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boxlayout_dz}*/
class DzBoxLayout extends DzLayout {
	/**
 * @description Horizontal from left to right.
*/
	
static LeftToRight;
	/**
 * @description Horizontal from right to left.
*/
	
static RightToLeft;
	/**
 * @description Vertical from top to bottom.
*/
	
static TopToBottom;
	/**
 * @description Vertical from bottom to top.
*/
	
static BottomToTop;
	/**
 * @description Creates a box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget, direction=LeftToRight:Direction) {
	
	}
	/**
 * @description Adds the given layout to the items managed by this layout
*/
	addLayout(layout:DzLayout, stretch:Number):DzLayout {
	
	}
	/**
 * @description Adds a non-stretchable space with size size to the end of this layout
*/
	addSpacing(size:Number):Number {
	
	}
	/**
 * @description Adds a stretchable space with stretch factor stretch to the end of this layout
*/
	addStretch(stretch:Number):Number {
	
	}
	/**
 * @description Limits the minimum dimension perpendicular to the direction the box, to size
*/
	addStrut(size:Number):Number {
	
	}
	/**
 * @description Adds the given widget to the items managed by this layout
*/
	addWidget(widget:DzWidget, stretch:Number):DzWidget {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/brickmaterial_dz}*/
class DzBrickMaterial extends DzMaterial, DzRefCountedItem {
	/**
 * @description Creates a new brick material.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds the given brick to this brick material.
*/
	addBrick(brick:shaderbrick_dz):Number {
	
	}
	/**
 * @description Return Value:
*/
	allowsAutoBake() {
	
	}
	/**
 * @description Apply a copy of this material to all selected materials in the scene.
*/
	applyToScene() {
	
	}
	/**
 * @description Deletes all bricks in this material.
*/
	deleteAllBricks() {
	
	}
	/**
 * @description Deletes the brick with the given id from the material.
*/
	deleteBrick(id:Number):Number {
	
	}
	/**
 * @description Deletes the given brick from the material.
*/
	deleteBrick(brick:shaderbrick_dz):void {
	
	}
	/**
 * @description Takes this brick material out of edit mode.
*/
	endEditMode() {
	
	}
	/**
 * @description Parameter(s):
*/
	getBrick(id:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getBrickIDs() {
	
	}
	/**
 * @description Parameter(s):
*/
	getBrickSet(i:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getBrickUserName() {
	
	}
	/**
 * @description Return Value:
*/
	getExtension() {
	
	}
	/**
 * @description Return Value:
*/
	getNumBrickSets() {
	
	}
	/**
 * @description Invalidates the brick sets, causing them to be rebuilt.
*/
	invalidateSets() {
	
	}
	/**
 * @description Return Value:
*/
	isInEditMode() {
	
	}
	/**
 * @description Sets the user name of this brick material.
*/
	setBrickUserName(name:String):String {
	
	}
	/**
 * @description Sets the name for this brick material.
*/
	setMaterialName(name:String):String {
	
	}
	/**
 * @description Sets whether or not this brick material needs Ptex parameters.
*/
	setNeedsPtexParams(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether this brick material needs tangent space parameters.
*/
	setNeedsTangentSpaceParams(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Puts this brick material in edit mode.
*/
	startEditMode() {
	
	}
	/**
 * @description Sets whether the identifier is updated when this brick material is invalidated.
*/
	updateIdentifierOnSetInvalidate(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	usesLocalShaderSpace() {
	
	}

}
/**
 * @classdesc DzButton implements an abstract button base. Subclasses specify how to respond to user interaction, and how to present the button to the user. If you want to create a button, create a DzPushButton.


DzPushButton provides both push and toggle buttons. The DzRadioButton and DzCheckBox classes provide only toggle buttons.


The difference between down and on is, when a user clicks a [toggle] button to toggle it on, the button is first pressed and then released into the On state (on is true, down is false). When the user clicks it again (to toggle it off), the button is first pressed and then released to the Off state (on and down are false).
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/button_dz}*/
class DzButton extends DzWidget {
	static autoRepeat:Boolean;
	static autoRepeatDelay:Number;
	static autoRepeatInterval:Number;
	static checkable:Boolean;
	static checked:Boolean;
	static down:Boolean;
	static pixmap:Pixmap;
	static text:String;
	static toggleButton:Boolean;
	/**
 * @description Toggles the state of a toggle button.
*/
	static toggle() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/buttongroup_dz}*/
class DzButtonGroup extends DzGroupBox {
	count:Number;
	exclusive:Boolean;
	radioButtonExclusive:Boolean;
	selected:Number;
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	addButton(button:DzButton):DzButton {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	addButton(button:DzButton, id:Number):DzButton {
	
	}
	/**
 * @description TODO:
Add description.
*/
	button(id:Number):DzButton {
	
	}
	/**
 * @description TODO:
Add description.
*/
	buttons() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	checkedButton() {
	
	}
	/**
 * @description Return Value:
*/
	id(button:DzButton):Number {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	insert(button:DzButton, id:Number):Number {
	
	}
	/**
 * @description Remove button from the group
*/
	removeButton(button:DzButton):DzButton {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QByteArray type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bytearray}*/
class ByteArray extends QObject {
	length:Number;
	size:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	byteAt(index:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	charAt(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	convertToString() {
	
	}
	/**
 * @description Return Value:
*/
	convertToStringFromUtf16() {
	
	}
	/**
 * @description Return Value:
*/
	convertToStringFromUtf8() {
	
	}
	/**
 * @description Return Value:
*/
	fromBase64(base64:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	fromHex(hexEncoded:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	fromPercentEncoding(pctEncoded:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	toBase64() {
	
	}
	/**
 * @description Return Value:
*/
	toHex() {
	
	}
	/**
 * @description Parameter(s):
*/
	toPercentEncoding(exclude:ByteArray, include:ByteArray):void {
	
	}

}
/**
 * @classdesc Encapsulates an object that is used to execute a script when a signal that it is connected to is triggered.


See Also:


 DzCallBackMgr.createCallBack(), DzCallBackMgr.getCallBack()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callback_dz}*/
class DzCallBack extends QObject {
	/**
 * @description Adds the callback to the given callback group.
*/
	static addToGroup(group:String):String {
	
	}

}
/**
 * @classdesc This class manages objects that are used to execute a scripts when a signal that the object is connected to is emitted. There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getCallBackMgr().


Example:


Dynamically load a script.

var sScript = "support/CallBackExample/HelloWorld.dsa";
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, false );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );

Example:


Embed a script.

var sPath = String( "%1/support/CallBackExample/HelloWorld.dsa" ).arg( App.getScriptsPath() );
var oScript = new DzScript;
oScript.loadFromFile( sPath );
var sScript = oScript.getCode();
 
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, true );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );

Example:


CallBack script (./support/CallBackExample/HelloWorld.dsa).


"CallBack" is a global transient variable referring to the DzCallBack that executes the script.

var oSender = CallBack.getSender();
var sMessage = String( "Sender Class: %1\n" +
		"Sender Name: %2\n\n" +
		"CallBack Args: %3" )
		.arg( oSender.className() )
		.arg( oSender.name )
		.arg( CallBack.getArgCount() );
 
var nArgs = CallBack.getArgCount();
if( nArgs > 0 ){
	for( var i = 0; i < nArgs; i += 1 ){
		sMessage += String( "\nArg %1 : %2" ).arg( i ).arg( CallBack.getArg( i ) );
	}
}
 
MessageBox.information( sMessage, CallBack.className(), "&OK" );

See Also:


 DzApp.getCallBackMgr()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callbackmgr_dz}*/
class DzCallBackMgr extends QObject {
	/**
 * @description Deletes all callbacks.
*/
	static clearAllCallBacks() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/camera_dz}*/
class DzCamera extends DzNode {
	/**
 * @description The width in pixels. Since: 4.6.4.70
*/
	
static LOCAL_PIXEL_WIDTH;
	/**
 * @description The height in pixels. Since: 4.6.4.70
*/
	
static LOCAL_PIXEL_HEIGHT;
	/**
 * @description The relative width of the aspect frame. Since: 4.6.4.70
*/
	
static LOCAL_ASPECT_WIDTH;
	/**
 * @description The relative height of the aspect frame. Since: 4.6.4.70
*/
	
static LOCAL_ASPECT_HEIGHT;
	/**
 * @description Orthogonal camera positioned to view the front of a figure
*/
	
static FRONT_CAMERA;
	/**
 * @description Orthogonal camera positioned to view the back of a figure
*/
	
static BACK_CAMERA;
	/**
 * @description Orthogonal camera positioned to view the left side of a figure.
*/
	
static LEFT_CAMERA;
	/**
 * @description Orthogonal camera positioned to view the right side of a figure.
*/
	
static RIGHT_CAMERA;
	/**
 * @description Orthogonal camera positioned to view a figure from the top.
*/
	
static TOP_CAMERA;
	/**
 * @description Orthogonal camera positioned to view a figure from the bottom.
*/
	
static BOTTOM_CAMERA;
	/**
 * @description Default perspective camera - defaults to a front view of a figure.
*/
	
static PERSPECTIVE_CAMERA;
	/**
 * @description General Orthogonal camera.
*/
	
static ORTHO_CAMERA;
	/**
 * @description General Perspective camera.
*/
	
static GENERAL_CAMERA;
	/**
 * @description The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
*/
	
static hmAuto;
	/**
 * @description The headlight is on. Since: 4.7.1.94
*/
	
static hmOn;
	/**
 * @description The headlight is off. Since: 4.7.1.94
*/
	
static hmOff;
	/**
 * @description Rotates the camera and adjusts its focal distance so that its focal point is at the given point.
*/
	static aimAt(pos:DzVec3):DzVec3 {
	
	}
	/**
 * @description Translates the camera so that its view frames the given box, and sets the camera's focal point to the center of the box, given the aspect ratio of the current view (w / h)
*/
	static frame(box:DzBox3, aspect:Number):DzBox3 {
	
	}
	/**
 * @description Return Value:
*/
	static getFieldOfView() {
	
	}
	/**
 * @description Return Value:
*/
	static getFocalPoint() {
	
	}
	/**
 * @description Return Value:
*/
	static getHeadlight() {
	
	}
	/**
 * @description Return Value:
*/
	static isViewCamera() {
	
	}
	/**
 * @description Resets the camera viewing parameters to defaults.
*/
	static reset() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static shouldDoHeadLight(hasLights:Boolean, isRender:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static shouldSortOnLoad() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static updateDimensions(anchor:CameraDimension):CameraDimension {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Camera(s) Preset in the DSON format.


See Also:


 Sample: Save a Camera(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cameraassetfilter_dz}*/
class DzCameraAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc The "Category" container type serves to provide a means of working with assets that share qualities or characteristics without moving the actual files on disk; moving or renaming files on disk breaks the correlation between the file and the asset that represents it.


See Also:


 DzAssetMgr.getCategories()

 DzAsset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/categoryassetcontainer_dz}*/
class DzCategoryAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	static isVendor:Boolean;
	/**
 * @description Parameter(s):
*/
	static getAssetsInCategory(userFacing:Boolean, installed:Boolean):Array {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Character Preset in DSON format.


See Also:


 Save a Character Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/characterassetfilter_dz}*/
class DzCharacterAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").


Example:

// Create a new dialog
var wDlg = new DzDialog;
wDlg.caption = "DzCheckBox Example";
 
// Create a layout for the dialog
var wLyt = new DzVBoxLayout( wDlg );
wLyt.autoAdd = true;
 
// Create a group box for the options
var wOptGB = new DzVGroupBox( wDlg );
wOptGB.columns = 1;
 
// Create the options
var wOpt1Btn = new DzCheckBox( wOptGB );
wOpt1Btn.text = "Option 1";
wOpt1Btn.checked = true;
var wOpt2Btn = new DzCheckBox( wOptGB );
wOpt2Btn.text = "Option 2";
var wOpt3Btn = new DzCheckBox( wOptGB );
wOpt3Btn.text = "Option 3";
wOpt3Btn.checked = true;
 
// Launch the dialog
wDlg.exec();
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checkbox_dz}*/
class DzCheckBox extends DzButton {
	checked:Boolean;
	tristate:Boolean;
	/**
 * @description Creates a check box as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc This class is not a widget, but a helper class for working with DzListView. Each DzCheckListItem represents a single item in a list view - add items to a list view by creating a new DzCheckListItem that is a child of the list view, or a child of another list view item in the list view.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checklistitem_dz}*/
class DzCheckListItem extends DzListViewItem {
	/**
 * @description The item is off
*/
	
static Off;
	/**
 * @description The item has not changed - i.e. it is in the third state and the user has not clicked it.
*/
	
static NoChange;
	/**
 * @description The item is on
*/
	
static On;
	/**
 * @description Radio Button item. Must be the child of a RadioButtonController
*/
	
static RadioButton;
	/**
 * @description Check Box item.
*/
	
static CheckBox;
	/**
 * @description Radio Button parent item.
*/
	
static RadioButtonController;
	/**
 * @description Check Box parent item.
*/
	
static CheckBoxController;
	/**
 * @description Creates a checklist item at the root level of the given list view
 * @constructor
*/
	constructor(parent:DzListView, type=RadioButtonController:Type, id=-1:Number) {
	
	}
	/**
 * @description Creates a checklist item as a child of the given list item
 * @constructor
*/
	constructor(parent:DzCheckListItem, type=RadioButtonController:Type, id=-1:Number) {
	
	}
	/**
 * @description Creates a checklist item as a child of the given list item
 * @constructor
*/
	constructor(parent:DzListViewItem, type=RadioButtonController:Type, id=-1:Number) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/circle3_dz}*/
class DzCircle3 extends Object {
	center:DzVec3;
	normal:DzVec3;
	radius:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(circle:DzCircle3) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(center:DzVec3, normal:DzVec3, radius:Number) {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QColor type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/color}*/
class Color extends QObject {
	alpha:Number;
	blue:Number;
	green:Number;
	hue:Number;
	name:String;
	red:Number;
	rgb:Number;
	saturation:Number;
	value:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Sets the RGB value from colorName, which may be in one of these formats (each of R, G and B is a single hex digit):
 * @constructor
*/
	constructor(colorName:String) {
	
	}
	/**
 * @description Component-wise constructor. Each value (i.e., r, g, b, a ) should be in the [0, 255] range.
 * @constructor
*/
	constructor(r:Number, g:Number, b:Number, a=255:Number) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(color:Color) {
	
	}
	/**
 * @description Return Value:
*/
	dark() {
	
	}
	/**
 * @description Return Value:
*/
	isValid() {
	
	}
	/**
 * @description Return Value:
*/
	light() {
	
	}
	/**
 * @description Sets the red, green, blue and alpha values of this color to r, g, b and a, respectively.
*/
	setRgb(r:Number, g:Number, b:Number, a:Number):Number {
	
	}
	/**
 * @description Sets the red, green and blue values of this color to r, g and b, respectively.
*/
	setRgb(r:Number, g:Number, b:Number):Number {
	
	}
	/**
 * @description Sets the color code of the color. The value is a bitmask on the form 0xRRGGBB, where RR=red, GG=green, and BB=blue, all as hexadecimal digits.
*/
	setRgb(colorCode:Number):Number {
	
	}

}
/**
 * @classdesc The DzColorDialog class is available in DAZScript via Global.ColorDialog.


It provides a function to display an OS native color picker to the user - simply call the function as shown in the following example:


Example - Have the user select a color : 

var color = ColorDialog.getColor();

Other functions are provided for getting and setting the pre-set colors listed in the picker - see the rest of the documentation for details.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colordialog_dz}*/
class DzColorDialog extends QObject {
	/**
 * @description Return Value:
*/
	static customColor(i:Number):Color {
	
	}

}
/**
 * @classdesc This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorproperty_dz}*/
class DzColorProperty extends DzIntProperty {
	/**
 * @description Hue, Saturation, and Value.
*/
	
static HSV;
	/**
 * @description Hue, Saturation, and Lightness (or Luminosity).
*/
	
static HSL;
	/**
 * @description Red, Green, Blue.
*/
	
static RGB;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:Color) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getAnimationBlendMode() {
	
	}
	/**
 * @description Return Value:
*/
	getColorValue() {
	
	}
	/**
 * @description Parameter(s):
*/
	getColorValue(tm:DzTime):Color {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultColorValue() {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyColorValue(i:Number):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getRawColorValue(tm:DzTime):Color {
	
	}
	/**
 * @description Return Value:
*/
	getRawColorValue() {
	
	}
	/**
 * @description Sets the animation blend mode for the property.
*/
	setAnimationBlendMode(mode:AnimationBlendMode):AnimationBlendMode {
	
	}
	/**
 * @description Sets the color value for this property at the given time; or the default value if this property is not animatable.
*/
	setColorValue(tm:DzTime, val:Color):DzTime {
	
	}
	/**
 * @description Sets the color value for this property at the current time; or the default value if this property is not animatable.
*/
	setColorValue(val:Color):Color {
	
	}
	/**
 * @description Sets the default color value for this property.
*/
	setDefaultColorValue(val:Color):Color {
	
	}
	/**
 * @description Sets the color value of this property for the given key.
*/
	setKeyColorValue(i:Number, val:Color):Number {
	
	}

}
/**
 * @classdesc A DzColorWgt provides a control for displaying/selecting a color.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorwgt_dz}*/
class DzColorWgt extends DzWidget {
	indeterminate:Boolean;
	value:Color;
	/**
 * @description Creates a color widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc DzComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/combobox_dz}*/
class DzComboBox extends DzWidget {
	/**
 * @description TODO: Add description.
*/
	
static NoInsert;
	/**
 * @description TODO: Add description.
*/
	
static InsertAtTop;
	/**
 * @description TODO: Add description.
*/
	
static InsertAtCurrent;
	/**
 * @description TODO: Add description.
*/
	
static InsertAtBottom;
	/**
 * @description TODO: Add description.
*/
	
static InsertAfterCurrent;
	/**
 * @description TODO: Add description.
*/
	
static InsertBeforeCurrent;
	/**
 * @description TODO: Add description.
*/
	
static InsertAlphabetically;
	/**
 * @description TODO: Add description.
*/
	
static AdjustToContents;
	/**
 * @description TODO: Add description.
*/
	
static AdjustToContentsOnFirstShow;
	/**
 * @description TODO: Add description.
*/
	
static AdjustToMinimumContentsLength;
	/**
 * @description TODO: Add description.
*/
	
static AdjustToMinimumContentsLengthWithIcon;
	/**
 * @description Creates a combobox as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds text to the list of items in the combobox.
*/
	addItem(text:String, userData:String):String {
	
	}
	/**
 * @description Adds each of the strings in texts to the combobox
*/
	addItems(texts:Array):Array {
	
	}
	/**
 * @description Removes all items from the combobox.
*/
	clear() {
	
	}
	/**
 * @description Return Value:
*/
	findData(data:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	findText(text:String):Number {
	
	}
	/**
 * @description Inserts the text and userData into the combobox at index. If index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If index is zero or negative, the new item is prepended to the list of existing items.
*/
	insertItem(index:Number, text:String, userData:String):Number {
	
	}
	/**
 * @description Inserts the strings in list into the combobox as separate items, starting at index.
*/
	insertItems(index:Number, list:Array):Number {
	
	}
	/**
 * @description Inserts a separator into the combobox at index.
*/
	insertSeparator(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	itemData(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	itemText(index:Number):String {
	
	}
	/**
 * @description Removes the item at index from the list of items.
*/
	removeItem(index:Number):Number {
	
	}
	/**
 * @description Sets the data for the item at index.
*/
	setItemData(index:Number, value:String):Number {
	
	}
	/**
 * @description Sets the text for the item at index.
*/
	setItemText(index:Number, text:String):Number {
	
	}

}
/**
 * @classdesc A DzComboEdit provides a compound widget comprised of a line edit and a button that, when clicked, causes a menu to be displayed. Selecting one of the items in the popup menu causes the value of the editor to update with the text of the selected item by default. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.


Example:

var oNode = Scene.getPrimarySelection();
if( oNode ){
	if( oNode.inherits( "DzBone" ) ){
		oNode = oNode.getSkeleton();
	}
 
	var aNodes = oNode.getAllBones();
	aNodes.unshift( oNode );
 
	var oDlg = new DzBasicDialog();
	var sHelpTitle = qsTr("Select a Node");
	var sHelpBody = qsTr("This is a basic dialog for requesting user input.");
	oDlg.caption = sHelpTitle;
	oDlg.toolTip = sHelpBody;
	oDlg.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
 
	var sEmpty = qsTr("None");
 
	var oNodeCmbEdt = new DzComboEdit( oDlg );
	oNodeCmbEdt.text = sEmpty;
	oNodeCmbEdt.readOnly = true;
	oNodeCmbEdt.addItems( [sEmpty, "-"] );
	for( var i = 0; i < aNodes.length; i += 1 ){
			oNodeCmbEdt.addItem( aNodes[i].getLabel() );
	}
	sHelpTitle = qsTr("Node Selector");
	sHelpBody = qsTr("Click the arrow for options. Right click the field for additional options.");
	oNodeCmbEdt.toolTip = sHelpBody;
	oNodeCmbEdt.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
	oDlg.addWidget( oNodeCmbEdt );
 
	var oWidget = oDlg.getWidget();
	oWidget.objectName = "DzComboEditExampleDlg";
 
	var sizeHint = oWidget.minimumSizeHint;
	var nHeight = sizeHint.height;
 
	oDlg.setFixedHeight( nHeight );
 
	if( oDlg.exec() ){
		print( qsTr("Dialog accted.") );
		if( oNodeCmbEdt.text == sEmpty ){
			print( qsTr("None selected.") );
		} else {
			print( qsTr("Node selected:"), oNodeCmbEdt.text );
		}
	} else {
		print( qsTr("Dialog rejected.") );
	}
}
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/comboedit_dz}*/
class DzComboEdit extends DzWidget {
	placeholderText:String;
	readOnly:Boolean;
	text:String;
	usePathPopUp:Boolean;
	/**
 * @description Creates a combo edit as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget, updateOnSelect=true:Boolean) {
	
	}
	/**
 * @description TODO:
Add description.
*/
	addItem(item:String):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	addItems(items:Array):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clear() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	findItem(text:String):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertItem(index:Number, item:String):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertItems(index:Number, items:Array):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	items() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	removeItem(item:String):String {
	
	}

}
/**
 * @classdesc The "Compatibility Base" container type serves to provide a means of working with assets that are defined to be compatible with a particular Compatibility Base.


See Also:


 DzAssetMgr.getCompatibilityBases()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/compatibilitybaseassetcontainer_dz}*/
class DzCompatibilityBaseAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	static isFilter:Boolean;
	static isVendor:Boolean;
	/**
 * @description Return Value:
*/
	static getPath() {
	
	}

}
/**
 * @classdesc Represents a file in the content library that can be loaded/imported. Also provides functionality for moving the file to a new location, renaming the file, and deleting the file from the library.


See Also:


 DzContentFolder
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfile_dz}*/
class DzContentFile extends QObject, DzRefCountedItem {
	static canDelete:Boolean;
	static canRename:Boolean;
	static companionIsScript:Boolean;
	static companionPath:String;
	static fullPath:String;
	static hasCompanion:Boolean;
	static hasCompanionScript:Boolean;
	static icon:Pixmap;
	static isNative:Boolean;
	static isScript:Boolean;
	static label:String;
	static name:String;
	static smallIcon:Pixmap;
	/**
 * @description Removes this file from its content folder. The default implementation of this function deletes the content file and any associated thumbnail image from the disk, so use with care!
*/
	static deleteFile() {
	
	}
	/**
 * @description Return Value:
*/
	static getFolder() {
	
	}
	/**
 * @description Return Value:
*/
	static getNext() {
	
	}
	/**
 * @description Force the file to reload its icon.
*/
	static reloadIcon() {
	
	}
	/**
 * @description Rename the file to the given name.
*/
	static rename(newName:String):Boolean {
	
	}

}
/**
 * @classdesc Represents a folder in the content library that holds DzContentFile objects as well as other DzContentFolder objects.


See Also:


 DzContentMgr.getContentDirectory(), DzContentMgr.getImportDirectory(), DzContentMgr.getPoserDirectory(), DzContentMgr.findBaseDirectory()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfolder_dz}*/
class DzContentFolder extends DzBase, DzRefCountedItem {
	/**
 * @description Folder containing native content.
*/
	
static NATIVE_TYPE;
	/**
 * @description Folder containing Poser content.
*/
	
static POSER_TYPE;
	/**
 * @description Folder containing other importable content.
*/
	
static IMPORT_TYPE;
	/**
 * @description Adds a new subfolder with the given name to this folder.
*/
	static addSubFolder(folderName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static canMoveFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Copies the given content file to this folder.
*/
	static copyFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Removes this content folder. The default implementation of this function deletes all files and subfolders in this directory from the disk, so use with care!
*/
	static deleteFolder() {
	
	}
	/**
 * @description Return Value:
*/
	static getFirstFile() {
	
	}
	/**
 * @description Return Value:
*/
	static getFirstFolder() {
	
	}
	/**
 * @description Return Value:
*/
	static getFirstHiddenFile() {
	
	}
	/**
 * @description Return Value:
*/
	static getFirstHiddenFolder() {
	
	}
	/**
 * @description Return Value:
*/
	static getNext() {
	
	}
	/**
 * @description Return Value:
*/
	static getParent() {
	
	}
	/**
 * @description Return Value:
*/
	static hasSubFolders() {
	
	}
	/**
 * @description Return Value:
*/
	static isModifiable() {
	
	}
	/**
 * @description Moves the given content file to this folder.
*/
	static moveFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Checks for changes in sub folders and files (if loaded).
*/
	static refresh(reloadIcons:Boolean):Boolean {
	
	}
	/**
 * @description Rename the folder to the given name.
*/
	static rename(newName:String):Boolean {
	
	}

}
/**
 * @classdesc The manager that is responsible for all the content folder & file trees that are accessible from the content library.


There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getContentMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentmgr_dz}*/
class DzContentMgr extends DzBase {
	/**
 * @description Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
*/
	
static NativeDirs;
	/**
 * @description Represents the directories that are mapped and expected to contain files in the Poser file formats.
*/
	
static PoserDirs;
	/**
 * @description Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
*/
	
static ImportDirs;
	/**
 * @description Represents the built-in directories that are expected to contain files in compatible formats.
*/
	
static BuiltInDirs;
	/**
 * @description Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
*/
	
static MDLDirs;
	/**
 * @description Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
*/
	
static CloudDB;
	/**
 * @description Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
*/
	
static CloudDir;
	/**
 * @description Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
*/
	
static NativeAndBuiltInDirs;
	/**
 * @description Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
*/
	
static CloudNativeAndBuiltInDirs;
	/**
 * @description Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
*/
	
static AllLocalNonCloudDirs;
	/**
 * @description Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
*/
	
static AllLocalDirs;
	/**
 * @description Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The "all" prior to 4.8.
*/
	
static AllDirs;
	/**
 * @description Represents all directory types. Since: 4.9.0.51
*/
	
static AllDirsAndCloud;
	/**
 * @description Adds a native content directory to the list.
*/
	static addContentDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds an import directory to the list.
*/
	static addImportDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a directory where MDL files can reside to the list.
*/
	static addMDLDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a Poser import content directory to the list.
*/
	static addPoserDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a file to the list of recent files.
*/
	static addRecentFile(filename:String):String {
	
	}
	/**
 * @description Clears the list of recent files.
*/
	static clearRecentFileList() {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped native content directories.
*/
	static contentDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Displays a dialog to the user to perform a Poser content search on the local machine.
*/
	static doContentSearch() {
	
	}
	/**
 * @description Causes the content manager to check the number of mapped content directories, and display a warning to the user if it is excessive.
*/
	static doDirNumCheck() {
	
	}
	/**
 * @description Notifies the content manager that a new content file has been saved.
*/
	static fileCreated(filename:String):String {
	
	}
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
*/
	static findBaseDirectory(dirTypes:DirectoryTypes, path:String):DzContentFolder {
	
	}
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
*/
	static findBaseDirectory(path:String, useImportFolders:Boolean):DzContentFolder {
	
	}
	/**
 * @description Given a partial path (a file path that is relative to a content directory) this function traverses all folders of the specified mapped directory types in the following order (NativeDirs, PoserDirs, ImportDirs, BuiltInDirs)
*/
	static findFile(partialPath:String, dirTypes:DirectoryTypes):String {
	
	}
	/**
 * @description Finds the source path for a node in the scene.
*/
	static findSourcePathForNode(sceneNode:DzNode):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	static getAbsolutePath(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	static getAbsolutePath(relativePath:String, useImportFolders:Boolean, preferredPath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	static getAbsolutePaths(dirTypes:DirectoryTypes, relativePath:String):Array {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped directory.
*/
	static getAbsolutePaths(relativePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	static getAbsoluteUri(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):DzUri {
	
	}
	/**
 * @description Return Value:
*/
	static getBuiltInContentDirectory() {
	
	}
	/**
 * @description Return Value:
*/
	static getBuiltInContentDirectoryPath() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getBuiltInMDLDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	static getBuiltInMDLDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for the mapped cloud directory.
*/
	static getCloudAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getCloudContentDirectory() {
	
	}
	/**
 * @description Return Value:
*/
	static getCloudContentDirectoryPath() {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to the cloud directory. If the path cannot be shortened, the original string is returned.
*/
	static getCloudRelativePath(absolutePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getContentDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	static getContentDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getContentReplaceMgr() {
	
	}
	/**
 * @description Return Value:
*/
	static getDefaultContentDir() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getDirectoryContentsUrisList(dirTypes:DirectoryTypes, relativeDirPaths:Array, fileSuffixes:Array):Array {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped import directory, finally falling back to the Built-In content directory.
*/
	static getImportAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getImportDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	static getImportDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getImportFileExtensions() {
	
	}
	/**
 * @description Attempts to extract the mapped directory portion of path.
*/
	static getMappedPath(path:String, useImportFolders:Boolean, isRelative:Boolean):String {
	
	}
	/**
 * @description Attempts to extract the mapped directory portion of path.
*/
	static getMappedPath(dirTypes:DirectoryTypes, path:String, isRelative:Boolean):String {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped MDL directory, as well as the built-in MDL directories, finally falling back to the built-in content directory.
*/
	static getMDLAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getMDLDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	static getMDLDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped MDL directories. If the path cannot be shortened, the original string is returned.
*/
	static getMDLRelativePath(absolutePath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped native directory, finally falling back to the Built-In content directory.
*/
	static getNativeAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getNativeBaseUserFacingExcludedDirs() {
	
	}
	/**
 * @description Return Value:
*/
	static getNativeFileExtensions() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumBuiltInMDLDirectories() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumContentDirectories() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumImportDirectories() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumMDLDirectories() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumPoserDirectories() {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped Poser directory, finally falling back to the Built-In content directory.
*/
	static getPoserAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static getPoserBaseUserFacingDirs() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getPoserDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	static getPoserDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	static getPoserFileExtensions() {
	
	}
	/**
 * @description Return Value:
*/
	static getRecentFileList() {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original path is returned.
*/
	static getRelativePath(dirTypes:DirectoryTypes, absolutePath:String):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original string is returned.
*/
	static getRelativePath(absolutePath:String, useImportFolders:Boolean):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	static getRelativePaths(dirTypes:DirectoryTypes, absolutePath:String):Array {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	static getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped import directories.
*/
	static importDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Imports the file at the given path. A companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists. This function should only be used in special circumstances. Use openFile() instead.
*/
	static importFile(path:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isDirectoryMapped(directory:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isUserFacingDirectoryPath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	static isUserFacingFilePath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	}
	/**
 * @description Loads an asset as a new scene.
*/
	static loadAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Loads an asset into the scene.
*/
	static loadAsset(asset:DzAsset, merge:Boolean):Boolean {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped MDL directories.
*/
	static mdlDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Merges a list of files, either as native files or imported files, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	static mergeFiles(filenames:Array):Boolean {
	
	}
	/**
 * @description Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	static openFile(filename:String, merge:Boolean):Boolean {
	
	}
	/**
 * @description Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
*/
	static openNativeFile(filename:String, isMerge:Boolean):Boolean {
	
	}
	/**
 * @description Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
*/
	static openNativeUri(uri:DzUri, filename:String, isMerge:Boolean):Boolean {
	
	}
	/**
 * @description Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	static openUri(uri:DzUri, filename:String, merge:Boolean):Boolean {
	
	}
	/**
 * @description Attempts to locate dirPath path among the mapped Poser content directories.
*/
	static poserDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Refreshes any currently loaded content directories. Call this after any operation that makes changes to the file system, e.g. saving or deleting files, etc.
*/
	static refresh(reloadIcons:Boolean):Boolean {
	
	}
	/**
 * @description Causes assets for a given node in the scene to be reloaded, using the given settings, from source files at the given path.
*/
	static reloadAssetsFromSource(sceneNode:DzNode, settings:DzSettings, srcFilePath:String):DzError {
	
	}
	/**
 * @description Causes the assets for all nodes in the scene to be reloaded from their respective source files.
*/
	static reloadSceneAssetsFromSource(settings:DzSettings):Boolean {
	
	}
	/**
 * @description Removes all native content mapped directories.
*/
	static removeAllContentDirectories() {
	
	}
	/**
 * @description Removes all import content directory mappings from the list.
*/
	static removeAllImportDirectories() {
	
	}
	/**
 * @description Removes all MDL directory mappings from the list.
*/
	static removeAllMDLDirectories() {
	
	}
	/**
 * @description Removes all Poser import content directory mappings from the list.
*/
	static removeAllPoserDirectories() {
	
	}
	/**
 * @description Removes a navtive content directory mapping from the list.
*/
	static removeContentDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes an import content directory mapping from the list.
*/
	static removeImportDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes a MDL directory mapping from the list.
*/
	static removeMDLDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes a Poser import content directory mapping from the list.
*/
	static removePoserDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Saves all currently mapped directories to the registry.
*/
	static saveAllMappedDirectories() {
	
	}
	/**
 * @description Deprecated
*/
	static setCheckCompatibilityOn(useCheckCompatibility:Boolean):Boolean {
	
	}
	/**
 * @description Sets the directory for content and utilities downloaded and installed through the application.
*/
	static setCloudContentDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Sets the list of directories for native format files.
*/
	static setContentDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets the list of directories for other import format files.
*/
	static setImportDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets the list of directories for Poser format files.
*/
	static setPoserDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets whether or not to use the database.
*/
	static setUseDatabaseSearch(useDatabase:Boolean):Boolean {
	
	}
	/**
 * @description Given the filename, determines if the file should be treated as a merge or an open when loaded. This is determined first by content type. If that does not exist and the file is a .duf it will attempt to retrieve the type from inside the file.
*/
	static shouldMerge(filename:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	static usingCheckCompatibility() {
	
	}
	/**
 * @description Return Value:
*/
	static usingDatabaseSearch() {
	
	}

}
/**
 * @classdesc See Also:


 DzContentMgr.getContentReplaceMgr()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentreplacemgr_dz}*/
class DzContentReplaceMgr extends QObject {
	/**
 * @description When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed, so the new item replaces the old one.
*/
	
static ALWAYS_REPLACE;
	/**
 * @description When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
*/
	
static ASK_TO_REPLACE;
	/**
 * @description Items already in the scene are never removed when loading a piece of content.
*/
	
static NEVER_REPLACE;
	/**
 * @description When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
*/
	
static ASK_WHEN_MATCHING;
	/**
 * @description Resets all replace data to default values, excluding replace mode.
*/
	static clearReplaceData() {
	
	}

}
/**
 * @classdesc The controller class is like a modifier for DzProperty types. Controllers allow implementation of custom modulation of properties without changing the properties actual value. Common implementations of controllers include: controllers that adjust one property based on the value of another property, controllers that replace the value of one property with the value of another property, controllers that use a script expression to drive a property, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/controller_dz}*/
class DzController extends DzBase {
	/**
 * @description Has no effect on the property
*/
	
static None;
	/**
 * @description Uses the current value of the property to calculate the result
*/
	
static Additive;
	/**
 * @description Ignores the current value of the property, and calculates the result from unrelated factors.
*/
	
static Replace;
	/**
 * @description TODO:
Add description.
*/
	static getOwner() {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()

 Export TriAx to Poser
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cr2exporter_dz}*/
class DzCr2Exporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/customdata_dz}*/
class DzCustomData extends DzBase {
	/**
 * @description Return Value:
*/
	static isPersistent() {
	
	}

}
/**
 * @classdesc A DzDateTimeEdit provides a combination date and time editor.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/datetimeedit_dz}*/
class DzDateTimeEdit extends DzWidget {
	date:Date;
	dateMax:Date;
	dateMin:Date;
	dateSeparator:String;
	dateTime:dateTime;
	displayFormat:String;
	time:Date;
	timeMax:Date;
	timeMin:Date;
	timeSeparator:String;
	/**
 * @description Creates a date time edit widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/defaultmaterial_dz}*/
class DzDefaultMaterial extends DzMaterial, DzRefCountedItem {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientColor() {
	
	}

}
/**
 * @classdesc Implements a RenderMan interface for the scene to render itself through the 3Delight renderer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/delightrenderer_dz}*/
class DzDelightRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	resetIPRHandler() {
	
	}

}
/**
 * @classdesc This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QDesktopWidget class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/desktopwidget_q}*/
class QDesktopWidget extends QWidget {
	static primaryScreen:Number;
	static screenCount:Number;
	static virtualDesktop:Boolean;

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/device_dz}*/
class DzDevice extends QObject {
	/**
 * @description Parameter(s):
*/
	static getDefaultSettings(settings:DzSettings):DzSettings {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/devicemgr_dz}*/
class DzDeviceMgr extends QObject {
	/**
 * @description Parameter(s):
*/
	static getDevice(which:Number):DzDevice {
	
	}

}
/**
 * @classdesc The DForm is the primary component of a DForm deformer. The others are the DzDFormBase, DzDFormZone and dformmodifier_dz.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dform_dz}*/
class DzDForm extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds the effect of this DForm to the given node
*/
	applyToNode(node:DzNode):DzNode {
	
	}

}
/**
 * @classdesc An asset save filter for saving a D-Former(s) Preset in the DSON format.


See Also:


 Sample: Save a D-Former(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformassetfilter_dz}*/
class DzDFormAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc The Base is one component of a DForm deformer. The others are the DzDForm, DzDFormZone and dformmodifier_dz.


The DForm Base functions as the origin for the DForm deformation effect, as detailed in the DForm class.


The DForm Base and Zone can be created separately from the DForm and then joined together with the addDForm(), addZone(), etc functions.


The DForm Base is a skeleton and the DForm itself is a bone of the Base. This prevents the two components from being reparented away from each other and retains the parent-child relationship for the relative transform calculations.


The DForm Base draws itself in the scene using the DForm_base_ColorMax and DForm_base_ColorMin embedded geometry. The DForm_base_ColorMax is drawn with the maximum color of the vertex weight color gradient and the DForm_base_ColorMin is drawn with the minimum color.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformbase_dz}*/
class DzDFormBase extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Returns the Bases's DForm
*/
	getDForm() {
	
	}

}
/**
 * @classdesc The Zone is one component of a DForm deformer. The others are the DzDForm, DzDFormBase and dformmodifier_dz.


The Zone is an independent DzNode derived object that is used to set the area of influence of the DForm's effect.


It is spherical in shape but can be scaled into any form of ellipsoid.


The Zone has an effect falloff zone based on a naturalspline_dz object. The falloff is the same along the x,y and z axis.


The Zone has draws itself as a wireframe sphere. The base size of this sphere is controlled by the DzFloatProperty "Radius". This sphere can be made transparent and is controlled by the DzFloatProperty "Opacity". The Zone is drawn with the maximum gradient color of the DForm.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformzone_dz}*/
class DzDFormZone extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Returns the DForm for the Zone.
*/
	getDForm() {
	
	}

}
/**
 * @classdesc A DzDial provides a rounded range control like a speedometer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dial_dz}*/
class DzDial extends DzWidget {
	lineStep:Number;
	max:Number;
	min:Number;
	notchesVisible:Boolean;
	notchSize:Number;
	notchTarget:Number;
	pageStep:Number;
	tracking:Boolean;
	value:Number;
	wrapping:Boolean;
	/**
 * @description Creates a dial widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc This is the basic building block for DAZScript interfaces. DzDialog provides an independent window widget that in turn can act as the parent for other DAZScript widgets. Most custom DAZScript interfaces will be built starting with a DzDialog customized with Layout and DzWidget components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dialog_dz}*/
class DzDialog extends DzWidget {
	caption:String;
	orientation:DzWidget;
	sizeGripEnabled:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor(parent=undefined:QWidget) {
	
	}
	/**
 * @description Closes the dialog.
*/
	close() {
	
	}
	/**
 * @description Displays the dialog to the user.
*/
	exec() {
	
	}
	/**
 * @description Return Value:
*/
	extension() {
	
	}
	/**
 * @description Causes the extension widget for the dialog to be hidden.
*/
	hideExtension() {
	
	}
	/**
 * @description Sets the button that will cause the dialog to close and return true.
*/
	setAcceptButton(btn:DzButton):DzButton {
	
	}
	/**
 * @description Sets the extension widget for the dialog.
*/
	setExtension(extension:DzWidget):DzWidget {
	
	}
	/**
 * @description Sets the button that will cause the dialog to close and return false.
*/
	setRejectButton(btn:DzButton):DzButton {
	
	}
	/**
 * @description Sets the extension widget visibility to onOff.
*/
	showExtension(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Causes the extension widget for the dialog to be shown.
*/
	showExtension() {
	
	}

}
/**
 * @classdesc Provides access to the file system directory structure. It provides functions for creating, removing, traversing, and searching directories.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dir_dz}*/
class DzDir extends QObject {
	/**
 * @description List directories that match the filters.
*/
	
static Dirs;
	/**
 * @description List files that match the filters.
*/
	
static Files;
	/**
 * @description List drives that match the filters.
*/
	
static Drives;
	/**
 * @description Do not list symbolic links.
*/
	
static NoSymLinks;
	/**
 * @description List directories, files, drives and symbolic links.
*/
	
static AllEntries;
	/**
 * @description List directories, files, drives and symbolic links.
*/
	
static All;
	/**
 * @description Type Mask
*/
	
static TypeMask;
	/**
 * @description List entries for which the application has read access. Needs to be combined with Dirs or Files.
*/
	
static Readable;
	/**
 * @description List entries for which the application has write access. Needs to be combined with Dirs or Files.
*/
	
static Writable;
	/**
 * @description List entries for which the application has execute access. Needs to be combined with Dirs or Files.
*/
	
static Executable;
	/**
 * @description Include Readable, Writable, and Executable entries
*/
	
static PermissionMask;
	/**
 * @description Include Readable, Writable, and Executable entries
*/
	
static RWEMask;
	/**
 * @description Only list entries that have been modified.
*/
	
static Modified;
	/**
 * @description List hidden entries.
*/
	
static Hidden;
	/**
 * @description List system entries.
*/
	
static System;
	/**
 * @description Access mask
*/
	
static AccessMask;
	/**
 * @description List all directories; don't apply filters to directory names.
*/
	
static AllDirs;
	/**
 * @description The filter should be treated as case sensitive.
*/
	
static CaseSensitive;
	/**
 * @description Do not list the special entries '.' and '..'.
*/
	
static NoDotAndDotDot;
	/**
 * @description Do not list the special entry '.'.
*/
	
static NoDot;
	/**
 * @description Do not list the special entry '..'.
*/
	
static NoDotDot;
	/**
 * @description Do not filter.
*/
	
static NoFilter;
	/**
 * @description Sort by name.
*/
	
static Name;
	/**
 * @description Sort by time (modification time).
*/
	
static Time;
	/**
 * @description Sort by size.
*/
	
static Size;
	/**
 * @description Do not sort.
*/
	
static Unsorted;
	/**
 * @description Mask for Sort by
*/
	
static SortByMask;
	/**
 * @description Put the directories first, then the files.
*/
	
static DirsFirst;
	/**
 * @description Reverse the sort order.
*/
	
static Reversed;
	/**
 * @description Sort case-insensitively.
*/
	
static IgnoreCase;
	/**
 * @description Put the files first, then the directories.
*/
	
static DirsLast;
	/**
 * @description Sort items appropriately using the current locale settings.
*/
	
static LocaleAware;
	/**
 * @description Sort by file type (extension).
*/
	
static Type;
	/**
 * @description Not sorted by default.
*/
	
static NoSort;
	/**
 * @description Creates a directory object with the given path.
 * @constructor
*/
	constructor(path:String) {
	
	}
	/**
 * @description Deprecated
*/
	absFilePath(file:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	absoluteFilePath(fileName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	absolutePath() {
	
	}
	/**
 * @description Deprecated
*/
	absPath() {
	
	}
	/**
 * @description Return Value:
*/
	canonicalPath() {
	
	}
	/**
 * @description Changes the current directory to dirName.
*/
	cd(dirName:String):Boolean {
	
	}
	/**
 * @description Changes the directory by moving one directory up from the current directory.
*/
	cdUp() {
	
	}
	/**
 * @description Makes a copy of a file.
*/
	copy(srcFile:String, destFile:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	count() {
	
	}
	/**
 * @description Return Value:
*/
	dirName() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(nameFilters:Array, filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(nameFilter:String, filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	exists(name:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	exists() {
	
	}
	/**
 * @description Deprecated
*/
	fileExists(fileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	filePath(fileName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	filter() {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilesFromDir(extentions:Array, recursive:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	isAbsolute() {
	
	}
	/**
 * @description Return Value:
*/
	isReadable() {
	
	}
	/**
 * @description Return Value:
*/
	isRelative() {
	
	}
	/**
 * @description Return Value:
*/
	isRoot() {
	
	}
	/**
 * @description Converts the directory path to an absolute path. If it is already absolute nothing happens.
*/
	makeAbsolute() {
	
	}
	/**
 * @description Creates a new directory.
*/
	mkdir(dirName:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	mkdirs(dirName:String):Boolean {
	
	}
	/**
 * @description Creates all directories that do not already exist in dirpath.
*/
	mkpath(dirpath:String):Boolean {
	
	}
	/**
 * @description Moves a file to a new location.
*/
	move(srcFile:String, destFile:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	nameFilters() {
	
	}
	/**
 * @description Return Value:
*/
	path() {
	
	}
	/**
 * @description Refreshes the directory information.
*/
	refresh() {
	
	}
	/**
 * @description Return Value:
*/
	relativeFilePath(fileName:String):String {
	
	}
	/**
 * @description Removes fileName from this directory.
*/
	remove(fileName:String):Boolean {
	
	}
	/**
 * @description Renames a file or directory from oldName to newName.
*/
	rename(oldName:String, newName:String):Boolean {
	
	}
	/**
 * @description Removes a directory.
*/
	rmdir(dirName:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	rmdirs(dirName:String):Boolean {
	
	}
	/**
 * @description Removes all directories that exist in dirpath, provided that they are empty. This is the opposite of mkpath().
*/
	rmpath(dirPath:String):Boolean {
	
	}
	/**
 * @description Sets the current working directory of the application to be this directory.
*/
	setCurrent() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFilter(filters:Filter):Filter {
	
	}
	/**
 * @description Sets the name filters used by entryList() to the list of filters specified by nameFilters. Each name filter is a wildcard (globbing) filter that understands * and ? wildcards.
*/
	setNameFilters(nameFilters:Array):Array {
	
	}
	/**
 * @description Sets the path of this directory to newPath.
*/
	setPath(path:String):String {
	
	}
	/**
 * @description Sets the sort order used by entryList(). The sort is specified by OR-ing values from the enum SortFlag.
*/
	setSorting(sort:SortFlag):SortFlag {
	
	}
	/**
 * @description Return Value:
*/
	sorting() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/distantlight_dz}*/
class DzDistantLight extends DzLight {
	/**
 * @description TODO: Add description.
*/
	
static Point;
	/**
 * @description TODO: Add description.
*/
	
static Rectangle;
	/**
 * @description TODO: Add description.
*/
	
static Disc;
	/**
 * @description TODO: Add description.
*/
	
static Sphere;
	/**
 * @description TODO: Add description.
*/
	
static Cylinder;
	/**
 * @description Default Constructor. Creates a new distant light.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseColor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockarea_dz}*/
class DzDockArea extends QWidget {
	/**
 * @description Parameter(s):
*/
	static getColumn(which:Number):DzDockAreaColumn {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockareacolumn_dz}*/
class DzDockAreaColumn extends QWidget {
	/**
 * @description Return Value:
*/
	static depth() {
	
	}

}
/**
 * @classdesc This class provides access to a custom bar in the interface that can be docked with a DzToolBar. This class is not intended to be constructed directly, rather it serves as a base class for other custom dockable bars. 


See Also:


 DzPaneMgr.findDockBar(), DzPaneMgr.findDockBarByName() and DzPaneMgr.getDockBar()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockbar_dz}*/
class DzDockBar {
	/**
 * @description The dock area at the top of a DzActivityLayout.
*/
	
static ToolBarTop;
	/**
 * @description The dock area at the bottom of a DzActivityLayout.
*/
	
static ToolBarBottom;
	/**
 * @description The dock area on the left side of a DzActivityLayout.
*/
	
static ToolBarLeft;
	/**
 * @description The dock area on the right side of a DzActivityLayout.
*/
	
static ToolBarRight;
	/**
 * @description No dock area. The bar cannot be docked.
*/
	
static NoToolBarArea;
	/**
 * @description Docks the bar in the specified area on the DzActivityLayout, and shows the bar if it is hidden.
*/
	static dock(area:DzDockBar.DockArea, beforeBar:String):DockArea {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockwindow_dz}*/
class DzDockWindow {
	/**
 * @description Re-Docks this window in the last area it was docked in.
*/
	static dock() {
	
	}

}
/**
 * @classdesc Represents an attribute node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domattr_dz}*/
class DzDomAttr extends DzDomNode {
	name:String;
	value:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomElement.setAttribute() or DzDomDocument.createAttribute() to create a new attribute node as a member of an existing element or document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	ownerElement() {
	
	}
	/**
 * @description Return Value:
*/
	specified() {
	
	}

}
/**
 * @classdesc Represents a basic (empty) node.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dombasicnode_dz}*/
class DzDomBasicNode extends DzDomNode {
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a CDATA Section node in a DOM document. CDATA Sections can contain special characters that would otherwise be interpreted as part of the markup language. This provides a way for embedding text that contains special characters without the need for escaping all those characters.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcdatasection_dz}*/
class DzDomCDATASection extends DzDomText {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createCDATASection() to create a new CDATA node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a character data node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcharacterdata_dz}*/
class DzDomCharacterData extends DzDomNode {
	data:String;
	length:Number;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createText() or DzDomDocument.createCDATASection() to create a new character data node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Appends arg to the end of the current text for this node.
*/
	appendData(arg:String):String {
	
	}
	/**
 * @description Removes count characters from this node's data beginning at offset.
*/
	deleteData(offset:Number, count:Number):Number {
	
	}
	/**
 * @description Inserts arg into the current text for this node at position offset.
*/
	insertData(offset:Number, arg:String):Number {
	
	}
	/**
 * @description Replaces count characters in this node's data beginning at offset with the string arg
*/
	replaceData(offset:Number, count:Number, arg:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	substringData(offset:Number, count:Number):String {
	
	}

}
/**
 * @classdesc Represents a comment node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcomment_dz}*/
class DzDomComment extends DzDomCharacterData {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createComment() to create a new comment node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a DOM document. This is typically the only DOM node that you will construct directly, all other nodes should be created as a member of a document by calling one of the following functions:  * createElement( String tagName )


 createDocumentFragment()

 createTextNode( String value )

 createComment( String value )

 createCDATASection( String value )

 createProcessingInstruction( String target, String data )

 createAttribute( String name )

 createEntityReference( String name )

 createElementNS( String nsURI, String qName )

 createAttributeNS( String nsURI, String qName )
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocument_dz}*/
class DzDomDocument extends DzDomNode {
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	createAttribute(name:String):DzDomNode {
	
	}

}
/**
 * @classdesc Represents a document fragment node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumentfragment_dz}*/
class DzDomDocumentFragment extends DzDomNode {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createDocumentFragment() to create a new fragment as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a document type node in a DOM document. You usually will not construct these, but will get them from an existing document by calling DzDomDocument.doctype().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumenttype_dz}*/
class DzDomDocumentType extends DzDomNode {
	internalSubset:String;
	name:String;
	publicId:String;
	systemId:String;
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an element node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domelement_dz}*/
class DzDomElement extends DzDomNode {
	tagName:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createElement() to create a new element node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	attribute(name:String):String {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentity_dz}*/
class DzDomEntity extends DzDomNode {
	notationName:String;
	publicId:String;
	systemId:String;
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentityreference_dz}*/
class DzDomEntityReference extends DzDomNode {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createEntityReference() to create a new entity reference node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is an abstract base class that provides general functionality for DAZ Script DOM components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnode_dz}*/
class DzDomNode extends QObject {
	/**
 * @description A DOM Element.  See Also: DzDomElement
*/
	
static ElementNode;
	/**
 * @description A DOM Attribute.  See Also: DzDomAttr
*/
	
static AttributeNode;
	/**
 * @description Plain Text in the DOM.  See Also: DzDomText
*/
	
static TextNode;
	/**
 * @description Character DATA node in the DOM.  See Also: DzDomCDATASection
*/
	
static CDATASectionNode;
	/**
 * @description A Reference to a DOM Entity.  See Also: DzDomEntityReference
*/
	
static EntityReferenceNode;
	/**
 * @description A DOM Entity.  See Also: DzDomEntity
*/
	
static EntityNode;
	/**
 * @description A DOM Processing Instruction.  See Also: DzDomProcessingInstruction
*/
	
static ProcessingInstructionNode;
	/**
 * @description A DOM Comment.  See Also: DzDomComment
*/
	
static CommentNode;
	/**
 * @description A DOM Document.  See Also: DzDomDocument
*/
	
static DocumentNode;
	/**
 * @description A DOM Document Type.  See Also: DzDomDocumentType
*/
	
static DocumentTypeNode;
	/**
 * @description A DOM Document Fragment.  See Also: DzDomDocumentFragment
*/
	
static DocumentFragmentNode;
	/**
 * @description A DOM Notation.  See Also: DzDomNotation
*/
	
static NotationNode;
	/**
 * @description A basic node.  See Also: DzDomBasicNode
*/
	
static BaseNode;
	/**
 * @description A Character Data node.  See Also: DzDomCharacterData
*/
	
static CharacterDataNode;
	/**
 * @description Appends child to the end of this node's child list.
*/
	static appendChild(child:DzDomNode):void {
	
	}
	/**
 * @description Converts the node into an invalid (Null) node. Its type and contents are cleared.
*/
	static clear() {
	
	}
	/**
 * @description Return Value:
*/
	static cloneNode(deep:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static firstChild() {
	
	}
	/**
 * @description Return Value:
*/
	static hasAttributes() {
	
	}
	/**
 * @description Return Value:
*/
	static hasChildNodes() {
	
	}
	/**
 * @description Inserts newChild into this node's child list following refChild.
*/
	static insertAfter(newChild:DzDomNode, refChild:DzDomNode):void {
	
	}
	/**
 * @description Inserts newChild into this node's child list in front of refChild.
*/
	static insertBefore(newChild:DzDomNode, refChild:DzDomNode):void {
	
	}
	/**
 * @description Return Value:
*/
	static isAttr() {
	
	}
	/**
 * @description Return Value:
*/
	static isCDATASection() {
	
	}
	/**
 * @description Return Value:
*/
	static isCharacterData() {
	
	}
	/**
 * @description Return Value:
*/
	static isComment() {
	
	}
	/**
 * @description Return Value:
*/
	static isDocument() {
	
	}
	/**
 * @description Return Value:
*/
	static isDocumentFragment() {
	
	}
	/**
 * @description Return Value:
*/
	static isDocumentType() {
	
	}
	/**
 * @description Return Value:
*/
	static isElement() {
	
	}
	/**
 * @description Return Value:
*/
	static isEntity() {
	
	}
	/**
 * @description Return Value:
*/
	static isEntityReference() {
	
	}
	/**
 * @description Return Value:
*/
	static isNotation() {
	
	}
	/**
 * @description Return Value:
*/
	static isNull() {
	
	}
	/**
 * @description Return Value:
*/
	static isProcessingInstruction() {
	
	}
	/**
 * @description Return Value:
*/
	static isSupported(feature:String, version:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isText() {
	
	}
	/**
 * @description Return Value:
*/
	static lastChild() {
	
	}
	/**
 * @description Return Value:
*/
	static namedItem(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	static nextSibling() {
	
	}
	/**
 * @description Converts all the node's children into standard form (e.g. adjacent text nodes will be merged )
*/
	static normalize() {
	
	}
	/**
 * @description Return Value:
*/
	static ownerDocument() {
	
	}
	/**
 * @description Return Value:
*/
	static parentNode() {
	
	}
	/**
 * @description Return Value:
*/
	static previousSibling() {
	
	}
	/**
 * @description Removes oldChild from this node's child list.
*/
	static removeChild(oldChild:DzDomNode):void {
	
	}
	/**
 * @description Inserts newChild into this node's child list in place of refChild.
*/
	static replaceChild(newChild:DzDomNode, oldChild:DzDomNode):void {
	
	}

}
/**
 * @classdesc Represents a notation node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnotation_dz}*/
class DzDomNotation extends DzDomNode {
	publicId:String;
	systemId:String;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domprocessinginstruction_dz}*/
class DzDomProcessingInstruction extends DzDomNode {
	data:String;
	target:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createProcessingInstruction() to create a new processing instruction node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a text node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domtext_dz}*/
class DzDomText extends DzDomCharacterData {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createText() to create a new text node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Splits the text node into two text nodes with offset characters in the first node.
*/
	splitText(offset:Number):DzDomNode {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/drawstyle_dz}*/
class DzDrawStyle extends DzBase {
	/**
 * @description Draws unlit wire-frame bounding boxes
*/
	
static WireBox;
	/**
 * @description Draws smooth-shaded bounding boxes
*/
	
static SolidBox;
	/**
 * @description Draws unlit wire-frames
*/
	
static Wireframe;
	/**
 * @description Draws lit wire-frames
*/
	
static LitWireframe;
	/**
 * @description Draws unlit wire-frames, front geometry facing only
*/
	
static HiddenLine;
	/**
 * @description Draws lit smooth shaded objects with wireframes imposed
*/
	
static WireShaded;
	/**
 * @description Draws lit smooth shaded objects
*/
	
static SmoothShaded;
	/**
 * @description Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed
*/
	
static WireTextured;
	/**
 * @description Draws lit smooth shaded objects with any texture/transparency maps applied
*/
	
static Textured;
	/**
 * @description Draws lit smooth shaded objects with a GLSL shader applied
*/
	
static GLSLShader;
	/**
 * @description Draws unlit smooth shaded objects
*/
	
static Unshaded;
	/**
 * @description Special mode for using OpenGL to determine a selected object when the user clicks in the view
*/
	
static Picking;
	/**
 * @description Return Value:
*/
	static drawCues() {
	
	}
	/**
 * @description If the current shade style is not using lighting, this method will set the shade style to the nearest match that uses single-pass drawing and lighting.
*/
	static forceUseLighting() {
	
	}
	/**
 * @description Return Value:
*/
	static pass() {
	
	}
	/**
 * @description Return Value:
*/
	static selectionMapsEnabled() {
	
	}
	/**
 * @description Return Value:
*/
	static shader() {
	
	}
	/**
 * @description Return Value:
*/
	static shadeStyle() {
	
	}

}
/**
 * @classdesc A Dynamic Divider takes two DzWidget objects and places a divider bar between them. It handles resize events, as well as toggling of the divider bar if toggling is enabled.


For complex arrangements you can nest instances of this class by specifying them as one of the widgets via setFirstWidget( DzWidget ) or setSecondWidget( DzWidget )
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dynamicdividerwgt_dz}*/
class DzDynamicDividerWgt extends DzWidget {
	/**
 * @description Use the thick divider bar.
*/
	
static BSFull;
	/**
 * @description Use the medium sized divider bar.
*/
	
static BSSemi;
	/**
 * @description Use the thin divider bar.
*/
	
static BSThin;
	/**
 * @description Represents a horizontal divider bar (widgets are top and bottom).
*/
	
static DOHorizontal;
	/**
 * @description Represents a vertical divider bar (widgets are left and right).
*/
	
static DOVertical;
	/**
 * @description Stretch the left (or top) widget when resizing.
*/
	
static RTStretchFirst;
	/**
 * @description Stretch the right (or bottom) widget when resizing.
*/
	
static RTStretchSecond;
	/**
 * @description Stretch both widgets equally when resizing.
*/
	
static RTStretchBoth;
	/**
 * @description References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
*/
	
static WTLeftOrTop;
	/**
 * @description References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
*/
	
static WTRightOrBottom;
	/**
 * @description References both widgets of the divider bar.
*/
	
static WTBoth;
	/**
 * @description References neither widget of the divider bar.
*/
	
static WTNone;
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @constructor
*/
	constructor(parent:DzWidget, firstChild:DzWidget, secondChild:DzWidget) {
	
	}
	/**
 * @description Moves the divider distance pixels from the current location. If the new location will cause the divider to be displayed in an invalid location (based on minimum size requirements of the widgets), it will be moved and displayed as close as possible to the desired location.
*/
	moveDivider(distance:Number):Number {
	
	}
	/**
 * @description Sets the divider bar to be used for this object
*/
	setDividerBar(orientation:DividerOrientation, barStyle:BarStyle):DividerOrientation {
	
	}
	/**
 * @description Sets the left (or top) widget, depending on the orientation.
*/
	setFirstWidget(first:DzWidget):DzWidget {
	
	}
	/**
 * @description Sets the preferred extent (width or height depending on orientation) for the specified widget. If this extent cannot be used (usually due to minimum size constraints) then the divider will be positioned as close as possible to the preferred extent.
*/
	setPreferredWidgetExtent(widget:WidgetType, extent:Number):WidgetType {
	
	}
	/**
 * @description Sets the right (or bottom) widget, depending on the orientation.
*/
	setSecondWidget(second:DzWidget):DzWidget {
	
	}
	/**
 * @description Toggles the widget to the specified minimized state, if needed.
*/
	setToggleState(minimized:Boolean):Boolean {
	
	}
	/**
 * @description Swaps the left (or top) and right (or bottom) widget.
*/
	swapFirstAndSecondWidgets() {
	
	}
	/**
 * @description Toggles the widget in the direction specified by toggleDirection. If toggling is disabled, this method has no effect. If either the first or second widget is undefined, this method will also have no effect.
*/
	toggleWidget() {
	
	}

}
/**
 * @classdesc Represents an edge between two vertices.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/edge_dz}*/
class DzEdge extends Object {
	cageOffsetA:Number;
	facetA:Number;
	facetB:Number;
	index:Number;
	offsetA:Number;
	offsetB:Number;
	vertIdx1:Number;
	vertIdx2:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(vertex1:Number, vertex2:Number) {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(edge:DzEdge) {
	
	}
	/**
 * @description Return Value:
*/
	isOpenEdge() {
	
	}

}
/**
 * @classdesc Classes derived from DzElement may have any number of properties (objects derived from DzProperty). Those properties may be added and removed at runtime and may be specified as animatable or not. There are several types of properties that have been supplied with the Studio SDK. Property names must be unique within an element. A variety of methods are provided to allow easy traversal and/or searching of the properties list for an object.


Methods are provided to clear animation data on all properties of an object either over a range or over all time.


DzElement takes ownership of all properties added via addProperty(). Subclasses should not attempt to delete properties that have been added to the element.


DzElement also handles saving and loading of all properties. When DzElement loads a property from a file, it will delete any existing property of the same name and replace it with the new property read in - subclasses are responsible for updating any local references to properties whenever a file is loaded. The easiest and most reliable way to do this is for the subclass to write out and read back in any local pointers it maintains to properties. Another approach would be for the subclass to reimplement the postLoadFile() function and update its references by calling findProperty() to lookup the properties by name.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/element_dz}*/
class DzElement extends DzBase {
	static elementID:Number;
	/**
 * @description Hang a new custom data item off of this element. Data items will be deleted when this element is deleted, so ownership of the data item is transferred to the element after this call. Do not attempt to delete the data item yourself unless you call removeDataItem() first.
*/
	static addDataItem(item:DzElementData):DzError {
	
	}

}
/**
 * @classdesc See Also:


 DzElement.addDataItem()

 DzElement.removeDataItem()

 DzElement.deleteDataItem()

 DzElement.getNumDataItems()

 DzElement.getDataItem()

 DzElement.getDataItemList()

 DzElement.isDataItemNameUnique() 

 DzElement.getUniqueDataItemName()

 DzElement.findDataItem()

 DzElement.moveDataItemToIndex()

 DzElement.findDataItemIndex()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementdata_dz}*/
class DzElementData extends DzCustomData {
	/**
 * @description Parameter(s):
*/
	static duplicate(owner:DzElement):DzElement {
	
	}

}
/**
 * @classdesc If the file to post-load is a script:


A global transient variable named DataItem, which refers to the DzElementPostLoadFileData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.


A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)


Attention:


 The differences between this implementation and DzSimpleElementScriptData are that this implementation can reference the file path of a file that is not a script and it does not have an associated DzSettings that can be used to configure said script.



If the file to post-load is not a script, the path is stored but the file is not loaded.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementpostloadfiledata_dz}*/
class DzElementPostLoadFileData extends DzElementData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=true:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getPostLoadFilePath() {
	
	}

}
/**
 * @classdesc This class provides an animatable enumerated property that is stored and can be accessed as an integer property. It maintains a list of strings that correspond to the integer value of the property.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumproperty_dz}*/
class DzEnumProperty extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a string to the available choices for this property. Duplicates are not allowed.
*/
	addItem(item:String, index:Number):Number {
	
	}

}
/**
 * @classdesc A DzEnumSlider provides a control that allows a user to adjust a bounded, enumerated, integer value. The slider is clamped by default, and automatically sets its min and max range according to the number of string values it contains.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumslider_dz}*/
class DzEnumSlider extends DzWidget {
	count:Number;
	text:String;
	value:Number;
	/**
 * @description Creates a new enumerated slider widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds a string to the list of items, and adjusts the maximum value for the slider.
*/
	addItem(label:String):Number {
	
	}
	/**
 * @description Clears the list of string values for this slider.
*/
	clear() {
	
	}
	/**
 * @description Return Value:
*/
	getItem(which:Number):String {
	
	}
	/**
 * @description Moves the item at index which to idx.
*/
	moveItem(which:Number, idx:Number):Number {
	
	}
	/**
 * @description Removes the item at which from the list.
*/
	removeItem(which:Number):Number {
	
	}
	/**
 * @description Renames the item at index which.
*/
	renameItem(which:Number, label:String):Number {
	
	}

}
/**
 * @classdesc This utility class implements the logic of 'baking' (unlinking) the current state of a controller property on a node to the numeric properties it controls, such that the controlled properties remain at the respective values they were at in that moment of time. The DzERCLink between the 'baked' properties and the controller is removed.


The controller property (the DzNumericProperty that does the controlling) must be set before calling doBake(); see setControllerProperty().


See Also:


 Sample: ERC Bake



Attention:


 This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.



Since:


 4.9.3.101
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercbake_dz}*/
class DzERCBake extends QObject {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Performs the ERC bake based on the current settings.
*/
	doBake() {
	
	}

}
/**
 * @classdesc This utility class implements the logic of 'freezing' (linking) the current state of numeric properties on a node (or multiple nodes) to a controller property, such that adjusting the controller property adjusts the linked properties in kind. The DzERCLink between the 'frozen' properties and the controller are created such that when the controller is set to the value it is at when the 'freeze' operation is performed, the 'frozen' properties will be at the respective values they were at in that moment of time.


The controller node (the DzNode that the controlling property is located on) and the controller property (the DzNumericProperty that ultimately does the controlling) must be set before calling doFreeze(); see setControllerNode() and setControllerProperty().


An additional property can be set and used to attentuate the effect of the controller property on the 'frozen' properties, or have its value attenuated as the controller property is applied, depending on the AttenuateMode set.


The addPropertiesToFreeze() method is used to inspect the current state of the numeric properties on a a given node that are not currently set to their respective raw values and add them to the list of those properties to be linked to the controller property. This list of properties can be inspected and/or modified using the getPropertiesToFreeze() and setPropertiesToFreeze() methods.


See Also:


 Sample: ERC Freeze



Attention:


 This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.



Since:


 4.9.3.95
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercfreeze_dz}*/
class DzERCFreeze extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static SubComponents;
	/**
 * @description TODO: Add description.
*/
	
static Controller;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds all numeric properties on node whose values differ from their raw values to the list of properties to 'freeze' (link) to the controller property.
*/
	addPropertiesToFreeze(node:DzNode):Boolean {
	
	}

}
/**
 * @classdesc This numeric controller implements an algorithm that is based on the value of another property. There are six formulas which correspond to the ERCType of the object - the default ERCType is ERCDeltaAdd. The formulas are:


 ERCDeltaAdd: f(v) = v + (c * m) + a

 ERCDivideInto: f(v) = (c / v) + a

 ERCDivideBy: f(v) = (v / c) + a

 ERCMultiply: f(v) = (c * v) + a

 ERCSubtract: f(v) = v - c + a

 ERCAdd: f(v) = v + c + a

 ERCKeyed: f(v) = v + P©



Where:


 v is the current (keyed) value of the property with the link

 c is the current (final) value of the property that the link is driven by

 m is an optional scalar multiplier

 a is an optional offset (additive) value.



As an example of ERC in action, lets say that there are 3 properties A, B, and C. B is linked to A with a 'ERCDeltaAdd' DzERCLink with a multiplier of 1.0 and an additive value of 0.0. C is linked to B with a 'ERCDeltaAdd' DzERCLink with a multiplier of 2.0 and an additive value of 1.0. So, if the keyed value of A is 10.0, B is 0.0, and C is 0.0, the final values of the properties would be calculated as:


A = 10.0 B = 0.0 + (10.0 * 1.0) + 0.0 = 10.0 C = 0.0 + (10.0 * 2.0) + 1.0 = 21.0


If B and C have keyed values - for example B is 5.0 and C is 2.0 - the final property values would be calculated as:


A = 10.0 B = 5.0 + (10.0 * 1.0) + 0.0 = 15.0 C = 2.0 + (15.0 * 2.0) + 1.0 = 33.0
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/erclink_dz}*/
class DzERCLink extends DzNumericController {
	/**
 * @description Linear interpolation between key values.
*/
	
static LINEAR_INTERP;
	/**
 * @description Constant interpolation between key values.
*/
	
static CONSTANT_INTERP;
	/**
 * @description TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
static TCB_INTERP;
	/**
 * @description This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
*/
	
static ERCDeltaAdd;
	/**
 * @description This type of ERC implements the formula f(v) = (c / v) + a where:
*/
	
static ERCDivideInto;
	/**
 * @description This type of ERC implements the formula f(v) = (v / c) + a where:
*/
	
static ERCDivideBy;
	/**
 * @description This type of implements the formula f(v) = (c * v) + a where:
*/
	
static ERCMultiply;
	/**
 * @description This type of ERC implements the formula f(v) = v - c + a where:
*/
	
static ERCSubtract;
	/**
 * @description This type of ERC implements the formula f(v) = v + c + a where:
*/
	
static ERCAdd;
	/**
 * @description This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
*/
	
static ERCKeyed;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(copyFrom:DzERCLink, property=undefined:DzNumericProperty) {
	
	}
	/**
 * @description Creates a controller that is driven by property.
 * @constructor
*/
	constructor(type:ERCType, property:DzNumericProperty, scalar=1.0:Number, addend=0.0:Number) {
	
	}
	/**
 * @description Creates a controller that is driven by property.
 * @constructor
*/
	constructor(property:DzNumericProperty, scalar=1.0:Number, addend=0.0:Number) {
	
	}
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is LINEAR_INTERP or CONSTANT_INTERP.
*/
	addKeyValue(key:Number, value:Number):Number {
	
	}
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is TCB_INTERP.
*/
	addKeyValue(key:Number, value:Number, t:Number, c:Number, b:Number):Number {
	
	}
	/**
 * @description Clears all keyed values for links of the ERCKeyed type.
*/
	clearKeys() {
	
	}
	/**
 * @description Makes a deep copy of this link.
*/
	duplicate(newProperty:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * @description Parameter(s):
*/
	findKeyIndex(key:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getCurrentProperty() {
	
	}
	/**
 * @description Parameter(s):
*/
	getKey(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyOpValue(val:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamB(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamC(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamT(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyValue(which:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumKeyValues() {
	
	}
	/**
 * @description Return Value:
*/
	getProperty() {
	
	}
	/**
 * @description Presizes the array of keyed values in order to improve the performance of adding keyed values.
*/
	presizeKeys(count:Number):Number {
	
	}
	/**
 * @description Removes a keyed value from the link if the link type is ERCKeyed.
*/
	removeKeyValue(which:Number):Boolean {
	
	}
	/**
 * @description Sets the property that drives this link.
*/
	setProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getExportMgr().


See Also:


 Exporter Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exportmgr_dz}*/
class DzExportMgr extends QObject {
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
*/
	static canExport(filename:String):Boolean {
	
	}

}
/**
 * @classdesc A 3 or 4 sided polygonal face within a polygon mesh. 


See Also:


 facetmesh_dz
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/facet_dz}*/
class DzFacet extends Object {
	cageIndex:Number;
	edgeIdx1:Number;
	edgeIdx2:Number;
	edgeIdx3:Number;
	edgeIdx4:Number;
	faceGroupIndex:Number;
	materialIndex:Number;
	normIdx1:Number;
	normIdx2:Number;
	normIdx3:Number;
	normIdx4:Number;
	uvwIdx1:Number;
	uvwIdx2:Number;
	uvwIdx3:Number;
	uvwIdx4:Number;
	vertIdx1:Number;
	vertIdx2:Number;
	vertIdx3:Number;
	vertIdx4:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(facet:DzFacet) {
	
	}
	/**
 * @description Set the facet to a default state.
*/
	clear() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clearTriFanCount() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clearTriFanRoot() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanCount() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanEdgeCount() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanMaxEdgeIdx() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanOffset() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanRoot() {
	
	}
	/**
 * @description return true if this is a 4 sided polygon, otherwise false
*/
	isQuad() {
	
	}
	/**
 * @description return true if this is a 3 sided polygon, otherwise false
*/
	isTri() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFan() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFanChild() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFanRoot() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setTriFanCount(count:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setTriFanRoot(rootIdx:Number):Number {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()

 Silent FBX Export
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbxexporter_dz}*/
class DzFbxExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzImportMgr.findImporterByClassName()

 DzImportMgr.findImporter()

 Silent FBX Import
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbximporter_dz}*/
class DzFbxImporter extends DzImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Provides access for reading and writing files.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/file_dz}*/
class DzFile extends DzFileInfo {
	/**
 * @description No error occurred.
*/
	
static NoError;
	/**
 * @description An error occurred when reading from the file.
*/
	
static ReadError;
	/**
 * @description An error occurred when writing to the file.
*/
	
static WriteError;
	/**
 * @description A fatal error occurred.
*/
	
static FatalError;
	/**
 * @description TODO: Add description.
*/
	
static ResourceError;
	/**
 * @description The file could not be opened.
*/
	
static OpenError;
	/**
 * @description The operation was aborted.
*/
	
static AbortError;
	/**
 * @description A timeout occurred.
*/
	
static TimeOutError;
	/**
 * @description An unspecified error occurred.
*/
	
static UnspecifiedError;
	/**
 * @description The file could not be removed.
*/
	
static RemoveError;
	/**
 * @description The file could not be renamed.
*/
	
static RenameError;
	/**
 * @description The position in the file could not be changed.
*/
	
static PositionError;
	/**
 * @description The file could not be resized.
*/
	
static ResizeError;
	/**
 * @description The file could not be accessed.
*/
	
static PermissionsError;
	/**
 * @description The file could not be copied.
*/
	
static CopyError;
	/**
 * @description The file is not open.
*/
	
static NotOpen;
	/**
 * @description The file is open the for reading.
*/
	
static ReadOnly;
	/**
 * @description The file is open the for writing.
*/
	
static WriteOnly;
	/**
 * @description The file is open the for reading and writing.
*/
	
static ReadWrite;
	/**
 * @description The file is opened in append mode, so that all data is written to the end of the file.
*/
	
static Append;
	/**
 * @description If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
static Truncate;
	/**
 * @description When reading, the end-of-line terminators are translated to '
*/
	
static Text;
	/**
 * @description Alias for Text.
*/
	
static Translate;
	/**
 * @description Creates a file object with the given file name.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Closes the file, sets its openMode() to NotOpen, and resets the error string.
*/
	close() {
	
	}

}
/**
 * @classdesc The DzFileDialog class is available in DAZScript via Global.FileDialog.


It provides functions that display OS native file dialogs to the user.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filedialog_dz}*/
class DzFileDialog extends QObject {
	/**
 * @description A convenience file dialog that automatically creates a filter list for all audio formats the application can import and displays a file open dialog.
*/
	static doAudioClipOpenDialog(startWith:String, parent:DzWidget):String {
	
	}

}
/**
 * @classdesc For each group of files that you want to make available to the user, create a new filter with the newFilter() call, then add one or more file extensions to be accepted by the filter.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filefilter_dz}*/
class DzFileFilter extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a file extension to the current filter.
*/
	addExtension(extension:String):String {
	
	}
	/**
 * @description Adds file extensions to the current filter.
*/
	addExtensions(extensions:Array):Array {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFilter() {
	
	}
	/**
 * @description Parameter(s):
*/
	getExtension(filterIdx:Number, extensionIdx:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilterDescription(filterIdx:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getNumExtensions(filterIdx:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumFilters() {
	
	}
	/**
 * @description Starts a new filter with the given description.
*/
	newFilter(description:String):String {
	
	}
	/**
 * @description Sets the default filter index - by default this is 0.
*/
	setDefaultFilter(filterIdx:Number):Number {
	
	}

}
/**
 * @classdesc Provides access to getting information about files. It also serves as the base class for the other DAZ Script File I/O types.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileinfo_dz}*/
class DzFileInfo extends QObject {
	/**
 * @description The file is readable by the owner of the file.
*/
	
static ReadOwner;
	/**
 * @description The file is writable by the owner of the file.
*/
	
static WriteOwner;
	/**
 * @description The file is executable by the owner of the file.
*/
	
static ExeOwner;
	/**
 * @description The file is readable by the user.
*/
	
static ReadUser;
	/**
 * @description The file is writable by the user.
*/
	
static WriteUser;
	/**
 * @description The file is executable by the user.
*/
	
static ExeUser;
	/**
 * @description The file is readable by the group.
*/
	
static ReadGroup;
	/**
 * @description The file is writable by the group.
*/
	
static WriteGroup;
	/**
 * @description The file is executable by the group.
*/
	
static ExeGroup;
	/**
 * @description The file is readable by anyone.
*/
	
static ReadOther;
	/**
 * @description The file is writable by anyone.
*/
	
static WriteOther;
	/**
 * @description The file is executable by anyone.
*/
	
static ExeOther;
	/**
 * @description Creates a file info object to retrieve information about the given file.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Deprecated
*/
	absFileName() {
	
	}

}
/**
 * @classdesc This class provides functionality common to all file importers and exporters such as the ability to edit options before file import/export. Also, this class provides functions for importers/exporters to report errors to the user/log file, and provides static convenience functions for dissecting file paths into their parts.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileio_dz}*/
class DzFileIO extends DzBase {
	static optionsShown:Boolean;
	/**
 * @description TODO:
Add description.
*/
	static getDefaultOptions(options:DzFileIOSettings):DzFileIOSettings {
	
	}

}
/**
 * @classdesc This class manages presets in the form of DzFileIOSettings objects for various importers, exporters, and other forms of File I/O.


There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request it from DzApp via DzApp.getFileIOPresetMgr().


File I/O presets are defined by a unique name. They have two types of settings: Specific Settings and Common Settings.


Specific Settings

 Specific settings are tied to a class name. This class name is typically, but not always, the name of an importer or exporter, such as "DzObjImporter" or "DzObjExporter." The key values for specific settings will vary based on the class.


Common Settings

 Common settings for a preset are common to all class names. These include settings that define scale values and axis settings. Common keys can be accessed via the following methods:  * getLateralAxisKey()


 getVerticalAxisKey()

 getDepthAxisKey()

 getInvertLateralAxisKey()

 getInvertVerticalAxisKey()

 getInvertDepthAxisKey()

 getScaleKey()



The scale value used by the presets is for importers. If you are working with an exporter then the scale value needs to be converted to 1/scale. As an example, if the scale value for a preset is 2.54 then the scale value for an exporter would be 1/2.54 = 0.3937
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiopresetmgr_dz}*/
class DzFileIOPresetMgr extends QObject {
	/**
 * @description TODO:
Add description.
*/
	static getAllCurrentSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiosettings_dz}*/
class DzFileIOSettings extends DzSettings {
	/**
 * @description Default Constructor - creates an empty set of options
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileproperty_dz}*/
class DzFileProperty extends DzStringProperty {
	/**
 * @description The user will be prompted with a 'Save As' type dialog when browsing for a file.
*/
	
static FileSave;
	/**
 * @description The user will be prompted with an 'Open' type dialog when browsing for a file.
*/
	
static FileOpen;
	/**
 * @description The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
*/
	
static Dir;
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	getAbsolutePath(path:String):String {
	
	}
	/**
 * @description Gets the filter value.
*/
	getFilter() {
	
	}
	/**
 * @description Gets the file type.
*/
	getType() {
	
	}
	/**
 * @description Sets the value to use as a file extension filter.
*/
	setFilter(filter:String):String {
	
	}
	/**
 * @description Sets the file type for the property.
*/
	setType(type:FileType):FileType {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/flipmanip_dz}*/
class DzFlipManip extends DzImageManip {
	/**
 * @description Return Value:
*/
	static flipHorizontal() {
	
	}

}
/**
 * @classdesc This class provides an animatable floating-point property with 2 values that is stored and can be accessed as a DzVec2.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float2property_dz}*/
class DzFloat2Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustFloat2Value(tm:DzTime, val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFloat2Value() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat2FollowValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat2FollowValue(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description Return Value:
*/
	getFloat2Value() {
	
	}
	/**
 * @description Parameter(s):
*/
	getFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyFloat2Value(i:Number):DzVec2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat2Value() {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat2Value() {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyFloat2Value(i:Number, val:DzVec2):Number {
	
	}

}
/**
 * @classdesc This class provides an animatable floating-point property with 3 values that is stored and can be accessed as a DzVec3.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float3property_dz}*/
class DzFloat3Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustFloat3Value(tm:DzTime, val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFloat3Value() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat3FollowValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat3FollowValue(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getFloat3Value() {
	
	}
	/**
 * @description Parameter(s):
*/
	getFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyFloat3Value(i:Number):DzVec3 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat3Value() {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat3Value() {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyFloat3Value(i:Number, val:DzVec3):Number {
	
	}

}
/**
 * @classdesc This class manages 4-component colors (colors that can include an alpha value).
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolor_dz}*/
class DzFloatColor extends Object {
	blue:String;
	green:String;
	red:String;
	/**
 * @description Default constructor. Initializes a new color to opaque black.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Constructor that takes individual floating-point RGBA components. Initializes the color to the given values. Values should be in the [0,1] range.
 * @constructor
*/
	constructor(r:Number, g:Number, b:Number, a=1.0:Number) {
	
	}
	/**
 * @description Constructor that creates an achromatic color.
 * @constructor
*/
	constructor(val:Number, alpha=1.0:Number) {
	
	}
	/**
 * @description Constructor that takes a floating-point array to define RGBA colors. Initializes the color to the given values.
 * @constructor
*/
	constructor(color:Array) {
	
	}
	/**
 * @description Constructor that takes a QColor. Initializes the color to the given color. The color is assumed to be completely opaque.
 * @constructor
*/
	constructor(color:Color) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(color:DzFloatColor) {
	
	}
	/**
 * @description Modifies the color such that the value of no component is less than min and no more than max.
*/
	clamp(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of no component is more than max.
*/
	clampMax(max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of no component is less than min.
*/
	clampMin(min:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	equals(color:DzFloatColor, tolerance:Number):Boolean {
	
	}
	/**
 * @description Applies a gamma value to the color.
*/
	gammaColor(gamma:Number, doAlpha:Boolean):Number {
	
	}
	/**
 * @description Holds the alpha value for the color. Should be in the [0,1] range.
*/
	getColor() {
	
	}
	/**
 * @description Return Value:
*/
	getGrayscale() {
	
	}
	/**
 * @description Return Value:
*/
	getHsl() {
	
	}
	/**
 * @description Return Value:
*/
	getHsv() {
	
	}
	/**
 * @description Return Value:
*/
	getMaxRGBValue() {
	
	}
	/**
 * @description Return Value:
*/
	getRelativeLuminance() {
	
	}
	/**
 * @description Return Value:
*/
	getRgba() {
	
	}
	/**
 * @description Linerizes the color based on a gamma value.
*/
	linearizeColor(gamma:Number, doAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of each component is modulated between min and max.
*/
	modulo(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Sets the color according to an array of the hue, saturation, lightness and (optionally) alpha component values.
*/
	setHsl(list:Array):Array {
	
	}
	/**
 * @description Sets a HSL value on the color.
*/
	setHsl(h:Number, s:Number, l:Number, a:Number):Number {
	
	}
	/**
 * @description Sets a HSV value on the color.
*/
	setHsv(h:Number, s:Number, v:Number, a:Number):Number {
	
	}
	/**
 * @description Sets the color according to an array of the hue, saturation, value and alpha component values.
*/
	setHsv(list:Array):Array {
	
	}
	/**
 * @description Sets the color according to an array of the red, green, blue and alpha component values.
*/
	setRgba(list:Array):Array {
	
	}
	/**
 * @description Sets the color values. Values should be in the [0,1] range.
*/
	setValue(r:Number, g:Number, b:Number, a:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setValue(color:Color):Color {
	
	}

}
/**
 * @classdesc This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolorproperty_dz}*/
class DzFloatColorProperty extends DzColorProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	adjustFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	adjustFloatColorValue(tm:DzTime, val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getDefaultFloatColorValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorFollowValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorFollowValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatMax() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatMin() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatSensitivity() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getKeyFloatColorValue(i:Number):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getKeyInterpolationTypeValues(i:Number):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLocalFloatColorValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLocalFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getRawFloatColorValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getRawFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setDefaultFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMax(max:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMin(min:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMinMax(min:Number, max:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatSensitivity(sens:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyFloatColorValue(i:Number, val:DzFloatColor):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setRawFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setRawFloatColorValue(tm:DzTime, val:DzFloatColor):DzTime {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatproperty_dz}*/
class DzFloatProperty extends DzNumericProperty {
	/**
 * @description Linear interpolation between key values.
*/
	
static LINEAR_INTERP;
	/**
 * @description Constant interpolation between key values.
*/
	
static CONSTANT_INTERP;
	/**
 * @description TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
static TCB_INTERP;
	/**
 * @description Hermite Spline interpolation between key values.
*/
	
static HERMITE_INTERP;
	/**
 * @description This property is not a transform property.
*/
	
static NON_TRANSFORM;
	/**
 * @description This property is a scale transform.
*/
	
static SCALE;
	/**
 * @description This property is a translation transform property.
*/
	
static TRANSLATE;
	/**
 * @description This property is a rotation on the first axis of the rotation order.
*/
	
static ROT_FIRST_AXIS;
	/**
 * @description This property is a rotation on the second axis of the rotation order.
*/
	
static ROT_SECOND_AXIS;
	/**
 * @description This property is a rotation on the third axis of the rotation order.
*/
	
static ROT_THIRD_AXIS;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds the given value to all the key values.
*/
	add(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustValue(val:Number):Number {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustValue(tm:DzTime, val:Number):Number {
	
	}
	/**
 * @description Divides all key values by the given amount.
*/
	divide(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultValue() {
	
	}
	/**
 * @description Return Value:
*/
	getDisplayAsPercent() {
	
	}
	/**
 * @description Return Value:
*/
	getDoubleDefaultValue() {
	
	}
	/**
 * @description Parameter(s):
*/
	getDoubleValue(tm:DzTime):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInterpolationType(i:Number):InterpolationType {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInterpolationTypeValues(i:Number):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyValue(i:Number):Number {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue() {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getMax() {
	
	}
	/**
 * @description Return Value:
*/
	getMin() {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue() {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue(tm:DzTime):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getScaledFollowValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getSensitivity() {
	
	}
	/**
 * @description Return Value:
*/
	getTransformType() {
	
	}
	/**
 * @description Return Value:
*/
	getValue() {
	
	}
	/**
 * @description Parameter(s):
*/
	getValue(tm:DzTime):Number {
	
	}
	/**
 * @description Multiplies all key values by the given amount.
*/
	multiply(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Sets whether this property should have its value displayed as a percentage; the default is false (value is displayed as a decimal).
*/
	setDisplayAsPercent(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDoubleDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setDoubleValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the interpolation method for the i'th key.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType):Number {
	
	}
	/**
 * @description Sets the interpolation method for the i'th key.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):Number {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyValue(i:Number, val:Number):Number {
	
	}
	/**
 * @description Set the maximum allowable value.
*/
	setMax(max:Number):Number {
	
	}
	/**
 * @description Set the mininimum allowable value.
*/
	setMin(min:Number):Number {
	
	}
	/**
 * @description Set the mininimum and maximum allowable values.
*/
	setMinMax(min:Number, max:Number):Number {
	
	}
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
*/
	setSensitivity(sens:Number):Number {
	
	}
	/**
 * @description Sets the transform type for this property.
*/
	setTransformType(type:TransformType):TransformType {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(val:Number):Number {
	
	}
	/**
 * @description Subtracts the given value to all the key values.
*/
	subtract(val:Number, applyToDefault:Boolean):Number {
	
	}

}
/**
 * @classdesc A DzFloatSlider provides a control that allows a user to adjust a bounded floating point value.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatslider_dz}*/
class DzFloatSlider extends DzWidget {
	clamped:Boolean;
	displayAsPercent:Boolean;
	indeterminate:Boolean;
	label:String;
	labelVisible:Boolean;
	max:Number;
	min:Number;
	sensitivity:Number;
	text:String;
	textEditable:Boolean;
	textVisible:Boolean;
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc The "Folder" container type serves to present assets as the files they represent exist in the folder structure on disk.


See Also:


 DzAssetMgr.getContentDirs()

 DzAssetMgr.getPoserDirs()

 DzAssetMgr.getImportDirs()

 DzAsset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/folderassetcontainer_dz}*/
class DzFolderAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	static excludeFolders:Array;
	static fileFilters:Array;
	static isImport:Boolean;
	static isImportTopLevel:Boolean;
	static isNative:Boolean;
	static isNativeTopLevel:Boolean;
	static isPoser:Boolean;
	static isPoserIntermediate:Boolean;
	static isPoserTopLevel:Boolean;
	static onlyIncludeFolders:Array;
	/**
 * @description Return Value:
*/
	static fileMatchesFilter(shortFileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static getFullPath() {
	
	}
	/**
 * @description Return Value:
*/
	static hasDirectoryChildren() {
	
	}
	/**
 * @description Return Value:
*/
	static insertsAsLink(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Attempts to update the child containers of this container.
*/
	static updateChildren() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QFont type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/font}*/
class Font extends QObject {
	bold:Boolean;
	family:String;
	italic:Boolean;
	pixelSize:Number;
	pointSize:Number;
	strikeout:Boolean;
	underline:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(font:Font) {
	
	}
	/**
 * @description Constructs a new font of the given family.
 * @constructor
*/
	constructor(familyName:String) {
	
	}
	/**
 * @description Parameter(s):
*/
	boundingRect(maxRect:Rect, text:String, flags:Number):Rect {
	
	}
	/**
 * @description Parameter(s):
*/
	elidedText(text:String, mode:DzWidget.TextElideMode, width:Number, flags:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	families() {
	
	}
	/**
 * @description Parameter(s):
*/
	pointSizes(family:String, style:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	size(text:String, flags:Number):Size {
	
	}
	/**
 * @description Parameter(s):
*/
	styles(family:String):Array {
	
	}

}
/**
 * @classdesc A geometry shell is a heavy instance of another scene node. It is a deep copy of the world space geometry with its own unique materials.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryshellnode_dz}*/
class DzGeometryShellNode extends DzNode {
	/**
 * @description Default Constructor. Creates a shell with DzObject, pushmodifier_dz, and DzGeometryShellShape. This is the preferred way to create a shell node.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getShellNodeControl() {
	
	}

}
/**
 * @classdesc 
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryutil_dz}*/
class DzGeometryUtil {
	/**
 * @description Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
*/
	static convertToSubD(node:DzNode, defaultLevel:Number):DzError {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geomsourcefiledata_dz}*/
class DzGeomSourceFileData extends DzSourceFileData {
	groupName:String;
	/**
 * @description Creates a new Geometry Source File Data object that stores the given file path and group name.
 * @constructor
*/
	constructor(filePath="":String, groupName="":String) {
	
	}

}
/**
 * @classdesc A DzGroupBox provides a group box frame, with an optional title and an ability to be checked like a DzCheckBox.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupbox_dz}*/
class DzGroupBox extends DzWidget {
	alignment:DzWidget;
	checkable:Boolean;
	checked:Boolean;
	columns:Number;
	flat:Boolean;
	insideMargin:Number;
	insideSpacing:Number;
	orientation:DzWidget;
	title:String;
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds an empty cell at the next free position. If space is greater than 0, the empty cell uses space as its fixed width (if Orientation is Horizontal) or height (if Orientation is Vertical).
*/
	addSpace(space:Number):Number {
	
	}

}
/**
 * @classdesc This specialized DzNode is intended for grouping multiple nodes in the scene under one parent node. This allows easy transformation, visibility and/or selectability of the whole group.


The bounding box of the group is calculated by getting the world space bounding box of the immediate children of the group node. This allows better use of framing the group to see the whole of the contents of the group.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupnode_dz}*/
class DzGroupNode extends DzNode {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Guide Pages are intended as a dynamic means of providing users with instructions on how to use a portion of the User Interface (UI), and/or provide widgets that simplify the process of getting started where an otherwise non-descript area of the UI would be displayed.


These pages are typically found within a DzPane via instances of filecontenttab_dz or productcontenttab_dz, or within an embedded instance of productassetsview_dz or associatedassetsview_dz.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/guidepage_dz}*/
class DzGuidePage extends QWidget {
	/**
 * @description Return Value:
*/
	static defaultScriptPath() {
	
	}

}
/**
 * @classdesc This class provides DAZ Script functionality for reading and writing *.gz ('gzipped') files. A high-level interface for zipping/unzipping files is provided with the functions zip() and unzip(). Also, a low-level interface is provided, allowing scripts to read and write compressed files directly.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gzfile_dz}*/
class DzGZFile extends DzFileInfo {
	/**
 * @description Open the file for reading only.
*/
	
static ReadOnly;
	/**
 * @description Open the file for writing only.
*/
	
static WriteOnly;
	/**
 * @description Open the file for reading and writing.
*/
	
static ReadWrite;
	/**
 * @description The file is opened in append mode, so that all data is written to the end of the file.
*/
	
static Append;
	/**
 * @description If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
static Truncate;
	/**
 * @description When reading, the end-of-line terminators are translated to '
*/
	
static Text;
	/**
 * @description Alias for Text.
*/
	
static Translate;
	/**
 * @description Creates a gzip file with the given file name.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Closes the file.
*/
	close() {
	
	}

}
/**
 * @classdesc Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.LeftToRight.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hboxlayout_dz}*/
class DzHBoxLayout extends DzBoxLayout {
	/**
 * @description Creates a horizontal box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc DzButtonGroup with a horizontal layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hbuttongroup_dz}*/
class DzHButtonGroup extends DzButtonGroup {
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc See Also:


 DzListView.header()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/header_dz}*/
class DzHeader extends DzWidget {
	static clickEnabled:Boolean;
	static movingEnabled:Boolean;
	static resizeEnabled:Boolean;
	static stretchEnabled:Boolean;
	/**
 * @description Return Value:
*/
	static isClickEnabled(section:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	static isResizeEnabled(section:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	static isStretchEnabled(section:Number):Number {
	
	}
	/**
 * @description Sets whether or not the header for a given section responds to mouse clicks
*/
	static setClickEnabled(enable:Boolean, section:Number):Boolean {
	
	}
	/**
 * @description Sets whether or not resizing for a given section is enabled
*/
	static setResizeEnabled(enable:Boolean, section:Number):Boolean {
	
	}
	/**
 * @description Sets whether or not stretch for a given section is enabled
*/
	static setStretchEnabled(enable:Boolean, section:Number):Boolean {
	
	}

}
/**
 * @classdesc Use DzApp.getHelpMgr() to access.


See daz_studio_help_generator for information on how to populate the Help Manager.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/helpmgr_dz}*/
class DzHelpMgr extends QObject {
	/**
 * @description Opens the help browser at the given identifier.
*/
	static browseToIdentifier(identifier:String):String {
	
	}

}
/**
 * @classdesc A DzHGroupBox provides a DzGroupBox with a horizontal layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hgroupbox_dz}*/
class DzHGroupBox extends DzGroupBox {
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Material(s) Preset in the DSON format.


See Also:


 Sample: Save a Hierarchical Material(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalmaterialassetfilter_dz}*/
class DzHierarchicalMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Pose Preset in the DSON format.


See Also:


 Sample: Save a Hierarchical Pose Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalposeassetfilter_dz}*/
class DzHierarchicalPoseAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QImage type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/image}*/
class Image extends QObject {
	/**
 * @description The image is invalid.
*/
	
static Format_Invalid;
	/**
 * @description The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
*/
	
static Format_Mono;
	/**
 * @description The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
*/
	
static Format_MonoLSB;
	/**
 * @description The image is stored using 8-bit indexes into a colormap.
*/
	
static Format_Indexed8;
	/**
 * @description The image is stored using a 32-bit RGB format (0xffRRGGBB).
*/
	
static Format_RGB32;
	/**
 * @description The image is stored using a 32-bit ARGB format (0xAARRGGBB).
*/
	
static Format_ARGB32;
	/**
 * @description The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
*/
	
static Format_ARGB32_Premultiplied;
	/**
 * @description The image is stored using a 16-bit RGB format (5-6-5).
*/
	
static Format_RGB16;
	/**
 * @description The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
*/
	
static Format_ARGB8565_Premultiplied;
	/**
 * @description The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
*/
	
static Format_RGB666;
	/**
 * @description The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
*/
	
static Format_ARGB6666_Premultiplied;
	/**
 * @description The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
*/
	
static Format_RGB555;
	/**
 * @description The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
*/
	
static Format_ARGB8555_Premultiplied;
	/**
 * @description The image is stored using a 24-bit RGB format (8-8-8).
*/
	
static Format_RGB888;
	/**
 * @description The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
*/
	
static Format_RGB444;
	/**
 * @description The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
*/
	
static Format_ARGB4444_Premultiplied;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(width:Number, height:Number, format:Format) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(image:Image) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(filename:String) {
	
	}
	/**
 * @description Gets a color value from the color table for the image only valid for.
*/
	color(index:Number):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeAtop(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeColorBurn(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeColorDodge(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeDarken(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeDifference(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeExclusion(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeHardLight(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeIn(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeLighten(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeMultiply(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOut(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOver(other:Image, x:Number, y:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOverlay(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositePlus(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeScreen(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeSoftLight(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeXor(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Creates a copy of the image with the given color depth.
*/
	convertDepth(depth:Number):Number {
	
	}
	/**
 * @description Creates a copy of a portion of the image.
*/
	copy(x:Number, y:Number, w:Number, h:Number):Number {
	
	}
	/**
 * @description Creates a copy of the image.
*/
	copy() {
	
	}
	/**
 * @description Creates a copy of a portion of the image.
*/
	copy(rect:Rect):Rect {
	
	}
	/**
 * @description Clears the image data and creates a new image with the given settings.
*/
	create(size:Size, depth:Number, numColors:Number):Size {
	
	}
	/**
 * @description Clears the image data and creates a new image with the given settings.
*/
	create(w:Number, h:Number, depth:Number, numColors:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	drawText(x:Number, y:Number, text:String, font:Font, color:Color, flags:Number):Rect {
	
	}
	/**
 * @description Fills the image with color.
*/
	fill(color:Color):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getColorMask(maskColor:Color, invert:Boolean, tolerance:Number):Color {
	
	}
	/**
 * @description Inverts all pixels in the image.
*/
	invertPixels(invertAlpha:Boolean):Boolean {
	
	}
	/**
 * @description Gets whether or not the image is Null.
*/
	isNull() {
	
	}
	/**
 * @description Loads data for the image from a file.
*/
	load(filename:String):String {
	
	}
	/**
 * @description Loads data into the image from a byte array using the specified format.
*/
	loadFromData(data:ByteArray, format:String):Boolean {
	
	}
	/**
 * @description Creates a copy of this image that has been mirrored vertically.
*/
	mirror() {
	
	}
	/**
 * @description Creates a copy of this image that has been mirrored.
*/
	mirror(horizontal:bool, vertical:bool):void {
	
	}
	/**
 * @description Gets the color value of an individual pixel.
*/
	pixel(x:Number, y:Number):Color {
	
	}
	/**
 * @description Saves the image to a file.
*/
	save(filename:String):String {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	scale(width:Number, height:Number):Number {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	scale(size:Size):Size {
	
	}
	/**
 * @description Parameter(s):
*/
	setAlphaFromImage(img:Image):Boolean {
	
	}
	/**
 * @description Sets the color value of a color in the color table.
*/
	setColor(index:Number, color:Color):Number {
	
	}
	/**
 * @description Sets the color value of the given pixel.
*/
	setPixel(x:Number, y:Number, color:Color):Number {
	
	}
	/**
 * @description Sets the image text to text and associates it with key.
*/
	setText(key:String, text:String):String {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	smoothScale(size:Size):Size {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	smoothScale(width:Number, height:Number):Number {
	
	}
	/**
 * @description Creates a copy of the image in which the Red and Blue values have been swapped.
*/
	swapRGB() {
	
	}
	/**
 * @description Parameter(s):
*/
	text(key:String):String {
	
	}
	/**
 * @description Return Value:
*/
	textKeys() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageblend_dz}*/
class DzImageBlend extends QObject {
	/**
 * @description Used to blend src into dest.
*/
	static blendImage(dest:Image, src:Image):Image {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecolorlayer_dz}*/
class DzImageColorLayer extends DzImageLayer {
	static color:Color;
	/**
 * @description Sets the size for this color layer.
*/
	static setSize(size:Size):Size {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecomponent_dz}*/
class DzImageComponent extends QObject {
	static label:String;
	static visible:Boolean;
	/**
 * @description TODO:
Add description.
*/
	static addManipulator(manip:DzImageManip):DzImageManip {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagefilelayer_dz}*/
class DzImageFileLayer extends DzImageLayer {
	static filename:String;

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagelayer_dz}*/
class DzImageLayer extends DzImageComponent {
	/**
 * @description Return Value:
*/
	static getBlendMode() {
	
	}

}
/**
 * @classdesc Image manipulators are applied to an image layer before it is blended into the final image.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemanip_dz}*/
class DzImageManip extends QObject {
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemask_dz}*/
class DzImageMask extends DzImageComponent {
	static filename:String;

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getImageMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemgr_dz}*/
class DzImageMgr extends QObject {
	/**
 * @description Called prior to editing an image; pauses image preparation.
*/
	static beginEditingImage() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageproperty_dz}*/
class DzImageProperty extends DzProperty {
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultMapGamma() {
	
	}

}
/**
 * @classdesc Has an array of QImage objects for capturing data from a renderer - one image will be created for each frame rendered.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagerenderhandler_dz}*/
class DzImageRenderHandler extends DzRenderHandler {
	writeToFile:Boolean;
	/**
 * @description Create a new image render handler for rendering a single frame.
 * @constructor
*/
	constructor(size:Size, renderTime:DzTime, filename:String) {
	
	}
	/**
 * @description Begins rendering the given frame
*/
	beginFrame(frame:Number):Number {
	
	}
	/**
 * @description Starts a render
*/
	beginRender() {
	
	}
	/**
 * @description Finishes rendering the current frame
*/
	finishFrame() {
	
	}
	/**
 * @description Finishes the render and saves it out to file
*/
	finishRender() {
	
	}
	/**
 * @description Return Value:
*/
	getCreateThumbnail() {
	
	}
	/**
 * @description Return Value:
*/
	getCurrentFrameImage() {
	
	}
	/**
 * @description Return Value:
*/
	getNumFrames() {
	
	}
	/**
 * @description Return Value:
*/
	getSize() {
	
	}
	/**
 * @description Return Value:
*/
	getStartingTime() {
	
	}
	/**
 * @description Sets whether a thumbnail is created
*/
	setCreateThumbnail(createThumb:Boolean):Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagetexture_dz}*/
class DzImageTexture extends DzTexture, DzRefCountedItem {
	assetAuthor:DzAuthor;
	assetFileRevision:DzVersion;
	assetId:String;
	assetModifiedDate:Date;
	assetSource:DzUri;
	assetUri:DzUri;
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(filename:String, gamma:Number) {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(filename:String, gamma:Number, textureType:Number) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importer_dz}*/
class DzImporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getImportMgr().


See Also:


 Importer Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importmgr_dz}*/
class DzImportMgr extends QObject {
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
*/
	static canImport(filename:String):Boolean {
	
	}

}
/**
 * @classdesc DzInfoDivider places a divider bar between your widget and a tab bar of info tabs. This class is very similar (but not exactly like) DzDynamicDividerWgt. For situations where you want to control both sides of the divider bar it is recommended to use DzDynamicDividerWgt.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infodivider_dz}*/
class DzInfoDivider extends QWidget {
	/**
 * @description Return Value:
*/
	static getActualDividerPercent() {
	
	}

}
/**
 * @classdesc Tab bar that provides Tips, MetaData, and Info tabs that can be used to provide various information about products.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infotabs_dz}*/
class DzInfoTabs extends QWidget {
	/**
 * @description Return Value:
*/
	static currentTab() {
	
	}

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject for inclusion in a group of like nodes. These instances are drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupitem_dz}*/
class DzInstanceGroupItem extends DzBase {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copies the transform values of the given nodes transform properties. Also copies rotation order.
*/
	copyTransformFromNode(node:DzNode):DzNode {
	
	}

}
/**
 * @classdesc This class can be used to create a multiple instances of another DzNode (subclass) that also has a DzOobject. These instances are drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupnode_dz}*/
class DzInstanceGroupNode extends DzInstanceNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Begin edit of this node.
*/
	beginItemEdit() {
	
	}

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject. The instance is drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancenode_dz}*/
class DzInstanceNode extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getCopyModeControl() {
	
	}

}
/**
 * @classdesc See Also:


 DzVec2



Since:


 4.6.4.88
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2_dz}*/
class DzInt2 extends Object {
	height:Number;
	width:Number;
	x:Number;
	y:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(vec:DzVec2) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(vec:DzInt2) {
	
	}
	/**
 * @description Creates and inititializes this vector with an array of 2 integer values.
 * @constructor
*/
	constructor(vals:Array) {
	
	}
	/**
 * @description Creates and inititializes this vector with 2 integers.
 * @constructor
*/
	constructor(x:Number, y:Number) {
	
	}
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs() {
	
	}
	/**
 * @description Return Value:
*/
	add(vec:DzInt2):void {
	
	}
	/**
 * @description Return Value:
*/
	average() {
	
	}
	/**
 * @description Clamps each component of this vector.
*/
	clamp(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number):Number {
	
	}
	/**
 * @description Clamps the maximum value for each component of this vector.
*/
	clampMax(max:Number):Number {
	
	}
	/**
 * @description Clamps the minimum value for each component of this vector.
*/
	clampMin(min:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	divide(vec:DzInt2):void {
	
	}
	/**
 * @description Return Value:
*/
	isNull() {
	
	}
	/**
 * @description Return Value:
*/
	length() {
	
	}
	/**
 * @description Return Value:
*/
	lengthSquared() {
	
	}
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
*/
	linearInterp(t:Number, v1:DzInt2, v2:DzInt2):Number {
	
	}
	/**
 * @description Sets this vector to (1, 1).
*/
	makeIdentity() {
	
	}
	/**
 * @description Sets this vector to (0, 0).
*/
	makeZero() {
	
	}
	/**
 * @description Return Value:
*/
	manhattanLength() {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number):Number {
	
	}
	/**
 * @description Modulates each component of this vector.
*/
	modulo(min:Number, max:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	multiply(vec:DzInt2):void {
	
	}
	/**
 * @description Negates each component of this vector.
*/
	negate() {
	
	}
	/**
 * @description Sets this vector to have a specific length in the current direction.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square() {
	
	}
	/**
 * @description Return Value:
*/
	subtract(vec:DzInt2):void {
	
	}
	/**
 * @description Swaps the values of x and y.
*/
	transpose() {
	
	}

}
/**
 * @classdesc This class provides an animatable integer property with 2 values that is stored and can be accessed as a DzInt2.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2property_dz}*/
class DzInt2Property extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustInt2Value(tm:DzTime, val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultInt2Value() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getInt2FollowValue() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getInt2FollowValue(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description Return Value:
*/
	getInt2Value() {
	
	}
	/**
 * @description Parameter(s):
*/
	getInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInt2Value(i:Number):DzInt2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalInt2Value() {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawInt2Value() {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setInt2Value(tm:DzTime, val:DzInt2):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyInt2Value(i:Number, val:DzInt2):Number {
	
	}
	/**
 * @description The same as calling setInt2Value( DzInt2 ).
*/
	setRawInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description The same as calling setInt2Value( DzTime, DzInt2 ).
*/
	setRawInt2Value(tm:DzTime, val:DzInt2):DzTime {
	
	}

}
/**
 * @classdesc Since:


 4.6.4.24
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactiveinstructionobject_dz}*/
class DzInteractiveInstructionObject extends QObject {
	/**
 * @description Return Value:
*/
	static getMember(name:String):Object {
	
	}

}
/**
 * @classdesc This class manages interactive lessons that the user can perform in the interface via lessonstripwgt_dz. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance from DzMainWindow via DzMainWindow.getInteractiveLessonMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonmgr_dz}*/
class DzInteractiveLessonMgr extends QObject {
	static progressWidth:Number;
	/**
 * @description Starts the lesson using a list of instructions in a separate file.
*/
	static begin(path:String):String {
	
	}

}
/**
 * @classdesc Since:


 4.6.4.24
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonobject_dz}*/
class DzInteractiveLessonObject extends QObject {
	/**
 * @description Return Value:
*/
	static appendInstruction() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intproperty_dz}*/
class DzIntProperty extends DzNumericProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustValue(val:Number):Number {
	
	}

}
/**
 * @classdesc A DzIntSlider provides a control that allows a user to adjust a bounded integer value.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intslider_dz}*/
class DzIntSlider extends DzWidget {
	clamped:Boolean;
	displayAsPercent:Boolean;
	indeterminate:Boolean;
	label:String;
	labelVisible:Boolean;
	max:Number;
	min:Number;
	sensitivity:Number;
	text:String;
	textEditable:Boolean;
	textVisible:Boolean;
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/invertmanip_dz}*/
class DzInvertManip extends DzImageManip {
	on:Boolean;
	/**
 * @description Holds whether or not the manipulater is active
 * @constructor
*/
	constructor(onOff=false:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	isOn() {
	
	}

}
/**
 * @classdesc Implements a Physically Based Rendering (PBR) interface for the scene to render itself through the NVIDIA Iray renderer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/irayrenderer_dz}*/
class DzIrayRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getPropertyHolder() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Layered Image(s) Preset in the DSON format.


See Also:


 Sample: Save a Layered Image(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layerassetfilter_dz}*/
class DzLayerAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This class uses explicit sharing to make it very efficient to copy. This does, however, mean that modifying one copy of the image modifies all copies. DzLayeredImage does not currently support detach() or copy() functions for creating unique instances or deep copies.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredimage_dz}*/
class DzLayeredImage extends DzBase {
	/**
 * @description Add a layer to the image.
*/
	static addLayer(layer:DzImageLayer):DzImageLayer {
	
	}

}
/**
 * @classdesc This is a sharable object that stores information for a layered texture (image map) that is used in OpenGL. Do not create a layered texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredtexture_dz}*/
class DzLayeredTexture extends DzTexture, DzRefCountedItem {
	static assetAuthor:DzAuthor;
	static assetFileRevision:DzVersion;
	static assetId:String;
	static assetModifiedDate:Date;
	static assetSource:DzUri;
	static assetUri:DzUri;
	static size:Boolean;
	/**
 * @description TODO:
Add description.
*/
	static addLayer(layer:DzTextureLayer):DzTextureLayer {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static beginEditing() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static copyFrom(texture:DzLayeredTexture):void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static createLayer(name:String):DzTextureLayer {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static endEditing() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static findLayer(layer:DzTextureLayer):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getLayer(index:Number):DzTextureLayer {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getNumLayers() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getSourceDSI() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static insertLayer(index:Number, layer:DzTextureLayer):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static moveLayer(fromIndex:Number, toIndex:Number):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static refeshLayeredTexture() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static removeAllLayers() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static removeLayer(index:Number):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static removeLayer(layer:DzTextureLayer):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static replaceLayer(oldLayer:DzTextureLayer, newLayer:DzTextureLayer):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static takeLayer(index:Number):DzTextureLayer {
	
	}

}
/**
 * @classdesc This is an abstract base class that provides general functionality for DAZ Script interface layout components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layout_dz}*/
class DzLayout extends QObject {
	static autoAdd:Boolean;
	static margin:Number;
	static spacing:Number;
	/**
 * @description Adds the given widget to the items managed by this layout
*/
	static addWidget(item:DzWidget):DzWidget {
	
	}

}
/**
 * @classdesc A DzLCDNumber provides a LCD-style number display.


The following digits and symbols can be displayed:


0/O, 1, 2, 3, 4, 5/S, 6, 7, 8, 9/g, - (minus), . (decimal point), A, B, C, D, E, F, h, H, L, o, P, r, u, U, Y, : (colon),  &deg;  (degree sign - which is specified as single quote in the string) and space.


Illegal characters are substituted with spaces.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lcdnumber_dz}*/
class DzLCDNumber extends DzWidget {
	/**
 * @description Hexadecimal (base 16)
*/
	
static Hex;
	/**
 * @description Decimal (base 10)
*/
	
static Dec;
	/**
 * @description Octal (base 8)
*/
	
static Oct;
	/**
 * @description Binary (base 2)
*/
	
static Bin;
	/**
 * @description Same as Hex
*/
	
static HEX;
	/**
 * @description Same as Dec
*/
	
static DEC;
	/**
 * @description Same as Oct
*/
	
static OCT;
	/**
 * @description Same as Bin
*/
	
static BIN;
	/**
 * @description Raised segments filled with the background color
*/
	
static Outline;
	/**
 * @description Raised segments filled with the foreground color
*/
	
static Filled;
	/**
 * @description Flat segments filled with the foreground color
*/
	
static Flat;
	/**
 * @description Creates a LCD number widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/light_dz}*/
class DzLight extends DzCamera {
	/**
 * @description The light does not utilize shadows.
*/
	
static None;
	/**
 * @description The light utilizes a Deep Shadow Map (DSM).
*/
	
static DeepShadowMap;
	/**
 * @description The light utilizes ray-traced shadows.
*/
	
static Raytraced;
	/**
 * @description Return Value:
*/
	static getCategories() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Light(s) Preset in the DSON format.


See Also:


 Sample: Save a Light(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lightassetfilter_dz}*/
class DzLightAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/line3_dz}*/
class DzLine3 extends Object {
	end:DzVec3;
	origin:DzVec3;
	/**
 * @description Default Constructor. Creates an uninitialized line.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getDirection() {
	
	}
	/**
 * @description Return Value:
*/
	getPoint(t:Number):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	length(t:Number):Number {
	
	}
	/**
 * @description Tests the intersection of two lines. This line and the given line are assumed to be infinitely long in both directions (i.e. the intersection can be outside the origin-end segment of either line).
*/
	linesIntersect(line:DzLine3, intersection:DzVec3, tolerance:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	minDistance(pnt:DzVec3, s:Number, clampEnds:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	minDistance(line1:DzLine3, s:Number, t:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	minDistanceSquared(pnt:DzVec3, s:Number, clampEnds:Boolean):Number {
	
	}
	/**
 * @description Reverses the direction of the line by mirroring the endpoint.
*/
	negate() {
	
	}
	/**
 * @description Calculates the intersection of this line and the plane specified. The plane is defined by a point on the plane and the normal to the plane.
*/
	planeIntersect(planePoint:DzVec3, planeNormal:DzVec3, t:Number, intersection:DzVec3):Boolean {
	
	}
	/**
 * @description Tests the intersection of two line segments.
*/
	segmentsIntersect(line:DzLine3, intersection:DzVec3, tolerance:Number):Boolean {
	
	}
	/**
 * @description Sets the line to have the length given by setting the endpoint relative to the current origin.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Swaps the origin for the endpoint.
*/
	swapEnds() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/linearpointlight_dz}*/
class DzLinearPointLight extends DzPointLight {
	/**
 * @description Default Constructor. Creates a new linear point light.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getFallOffEnd() {
	
	}

}
/**
 * @classdesc This class provides a single line text editor.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lineedit_dz}*/
class DzLineEdit extends DzWidget {
	/**
 * @description Display characters as they are entered.
*/
	
static Normal;
	/**
 * @description Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
*/
	
static NoEcho;
	/**
 * @description Display asterisks instead of the characters actually entered.
*/
	
static Password;
	/**
 * @description Display characters as they are entered while editing otherwise display asterisks.
*/
	
static PasswordEchoOnEdit;
	/**
 * @description Creates a line edit as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
*/
	backspace() {
	
	}
	/**
 * @description Clears the text in the editor.
*/
	clear() {
	
	}
	/**
 * @description Deprecated
*/
	clearModified() {
	
	}
	/**
 * @description Copies the selected text into the clipboard.
*/
	copy() {
	
	}
	/**
 * @description Moves the cursor backward the given number of characters.
*/
	cursorBackward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor forward the given number of characters.
*/
	cursorForward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor backward one word.
*/
	cursorWordBackward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor forward one word.
*/
	cursorWordForward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Copies the selected text into the clipboard and removes it from the editor.
*/
	cut() {
	
	}
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
*/
	del() {
	
	}
	/**
 * @description Clears any selection in the editor.
*/
	deselect() {
	
	}
	/**
 * @description Moves the cursor to the end of the line.
*/
	end(mark:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	hasAcceptableInput() {
	
	}
	/**
 * @description Return Value:
*/
	hasSelectedText() {
	
	}
	/**
 * @description Moves the cursor to the beginning of the line.
*/
	home(mark:Boolean):Boolean {
	
	}
	/**
 * @description Inserts any text on the clipboard into the line at the cursor's current position.
*/
	paste() {
	
	}
	/**
 * @description If redoAvailable is true, redoes the next operation in the editor.
*/
	redo() {
	
	}
	/**
 * @description Selects all the text in the editor.
*/
	selectAll() {
	
	}
	/**
 * @description Return Value:
*/
	selectedText() {
	
	}
	/**
 * @description Return Value:
*/
	selectionStart() {
	
	}
	/**
 * @description Causes this line edit to only accept characters that represent double precision floating point (decimal) numbers.
*/
	setDoubleValidator(bottom:Number, top:Number, decimals:Number, scientific:Boolean):Number {
	
	}
	/**
 * @description Causes this line edit to only accept characters that represent whole numbers (integers).
*/
	setIntValidator(minimum:Number, maximum:Number):Number {
	
	}
	/**
 * @description Causes this line edit to only accept characters that satisfy a Regular Expression.
*/
	setRegExValidator(rx:String, caseSensitive:Boolean):String {
	
	}
	/**
 * @description Sets the selected portion of the text in the editor.
*/
	setSelection(start:Number, length:Number):Number {
	
	}
	/**
 * @description If undoAvailable is true, undoes the last operation in the editor.
*/
	undo() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listbox_dz}*/
class DzListBox extends DzScrollView {
	/**
 * @description There is a fixed number of rows or columns
*/
	
static FixedNumber;
	/**
 * @description There are as many columns as will fit
*/
	
static FitToWidth;
	/**
 * @description There are as many rows as will fit
*/
	
static FitToHeight;
	/**
 * @description There are as many rows as required by the column mode and vice-versa
*/
	
static Variable;
	/**
 * @description Single selection - only one item in the box can be selected at a time
*/
	
static Single;
	/**
 * @description Multi selection - when the user clicks on an item, its selection state is toggled, all other items remain the same
*/
	
static Multi;
	/**
 * @description Extended selection - when the user clicks on an item, the current selection is replaced with that item. The ctrl and shift keys can be used to select multiple items.
*/
	
static Extended;
	/**
 * @description Items can not be selected
*/
	
static NoSelection;
	/**
 * @description Creates a list box with the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Clears all items in the list box
*/
	clear() {
	
	}
	/**
 * @description Inserts the given item into the list box
*/
	insertItem(text:String):String {
	
	}
	/**
 * @description Return Value:
*/
	isSelected(index:Number):Boolean {
	
	}
	/**
 * @description Removes the given item from the list box
*/
	removeItem(index:Number):Number {
	
	}
	/**
 * @description Sets whether the item at the given index is selected
*/
	setSelected(index:Number, selected:Boolean):Number {
	
	}
	/**
 * @description Return Value:
*/
	text(index:Number):String {
	
	}

}
/**
 * @classdesc Todo


The findItem() method takes a ComparisonFlags enum. ComparisonFlags is either not exposed or not documented.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listview_dz}*/
class DzListView extends DzScrollView {
	/**
 * @description The selected items
*/
	
static Selected;
	/**
 * @description The unselected items
*/
	
static Unselected;
	/**
 * @description The items that are checked
*/
	
static Checked;
	/**
 * @description The items that are not checked
*/
	
static NotChecked;
	/**
 * @description All the items in the view
*/
	
static All;
	/**
 * @description The item is renamed if return is pressed or if the user clicks away from the entry field (it loses focus)
*/
	
static Accept;
	/**
 * @description The item is renamed only if the user presses return in the entry field. If the entry field loses focus, the rename operation is discarded.
*/
	
static Reject;
	/**
 * @description The columns do not get resized
*/
	
static NoColumn;
	/**
 * @description All columns get resized equally
*/
	
static AllColumns;
	/**
 * @description The last column is resized to fit the width of the view
*/
	
static LastColumn;
	/**
 * @description Only one item in the list view can be selected
*/
	
static Single;
	/**
 * @description Multiple items in the list view can be selected. When the user clicks on an item, its selection state is toggled on/off.
*/
	
static Multi;
	/**
 * @description Multiple items in the list view can be selected. When the user clicks on an item, the current selection is cleared, and that item becomes selected. Multiple items are selected by clicking with the CTRL key, or SHIFT key pressed, or by clicking and dragging.
*/
	
static Extended;
	/**
 * @description No items in the list view can be selected
*/
	
static NoSelection;
	/**
 * @description The column width does not change automatically
*/
	
static Manual;
	/**
 * @description The column width grows automatically according to the maximum width of all items in the column.
*/
	
static Maximum;
	/**
 * @description Creates a list view widget with the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Add a column to the list view with the given label
*/
	addColumn(label:String):Number {
	
	}
	/**
 * @description Clears all the items from the list view.
*/
	clear() {
	
	}
	/**
 * @description Clears the current selection in the view.
*/
	clearSelection() {
	
	}
	/**
 * @description Return Value:
*/
	columnAlignment(column:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	columnText(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	columnWidth(column:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	columnWidthMode(column:Number):WidthMode {
	
	}
	/**
 * @description Return Value:
*/
	currentItem() {
	
	}
	/**
 * @description Deletes given item from the list view.
*/
	deleteItem(item:DzListViewItem):DzListViewItem {
	
	}
	/**
 * @description Ensures the the given item is visible in the view.
*/
	ensureItemVisible(item:DzListViewItem):DzListViewItem {
	
	}
	/**
 * @description Return Value:
*/
	findItem(text:String, column:Number, compare:ComparisonFlags):DzListViewItem {
	
	}
	/**
 * @description Return Value:
*/
	firstChild() {
	
	}
	/**
 * @description Return an array of DzListViewItems that match the supplied ItemsMode Flag.
*/
	getItems(mode:ItemsMode):Array {
	
	}
	/**
 * @description Hide the given column
*/
	hideColumn(column:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	isOpen(item:DzListViewItem):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRenaming() {
	
	}
	/**
 * @description Return Value:
*/
	isSelected(item:DzListViewItem):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	lastItem() {
	
	}
	/**
 * @description Remove the column at index from the list view
*/
	removeColumn(index:Number):Number {
	
	}
	/**
 * @description Sets the alignment of the given column.
*/
	setColumnAlignment(column:Number, align:Number):Number {
	
	}
	/**
 * @description Change the label of the column at the given index
*/
	setColumnText(index:Number, label:String):Number {
	
	}
	/**
 * @description Sets the width of the given column.
*/
	setColumnWidth(column:Number, width:Number):Number {
	
	}
	/**
 * @description Sets the width mode of the given column.
*/
	setColumnWidthMode(column:Number, mode:WidthMode):Number {
	
	}
	/**
 * @description Set the currently highlighted item
*/
	setCurrentItem(item:DzListViewItem):DzListViewItem {
	
	}
	/**
 * @description Sets whether the given item is expanded (open) or collapsed (closed)
*/
	setOpen(item:DzListViewItem, open:Boolean):DzListViewItem {
	
	}
	/**
 * @description Sets whether the given item is selected
*/
	setSelected(item:DzListViewItem, selected:Boolean):DzListViewItem {
	
	}
	/**
 * @description Sets the selection anchor of the view to item.
*/
	setSelectionAnchor(item:DzListViewItem):DzListViewItem {
	
	}
	/**
 * @description Sets the sorting column and order for the view.
*/
	setSorting(column:Number, ascending:Boolean):Number {
	
	}
	/**
 * @description Sort the view
*/
	sort() {
	
	}

}
/**
 * @classdesc This class is not a widget, but a helper class for working with DzListView. Each DzListViewItem represents a single item in a list view - add items to a list view by creating a new DzListViewItem that is a child of the list view, or a child of another list view item in the list view.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listviewitem_dz}*/
class DzListViewItem extends QObject {
	dragEnabled:Boolean;
	dropEnabled:Boolean;
	enabled:Boolean;
	expandable:Boolean;
	height:Number;
	id:Number;
	multiLinesEnabled:Boolean;
	open:Boolean;
	selectable:Boolean;
	selected:Boolean;
	visible:Boolean;
	/**
 * @description Creates a list view item at the root level of the given list view
 * @constructor
*/
	constructor(parent:DzListView, id=-1:Number) {
	
	}
	/**
 * @description Creates a list view item as a child of the given list view item
 * @constructor
*/
	constructor(parent:DzListViewItem, id=-1:Number) {
	
	}
	/**
 * @description Adds an arbitrary data item to be stored with the item
*/
	addDataItem(key:String, val:Object):String {
	
	}
	/**
 * @description Return Value:
*/
	childCount() {
	
	}
	/**
 * @description Compares the given listview item with this item
*/
	compare(item:DzListViewItem, column:Number, ascending:Boolean):Number {
	
	}
	/**
 * @description Deletes given item from the list view item's list of children items.
*/
	deleteItem(item:DzListViewItem):void {
	
	}
	/**
 * @description Return Value:
*/
	depth() {
	
	}
	/**
 * @description Return Value:
*/
	firstChild() {
	
	}
	/**
 * @description Return Value:
*/
	getDataItem(key:String):Object {
	
	}
	/**
 * @description Return Value:
*/
	getNumDataItems() {
	
	}
	/**
 * @description Insert the item as a child of this item
*/
	insertItem(newChild:DzListViewItem):void {
	
	}
	/**
 * @description Return Value:
*/
	itemAbove() {
	
	}
	/**
 * @description Return Value:
*/
	itemBelow() {
	
	}
	/**
 * @description Sets the column and order that determines how the list is sorted
*/
	key(column:Number, ascending:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	listView() {
	
	}
	/**
 * @description Moves this item to be after the given item, which must be one of its siblings
*/
	moveItem(item:DzListViewItem):void {
	
	}
	/**
 * @description Return Value:
*/
	nextSibling() {
	
	}
	/**
 * @description Return Value:
*/
	parent() {
	
	}
	/**
 * @description Return Value:
*/
	pixmap(column:Number):Pixmap {
	
	}
	/**
 * @description Remove the item from the children of this item
*/
	removeItem(item:DzListViewItem):void {
	
	}
	/**
 * @description Return Value:
*/
	renameEnabled(column:Number):Boolean {
	
	}
	/**
 * @description Sets the pixmap for this item in the given column
*/
	setPixmap(column:Number, pm:Pixmap):Number {
	
	}
	/**
 * @description Sets whether or not the text in the given column can be changed by the user.
*/
	setRenameEnabled(column:Number, yesNo:Boolean):Number {
	
	}
	/**
 * @description Set the text for this list view item in the given column
*/
	setText(column:Number, text:String):Number {
	
	}
	/**
 * @description Sorts the children of this item according to the current sorting column and order.
*/
	sort() {
	
	}
	/**
 * @description Sorts the children items of this item by the given column in the given order.
*/
	sortChildItems(column:Number, ascending:Boolean):Number {
	
	}
	/**
 * @description Starts a rename operation.
*/
	startRename(column:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	text(column:Number):String {
	
	}

}
/**
 * @classdesc There is only one of these widgets in the application, which is created and owned by DzApp. It can be accessed by using the Global.MainWindow variable.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/mainwindow_dz}*/
class DzMainWindow extends QWidget {
	static alwaysOnTop:Boolean;
	static toolTipsEnabled:Boolean;
	/**
 * @description Presents the user with a dialog that asks if they want to save changes to the scene, and does a scene save if the user selects yes.
*/
	static askSaveChanges() {
	
	}

}
/**
 * @classdesc A "material" represents a collection of properties and settings that, when applied through the use of a "shader" (a small program/subroutine that describes how the settings are used), describe how the geometry associated with a 3D object interacts with light and ultimately what the surface of that 3D object looks like when rendered.


See Also:


 shape_dz

 facetmesh_dz

 materialfacegroup_dz

 materialselectionset_dz
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/material_dz}*/
class DzMaterial extends DzElement, DzRefCountedItem {
	static assetAuthor:DzAuthor;
	static assetFileRevision:DzVersion;
	static assetId:String;
	static assetModifiedDate:Date;
	static assetSource:DzUri;
	static assetUri:DzUri;
	static renderPriority:DzRenderMgr;
	/**
 * @description Parameter(s):
*/
	static duplicateOrDefaultMaterial(context:DzElementDuplicateContext):void {
	
	}
	/**
 * @description Sets whether or not this material should propagate its render priority up to all the nodes that use it. Setting this to true will also ensure that the render priority is set for nodes that the material is assigned to at a later time.
*/
	static enablePropagateRenderPriorityToNodes(propagate:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static getActiveUVSet(shape:shape_dz):DzUVSet {
	
	}
	/**
 * @description Return Value:
*/
	static getActiveUVSet(geom:geometry_dz):DzUVSet {
	
	}
	/**
 * @description Collects all the images that are being used by this material at the current time and inserts them into the given list if they are not already there.
*/
	static getAllMaps() {
	
	}
	/**
 * @description Return Value:
*/
	static getBakedMap() {
	
	}
	/**
 * @description Return Value:
*/
	static getBaseOpacity() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getBoundingBox() {
	
	}
	/**
 * @description Return Value:
*/
	static getColorMap() {
	
	}
	/**
 * @description Return Value:
*/
	static getDiffuseColor() {
	
	}
	/**
 * @description Return Value:
*/
	static getIndex() {
	
	}
	/**
 * @description Return Value:
*/
	static getMaterialName() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumGLMaps() {
	
	}
	/**
 * @description Deprecated
*/
	static getNumUVMaps() {
	
	}
	/**
 * @description Return Value:
*/
	static getOpacityMap() {
	
	}
	/**
 * @description Return Value:
*/
	static getPropagatePriorityControl() {
	
	}
	/**
 * @description Return Value:
*/
	static getRenderPriorityControl() {
	
	}
	/**
 * @description Return Value:
*/
	static getShapeList() {
	
	}
	/**
 * @description Return Value:
*/
	static getSmoothAngleControl() {
	
	}
	/**
 * @description Return Value:
*/
	static getSmoothControl() {
	
	}
	/**
 * @description Return Value:
*/
	static getSmoothingAngle() {
	
	}
	/**
 * @description Return Value:
*/
	static getTags() {
	
	}
	/**
 * @description Return Value:
*/
	static getTagsControl() {
	
	}
	/**
 * @description Return Value:
*/
	static getUVSetControl() {
	
	}
	/**
 * @description Return Value:
*/
	static isColorMappable() {
	
	}
	/**
 * @description Return Value:
*/
	static isHighlighted() {
	
	}
	/**
 * @description Return Value:
*/
	static isOpacityMappable() {
	
	}
	/**
 * @description Return Value:
*/
	static isOpaque() {
	
	}
	/**
 * @description Return Value:
*/
	static isPropagateRenderPriorityToNodesEnabled() {
	
	}
	/**
 * @description Retrieve selection state.
*/
	static isSelected() {
	
	}
	/**
 * @description Return Value:
*/
	static isSmoothingOn() {
	
	}
	/**
 * @description Marks the asset as being modified. Makes the current author the author of the file.
*/
	static modifyAsset() {
	
	}
	/**
 * @description Marks the asset as being modified. Makes the current author the author of the file. Sets the file URI for the asset to the given URI.
*/
	static modifyAsset(newUri:DzUri):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static needsPtex() {
	
	}
	/**
 * @description Return Value:
*/
	static needsTangentSpaceParams() {
	
	}
	/**
 * @description Set the selection state for this material.
*/
	static select(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Set the 'baked' shader map for this material. This overrides any current material settings and just draws the map. This is useful for representing the results of off-line shaders that can not be represented in OpenGL - the results of the shader are 'baked' onto a texture map, and then applied to the material with this function.
*/
	static setBakedMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the opacity value for this material.
*/
	static setBaseOpacity(val:Number):Number {
	
	}
	/**
 * @description Set the color ('texture') map for this material.
*/
	static setColorMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the diffuse color for this material.
*/
	static setDiffuseColor(color:Color):Color {
	
	}
	/**
 * @description Set the opactiy map for this material.
*/
	static setOpacityMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Sets the smoothing angle for the material. This only has effect on the material if smoothing is enabled.
*/
	static setSmoothingAngle(angle:Number):Number {
	
	}
	/**
 * @description Sets whether or not smoothing is enabled for the material.
*/
	static setSmoothingOn(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static shadersMatch(otherMat:DzMaterial):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static shouldAlwaysEmbed() {
	
	}
	/**
 * @description Causes this material to be drawn with a highlight based on the styles current highlight color. This is used by material selection tools, etc, to give visual feedback to the user about a material in the viewport.
*/
	static startDrawHighlight() {
	
	}
	/**
 * @description Causes this material to stop being drawn with a highlight.
*/
	static stopDrawHighlight() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Material(s) Preset in the DSON format.


See Also:


 Sample: Save a Material(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/materialassetfilter_dz}*/
class DzMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc A transformation matrix consisting of 4 rows and 4 columns.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/matrix4_dz}*/
class DzMatrix4 extends Object {
	isIdentity:Boolean;
	m11:Number;
	m12:Number;
	m13:Number;
	m14:Number;
	m21:Number;
	m22:Number;
	m23:Number;
	m24:Number;
	m31:Number;
	m32:Number;
	m33:Number;
	m34:Number;
	m41:Number;
	m42:Number;
	m43:Number;
	m44:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor(initIdentity=false:Boolean) {
	
	}
	/**
 * @description Constructs a 4×4 matrix from 16 elements in "Column Major" order.
 * @constructor
*/
	constructor(m11:Number, m21:Number, m31:Number, m41:Number, m12:Number, m22:Number, m32:Number, m42:Number, m13:Number, m23:Number, m33:Number, m43:Number, m14:Number, m24:Number, m34:Number, m44:Number) {
	
	}
	/**
 * @description Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
 * @constructor
*/
	constructor(xAxis:DzVec3, yAxis:DzVec3, zAxis:DzVec3) {
	
	}
	/**
 * @description Constructs a 4×4 matrix from a quaternion. Initializes the matrix to the given rotation.
 * @constructor
*/
	constructor(rot:DzQuat) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(mat:DzMatrix4) {
	
	}
	/**
 * @description Return Value:
*/
	inverse() {
	
	}
	/**
 * @description Test and choose best inverse for current matrix
*/
	invert() {
	
	}
	/**
 * @description Sets the matrix to be identity
*/
	makeIdentity() {
	
	}
	/**
 * @description Return Value:
*/
	matrix3() {
	
	}
	/**
 * @description Calculates the multiplication of this matrix by the given matrix.
*/
	multiply(mat:DzMatrix4):void {
	
	}
	/**
 * @description Multiplies matrix by given column vector, giving column vector result
*/
	multMatrixVec(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Multiplies given row vector by matrix, giving row vector result
*/
	multVecMatrix(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Test for orthogonal 3×3 sub-matrix (orthonormal rows)
*/
	orthogonal() {
	
	}
	/**
 * @description Accumulates a uniform scale by pre-multiplying.
*/
	preScale(scale:Number):Number {
	
	}
	/**
 * @description Accumulates a general scale by pre-multiplying.
*/
	preScale(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Accumulates a scale along an arbitrary axis by pre-multiplying.
*/
	preScale(scale:Number, direction:DzVec3):Number {
	
	}
	/**
 * @description Shears the matrix along the x and y axis (by pre-multiplying).
*/
	preShearXY(xShear:Number, yShear:Number):Number {
	
	}
	/**
 * @description Shears the matrix along the x and z axis (by pre-multiplying).
*/
	preShearXZ(xShear:Number, zShear:Number):Number {
	
	}
	/**
 * @description Shears the matrix along the y and z axis (by pre-multiplying).
*/
	preShearYZ(yShear:Number, zShear:Number):Number {
	
	}
	/**
 * @description Accumulate a translation by pre-multiplying.
*/
	preTranslate(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Accumulate rotation (by post-multiplying).
*/
	rotate(rot:DzQuat):DzQuat {
	
	}
	/**
 * @description Accumulate rotation around the X axis (by post-multiplying).
*/
	rotateX(radians:Number):Number {
	
	}
	/**
 * @description Accumulate rotation around the Y axis (by post-multiplying).
*/
	rotateY(radians:Number):Number {
	
	}
	/**
 * @description Accumulate rotation around the Z axis (by post-multiplying).
*/
	rotateZ(radians:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	row(i:Number):DzVec3 {
	
	}
	/**
 * @description Accumulates a general scale (by post-multiplying).
*/
	scale(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Accumulates a uniform scale (by post-multiplying).
*/
	scale(scale:Number):Number {
	
	}
	/**
 * @description Accumulates a scale along an arbitrary axis (by post-multiplying).
*/
	scale(scale:Number, direction:DzVec3):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setRow(i:Number, vec:DzVec3):Number {
	
	}
	/**
 * @description Sets matrix to translate by given vector, leaving rotation as is
*/
	setTrans(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Shears the matrix along the x and y axis (by post-multiplying).
*/
	shearXY(xShear:Number, yShear:Number):Number {
	
	}
	/**
 * @description Shears the matrix along the x and z axis (by post-multiplying).
*/
	shearXZ(xShear:Number, zShear:Number):Number {
	
	}
	/**
 * @description Shears the matrix along the y and z axis (by post-multiplying).
*/
	shearYZ(yShear:Number, zShear:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	trace() {
	
	}
	/**
 * @description Accumulate a translation (by post-multiplying).
*/
	translate(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	transpose() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/menu_dz}*/
class DzMenu extends QObject {
	/**
 * @description Adds the DzAction to the given menu.
*/
	static addAction(action:DzAction, menu:Number):Number {
	
	}

}
/**
 * @classdesc The DzMessageBox class is available in DAZScript via Global.MessageBox.


It provides functions that display pre-built message boxes to the user. This is the easiest way for a script to interact with a user - simply call one of the functions as shown in the following examples:


Example:


Display an information box with an 'Ok' button

MessageBox.information( qsTr("MyScript finished successfully."), qsTr("MyScript"), qsTr("&OK") );

Example:


Ask the user a question with 'Yes'/'No' buttons

if( MessageBox.question( qsTr("Do you want to reset the entire figure?"), qsTr("MyScript"), qsTr("&Yes"), qsTr("&No") ) == 0 ){
	resetEntireFigure();
}

Example:


Display a warning message to the user

if( MessageBox.warning( qsTr("If you continue, the entire figure will be reset!"), qsTr("MyScript"), qsTr("&OK"), qsTr("&Cancel") ) == 1 ){
	return;
}

Example:


Display a critical message to the user

var error = doSomething();
if( error != 0 ){
	MessageBox.critical( qsTr("The script has encountered a critical error!"), qsTr("MyScript"), qsTr("&OK") );
	return;
}
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/messagebox_dz}*/
class DzMessageBox extends QObject {
	/**
 * @description Shows a critical dialog box to the user.
*/
	static critical(text:String, title:String, button0:String, button1:String, button2:String):Number {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/modifier_dz}*/
class DzModifier extends DzElement {
	/**
 * @description Return Value:
*/
	static getAssignedModifierStackSectionID() {
	
	}

}
/**
 * @classdesc Since:


 4.9.3.46



Attention:


 This object is provided by the Morph Loader Pro plugin. It is only available when the Morph Loader Pro plugin is activated and enabled.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloader_dz}*/
class DzMorphLoader extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static WeightMap;
	/**
 * @description TODO: Add description.
*/
	
static FacetList;
	/**
 * @description TODO: Add description.
*/
	
static EdgeList;
	/**
 * @description TODO: Add description.
*/
	
static VertexList;
	/**
 * @description TODO: Add description.
*/
	
static UnknownMap;
	/**
 * @description TODO: Add description.
*/
	
static EntireFigure;
	/**
 * @description TODO: Add description.
*/
	
static SelectedNodes;
	/**
 * @description TODO: Add description.
*/
	
static PrimaryNode;
	/**
 * @description TODO: Add description.
*/
	
static SingleSkinFigure;
	/**
 * @description TODO: Add description.
*/
	
static SingleSkinFigureFromGraft;
	/**
 * @description TODO: Add description.
*/
	
static DoNotMirror;
	/**
 * @description TODO: Add description.
*/
	
static XSwap;
	/**
 * @description TODO: Add description.
*/
	
static XPosToNeg;
	/**
 * @description TODO: Add description.
*/
	
static XNegToPos;
	/**
 * @description TODO: Add description.
*/
	
static YSwap;
	/**
 * @description TODO: Add description.
*/
	
static YPosToNeg;
	/**
 * @description TODO: Add description.
*/
	
static YNegToPos;
	/**
 * @description TODO: Add description.
*/
	
static ZSwap;
	/**
 * @description TODO: Add description.
*/
	
static ZPosToNeg;
	/**
 * @description TODO: Add description.
*/
	
static ZNegToPos;
	/**
 * @description TODO: Add description.
*/
	
static MakeUnique;
	/**
 * @description TODO: Add description.
*/
	
static DeltasAndERCLinks;
	/**
 * @description TODO: Add description.
*/
	
static DeltasOnly;
	/**
 * @description Default Constructor. Creates a morph loader with default settings.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Creates a morph on the node provided from the geometry loaded from the file. This function supports morph creation from vertex-only geometries.
*/
	createMorph(settings:DzFileIOSettings, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	}
	/**
 * @description Creates a morph on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
*/
	createMorphFromMesh(mesh:vertexmesh_dz, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getAttenuateEdgeStrength() {
	
	}
	/**
 * @description Return Value:
*/
	getAttenuateMapPath() {
	
	}
	/**
 * @description Return Value:
*/
	getAttenuateStrength() {
	
	}
	/**
 * @description Gets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
*/
	getCleanUpOrphans() {
	
	}
	/**
 * @description Return Value:
*/
	getControlNode() {
	
	}
	/**
 * @description Return Value:
*/
	getControlProperty() {
	
	}
	/**
 * @description Return Value:
*/
	getControlPropertyCustomLabel() {
	
	}
	/**
 * @description Return Value:
*/
	getControlPropertyERCCustomValue() {
	
	}
	/**
 * @description Return Value:
*/
	getControlPropertyERCType() {
	
	}
	/**
 * @description Return Value:
*/
	getControlPropertyERCUseCustomValue() {
	
	}
	/**
 * @description Return Value:
*/
	getControlPropertyUseCustomLabel() {
	
	}
	/**
 * @description Return Value:
*/
	getCreateControlProperty() {
	
	}
	/**
 * @description Gets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
*/
	getDeltaTolerance() {
	
	}
	/**
 * @description Return Value:
*/
	getFilename() {
	
	}
	/**
 * @description Return Value:
*/
	getHideSecondaryProperties() {
	
	}
	/**
 * @description Gets the type of mirroring to apply.
*/
	getMorphMirroring() {
	
	}
	/**
 * @description Return Value:
*/
	getMorphName() {
	
	}
	/**
 * @description Return Value:
*/
	getOverwriteExisting() {
	
	}
	/**
 * @description Return Value:
*/
	getPreserveExistingDeltas() {
	
	}
	/**
 * @description Return Value:
*/
	getPropertyGroupPath() {
	
	}
	/**
 * @description Return Value:
*/
	getReverseDeformations() {
	
	}
	/**
 * @description Return Value:
*/
	getReverseDeformationsPose() {
	
	}
	/**
 * @description Parameter(s):
*/
	morphAlreadyExists(node:DzNode):Boolean {
	
	}
	/**
 * @description Reads common object settings from a configuration file (*.dsx).
*/
	readObjectCommonSettingsFromConfigFile(filename:String):Boolean {
	
	}
	/**
 * @description Reads the settings of the first object in a configuration file (*.dsx).
*/
	readObjectSettingsFromConfigFile(filename:String, filePath:String):Boolean {
	
	}
	/**
 * @description Saves object settings to a configuration file (*.dsx).
*/
	saveObjectSettingsToConfigFile(filename:String, projectPath:String, saveProjectRelative:Boolean):Boolean {
	
	}
	/**
 * @description Sets the strength to use for attenuating the effect of the morph on the vertices that reside along the boundary of the current geometric selection.
*/
	setAttenuateEdgeStrength(val:Number):Number {
	
	}
	/**
 * @description Sets the path to the map used to attenuate the effect of the morph.
*/
	setAttenuateMapPath(mapPath:String):String {
	
	}
	/**
 * @description Sets the strength to apply the map used to attenuate the effect of the morph.
*/
	setAttenuateStrength(val:Number):Number {
	
	}
	/**
 * @description Sets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
*/
	setCleanUpOrphans(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the node that the control property will be located on.
*/
	setControlNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Sets the property that will serve as the additional control property for the morph(s) created by this loader.
*/
	setControlProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * @description Sets the custom label that will be used for secondary (non-control) properties.
*/
	setControlPropertyCustomLabel(label:String):String {
	
	}
	/**
 * @description Sets the custom value for creating ERC links to the control property.
*/
	setControlPropertyERCCustomValue(val:Number):Number {
	
	}
	/**
 * @description Sets the ERC link type to use when connecting secondary properties to the control property.
*/
	setControlPropertyERCType(type:DzERCLink.ERCType):DzERCLink {
	
	}
	/**
 * @description Sets whether or not a custom value will be used for the ERC links to the control property.
*/
	setControlPropertyERCUseCustomValue(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not a custom label will be used for the secondary (non-control) properties.
*/
	setControlPropertyUseCustomLabel(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the loader will use and create ERC links to an additional control property.
*/
	setCreateControlProperty(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
*/
	setDeltaTolerance(val:Number):Number {
	
	}
	/**
 * @description Sets the file to read the geometry from.
*/
	setFilename(filename:String):String {
	
	}
	/**
 * @description Sets whether or not secondary (non-control) properties are hidden.
*/
	setHideSecondaryProperties(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the mode to load the morph for node.
*/
	setLoadMode(mode:LoadMode, node:DzNode):DzNode {
	
	}
	/**
 * @description Sets the type of mirroring to apply to the morph.
*/
	setMorphMirroring(type:MirroringType):void {
	
	}
	/**
 * @description Sets the name of the morph(s) that will be created by this morph loader.
*/
	setMorphName(name:String):String {
	
	}
	/**
 * @description Sets whether or not to override/replace existing morphs with the same name.
*/
	setOverwriteExisting(mode:OverwriteMode):void {
	
	}
	/**
 * @description Sets whether or not to preserve existing deltas in a morph by the same name.
*/
	setPreserveExistingDeltas(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the property group that morph value properties will be added to.
*/
	setPropertyGroupPath(path:String):String {
	
	}
	/**
 * @description Sets whether or not joint deformations and other modifiers will be reversed before calculating deltas.
*/
	setReverseDeformations(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the path of the pose file to apply to the figure before a morph is loaded.
*/
	setReverseDeformationsPose(filePath:String):String {
	
	}

}
/**
 * @classdesc This class implements a batch of morph loader objects that will be applied to the same node(s).


Since:


 4.9.3.46



Attention:


 This object is provided by the Morph Loader Pro plugin. It is only available when the Morph Loader Pro plugin is activated and enabled.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloaderbatch_dz}*/
class DzMorphLoaderBatch extends QObject {
	/**
 * @description Default Constructor. Creates a morph loader batch that will be applied to the given node.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a morph to the list to load.
*/
	addFromConfigFile(filename:String):String {
	
	}

}
/**
 * @classdesc An asset save filter for saving Morph Support Asset(s) in the DSON format.


See Also:


 Sample: Save Morph Support Asset(s)
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphsupportassetfilter_dz}*/
class DzMorphSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getMultiMediaMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multimediamgr_dz}*/
class DzMultiMediaMgr extends QObject {
	/**
 * @description Export the clip to a video file.
*/
	static exportVideoClip(fileName:String, clip:DzVideoClip, exporterIndex:Number):DzError {
	
	}
	/**
 * @description Return Value:
*/
	static getAudioClipLoadPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getVideoClipSavePath() {
	
	}
	/**
 * @description Import an audio clip from a file.
*/
	static importAudioClip(fileName:String, clip:DzAudioClip, importerIndex:Number):DzError {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multiplyblend_dz}*/
class DzMultiplyBlend extends DzImageBlend {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 Sample: Node Align



Attention:


 This object is provided by the Align pane plugin. It is only available when the Align pane plugin is activated and enabled.



Since:


 4.10.0.122
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodealigner_dz}*/
class DzNodeAligner extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static NoneX;
	/**
 * @description TODO: Add description.
*/
	
static AlignXLefts;
	/**
 * @description TODO: Add description.
*/
	
static AlignXCenters;
	/**
 * @description TODO: Add description.
*/
	
static AlignXOrigins;
	/**
 * @description TODO: Add description.
*/
	
static AlignXRights;
	/**
 * @description TODO: Add description.
*/
	
static StackXLefts;
	/**
 * @description TODO: Add description.
*/
	
static StackXRights;
	/**
 * @description TODO: Add description.
*/
	
static DistributeXLefts;
	/**
 * @description TODO: Add description.
*/
	
static DistributeXCenters;
	/**
 * @description TODO: Add description.
*/
	
static DistributeXOrigins;
	/**
 * @description TODO: Add description.
*/
	
static DistributeXRights;
	/**
 * @description TODO: Add description.
*/
	
static NoneY;
	/**
 * @description TODO: Add description.
*/
	
static AlignYTops;
	/**
 * @description TODO: Add description.
*/
	
static AlignYCenters;
	/**
 * @description TODO: Add description.
*/
	
static AlignYOrigins;
	/**
 * @description TODO: Add description.
*/
	
static AlignYBottoms;
	/**
 * @description TODO: Add description.
*/
	
static StackYTops;
	/**
 * @description TODO: Add description.
*/
	
static StackYBottoms;
	/**
 * @description TODO: Add description.
*/
	
static DistributeYTops;
	/**
 * @description TODO: Add description.
*/
	
static DistributeYCenters;
	/**
 * @description TODO: Add description.
*/
	
static DistributeYOrigins;
	/**
 * @description TODO: Add description.
*/
	
static DistributeYBottoms;
	/**
 * @description TODO: Add description.
*/
	
static NoneZ;
	/**
 * @description TODO: Add description.
*/
	
static AlignZFronts;
	/**
 * @description TODO: Add description.
*/
	
static AlignZCenters;
	/**
 * @description TODO: Add description.
*/
	
static AlignZOrigins;
	/**
 * @description TODO: Add description.
*/
	
static AlignZBacks;
	/**
 * @description TODO: Add description.
*/
	
static StackZFronts;
	/**
 * @description TODO: Add description.
*/
	
static StackZBacks;
	/**
 * @description TODO: Add description.
*/
	
static DistributeZFronts;
	/**
 * @description TODO: Add description.
*/
	
static DistributeZCenters;
	/**
 * @description TODO: Add description.
*/
	
static DistributeZOrigins;
	/**
 * @description TODO: Add description.
*/
	
static DistributeZBacks;
	/**
 * @description TODO: Add description.
*/
	
static UnitsM;
	/**
 * @description TODO: Add description.
*/
	
static UnitsCM;
	/**
 * @description TODO: Add description.
*/
	
static UnitsYD;
	/**
 * @description TODO: Add description.
*/
	
static UnitsFT;
	/**
 * @description TODO: Add description.
*/
	
static UnitsIN;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a node to the list of node to be processed.
*/
	addNode(node:DzNode):DzError {
	
	}

}
/**
 * @classdesc An animatable property whose value is a choice of one of the node objects in the current scene, or none. Instead of tracking a numeric value, this property maintains a pointer to another node in the scene. Use this property when you need an element to track a user-selected scene node; for example, this property could be used in a node to allow the user to select another node in the scene to follow, or it could be used by a modifier that uses a node in the scene to determine how it is applied, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeproperty_dz}*/
class DzNodeProperty extends DzProperty {
	/**
 * @description Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Excludes the given node from becoming the value of this property.
*/
	exclude(node:DzNode):DzNode {
	
	}

}
/**
 * @classdesc Provides a DzComboBox like widget with a custom popup designed for choosing a DzNode.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeselectioncombobox_dz}*/
class DzNodeSelectionComboBox extends DzWidget {
	/**
 * @description Creates a node selection combobox as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget, nodeType="DzNode":String, allowNone=false:Boolean) {
	
	}
	/**
 * @description Clears the selection of any node(s).
*/
	clearNodeSelection() {
	
	}

}
/**
 * @classdesc An asset save filter for saving Figure or Prop Support Assets in the DSON format.


See Also:


 Sample: Save Figure/Prop Support Assets
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodesupportassetfilter_dz}*/
class DzNodeSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getSetNode() {
	
	}

}
/**
 * @classdesc This property tracks both a numeric value and a node value - it is essentially a combination of a DzFloatProperty and a DzNodeProperty in a single property. The main benefit of this is to display the settings to the user as a single parameter, it also provides several conveniences for the programmer in linking the two values together. Currently, this property is used by DzNode to implement the 'Point At' parameter.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericnodeproperty_dz}*/
class DzNumericNodeProperty extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getNode() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericproperty_dz}*/
class DzNumericProperty extends DzProperty {
	/**
 * @description Default - this property is not associated with an axis.
*/
	
static NO_INTEREST;
	/**
 * @description Value is used by an X Axis control.
*/
	
static X_INTEREST;
	/**
 * @description Value is used by an Y Axis control.
*/
	
static Y_INTEREST;
	/**
 * @description Value is used by an Z Axis control.
*/
	
static Z_INTEREST;
	/**
 * @description Value is used by the General Scale control.
*/
	
static ALL_INTEREST;
	/**
 * @description Clear the image map for this property.
*/
	static clearMap() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/object_q}*/
class QObject {
	static objectName:String;
	static name:String;
	/**
 * @description Schedules this object for deletion.
*/
	static deleteLater() {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()

 Silent OBJ Export
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objexporter_dz}*/
class DzObjExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzImportMgr.findImporterByClassName()

 DzImportMgr.findImporter()

 Silent OBJ Import
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objimporter_dz}*/
class DzObjImporter extends DzGeometryImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/offsetmanip_dz}*/
class DzOffsetManip extends DzImageManip {
	xOffset:Number;
	yOffset:Number;
	/**
 * @description Holds the vertical offset.
 * @constructor
*/
	constructor(x=0:Number, y=0:Number) {
	
	}
	/**
 * @description Sets the offset for the image.
*/
	setOffset(x:Number, y:Number):Number {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opacitymanip_dz}*/
class DzOpacityManip extends DzImageManip {
	opacity:Number;
	/**
 * @description Holds the opacity value.
 * @constructor
*/
	constructor(opacity=1.0:Number) {
	
	}
	/**
 * @description Return Value:
*/
	getOpacity() {
	
	}

}
/**
 * @classdesc You can access the global instance of DzOpenGL via the Global.OpenGL variable.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opengl_dz}*/
class DzOpenGL extends QObject {
	/**
 * @description Lowest quality / Best performance. Texture sizes are clamped to a small size or the maximum size supported by the hardware, whichever is less.
*/
	
static OGLLow;
	/**
 * @description Medium quality / Better performance. Texture sizes are clamped to a medium size or the maximum size supported by the hardware, whichever is less.
*/
	
static OGLMed;
	/**
 * @description High quality / Good performance. Texture sizes are clamped to a large size or the maximum size supported by the hardware, whichever is less.
*/
	
static OGLHigh;
	/**
 * @description Best quality / Low performance. Texture sizes are clamped to the maximum size supported by the hardware.
*/
	
static OGLBest;
	/**
 * @description Return Value:
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getBoundingBoxActiveOpacity() {
	
	}

}
/**
 * @classdesc Represents a 3D box by storing two 3D vectors - an upper and lower corner for the box, and a transformation for its orientation.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/orientedbox3_dz}*/
class DzOrientedBox3 extends Object {
	localBox:DzBox3;
	transform:DzMatrix3;
	/**
 * @description Constructor. Creates an uninitialized box with an identity transform - the first point included in an uninitialized box will become the min and max for the box.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QPalette type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/palette}*/
class Palette extends QObject {
	active:active;
	alternateBase:Color;
	background:Color;
	base:Color;
	brightText:Color;
	button:Color;
	buttonText:Color;
	dark:Color;
	disabled:disabled;
	foreground:Color;
	highlight:Color;
	highlightedText:Color;
	inactive:inactive;
	light:Color;
	link:Color;
	linkVisited:Color;
	mid:Color;
	midlight:Color;
	shadow:Color;
	text:Color;
	toolTipBase:Color;
	toolTipText:Color;
	window:Color;
	windowText:Color;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor(active:Palette, disabled:Palette, inactive:Palette) {
	
	}

}
/**
 * @classdesc A "Pane" is the application's implementation of a persistent non-modal set of closely related widgets that can be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized by the end-user.


Each pane has a label that is attached to the outer perimeter of the pane; whether the label appears as a tab/button/etc. to the user depends on the "style" that they currently has applied. A pane's label should briefly describe the concept (product, service, etc.) presented to the user within the pane.


Actions performed by the user that are closely related to the concept of a given pane, but do not warrant a persitent widget within the pane itself, or are more advanced in nature, should be considered for placement with the pane's option menu.


A pane is only ever displayed to the user within a DzPaneGroup; this is what gives the pane its ability to be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized. A pane can only ever exist within one DzPaneGroup at a time.


Panes are singletons; there is only one instance of a given DzPane subclass. Panes are registered with DzPaneMgr and are available to access and modifiy via script. Use DzPaneMgr.findPane() to obtain a pointer to the single instance of the subclass, using its classname.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pane_dz}*/
class DzPane extends QWidget {
	/**
 * @description Sub classes must reimplement this function to generate a default options menu if they have one. This function is called when the pane is loaded for the first time or the interface is reset. Otherwise, the option menus are loaded from the user's interface settings file.
*/
	static buildOptionsMenu(menu:DzActionMenu):DzActionMenu {
	
	}

}
/**
 * @classdesc The dockable tabbed pane that is used to organize panes in the DAZ Studio interface.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panegroup_dz}*/
class DzPaneGroup extends DzDockWindow {
	/**
 * @description Return Value:
*/
	static getCurrentPane() {
	
	}

}
/**
 * @classdesc There is only one instance of the pane manager object in DAZ Studio. You can get the pane manager by calling DzMainWindow.getPaneMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panemgr_dz}*/
class DzPaneMgr extends QWidget {
	/**
 * @description Not docked.
*/
	
static NO_DOCKING;
	/**
 * @description Docked on the left side.
*/
	
static DOCK_LEFT;
	/**
 * @description Docked on the top.
*/
	
static DOCK_TOP;
	/**
 * @description Docked on the right side.
*/
	
static DOCK_RIGHT;
	/**
 * @description Docked on the bottom.
*/
	
static DOCK_BOTTOM;
	/**
 * @description Adds the activity layout to the list of layouts.
*/
	static addActivityLayout(layout:DzActivityLayout):DzActivityLayout {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panesettings_dz}*/
class DzPaneSettings extends DzSettings {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This class is used to contain all assets related to a parent product.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/parentproductcontainer_dz}*/
class DzParentProductContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description Attempts to update the child containers of this container.
*/
	static updateChildren() {
	
	}

}
/**
 * @classdesc A DzPathComboBox provides a DzComboBox like widget with a popup that is designed for choosing a path.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pathcombobox_dz}*/
class DzPathComboBox extends DzWidget {
	/**
 * @description Instantiates DzPathComboBox
 * @constructor
*/
	constructor(parent:DzWidget, useMarkableView=false:Boolean) {
	
	}
	/**
 * @description Clear selection
*/
	clearSelection() {
	
	}

}
/**
 * @classdesc Persistant menus are registered with the DzActionMgr singleton and are available to access and modifiy via script.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/persistentmenu_dz}*/
class DzPersistentMenu extends QObject {
	/**
 * @description Clear the active widget for this persistent menu.
*/
	static clearActiveWgt() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QPixmap type used in the DAZ Studio SDK.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pixmap}*/
class Pixmap extends QObject {
	depth:Number;
	height:Number;
	rect:Rect;
	size:Size;
	width:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(pixmap:Pixmap) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(filename:String) {
	
	}
	/**
 * @description Fills the pixmap with color.
*/
	fill(color:Color):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	fromImage(image:Image):Image {
	
	}
	/**
 * @description Gets whether or not the pixmap is Null.
*/
	isNull() {
	
	}
	/**
 * @description Loads data into the pixmap from a file.
*/
	load(filename:String):String {
	
	}
	/**
 * @description Loads data into the pixmap from a byte array using the specified format.
*/
	loadFromData(data:ByteArray, format:String):Boolean {
	
	}
	/**
 * @description Resizes the pixmap.
*/
	resize(width:Number, height:Number):Number {
	
	}
	/**
 * @description Resizes the pixmap.
*/
	resize(size:Size):Size {
	
	}
	/**
 * @description Saves the pixmap to a file.
*/
	save(filename:String):String {
	
	}
	/**
 * @description Return Value:
*/
	toImage() {
	
	}

}
/**
 * @classdesc This class provides startup and shutdown functionality for DAZ Studio plug-ins and maintains the list of class types exported by the plug-in.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/plugin_dz}*/
class DzPlugin extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static Loaded;
	/**
 * @description TODO: Add description.
*/
	
static RequiresRestart;
	/**
 * @description TODO: Add description.
*/
	
static ManuallyDisabled;
	/**
 * @description TODO: Add description.
*/
	
static EvaluationInvalid;
	/**
 * @description TODO: Add description.
*/
	
static Failed;
	/**
 * @description Return Value:
*/
	static getAuthor() {
	
	}

}
/**
 * @classdesc There is only one instance of the plugin manager object in DAZ Studio. You can get the plugin manager by calling DzApp.getPluginMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pluginmgr_dz}*/
class DzPluginMgr extends QObject {
	/**
 * @description Shows the "About Installed Plugins" dialog.
*/
	static doAboutPluginsDlg() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QPoint type used in the DAZ Studio SDK. A Point object is a two dimensional representation of a x (horizontal) and y (vertical) position.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/point}*/
class Point extends QObject {
	x:Number;
	y:Number;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(pnt:Point) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(x:Number, y:Number) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pointlight_dz}*/
class DzPointLight extends DzDistantLight {
	/**
 * @description Default Constructor. Creates a new point light.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getDecay() {
	
	}

}
/**
 * @classdesc A DzPopupMenu provides a popup menu.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/popupmenu_dz}*/
class DzPopupMenu extends DzWidget {
	checkable:Boolean;
	tearOff:Boolean;
	/**
 * @description Creates a popup menu as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Changes the text of the menu item id to text. If the item has an icon, the icon remains unchanged.
*/
	changeItem(id:Number, text:String):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	changeItem(id:Number, pixmap:pixmap):Number {
	
	}
	/**
 * @description Removes all menu items.
*/
	clear() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	connectItem(id:Number, receiver:Object, member:String):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	disconnectItem(id:Number, receiver:Object, member:String):Boolean {
	
	}
	/**
 * @description Executes this popup synchronously. In most situations you'll want to specify the position yourself, for example at the current mouse position.
*/
	exec() {
	
	}
	/**
 * @description Executes this popup synchronously. Opens the popup menu so that the item number indexAtPoint will be at the specified global position pos.
*/
	exec(pos:Point, indexAtPoint:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	idAt(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	idAt(pos:Point):Number {
	
	}
	/**
 * @description Inserts submenu popup, labeled  text, with an optional id, and an optional index position.
*/
	insertItem(text:String, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	}
	/**
 * @description Inserts a menu item with the Pixmappixmap, with an optional id, and an optional index position.
*/
	insertItem(pixmap:Pixmap, id:Number, index:Number):Number {
	
	}
	/**
 * @description Inserts submenu popup with the Pixmappixmap, with an optional id, and an optional index position.
*/
	insertItem(pixmap:Pixmap, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	}
	/**
 * @description Inserts a menu item labeled text, with an optional id, and an optional index position.
*/
	insertItem(text:String, id:Number, index:Number):Number {
	
	}
	/**
 * @description Inserts a separator at position index, and returns the menu identifier number allocated to it. The separator becomes the last menu item if index is negative.
*/
	insertSeparator(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	isItemChecked(id:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isItemEnabled(id:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isItemVisible(id:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	itemParameter(id:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	pixmap(id:Number):Pixmap {
	
	}
	/**
 * @description Displays the popup menu so that the item number indexAtPoint will be at the specified global position pos.
*/
	popup(pos:Point, indexAtPoint:Number):Point {
	
	}
	/**
 * @description Removes the menu item that has the identifier id.
*/
	removeItem(id:Number):Number {
	
	}
	/**
 * @description Removes the menu item at position index.
*/
	removeItemAt(index:Number):Number {
	
	}
	/**
 * @description Sets the currently active item to id and repaints as necessary.
*/
	setActiveItem(id:Number):Number {
	
	}
	/**
 * @description If check is true, checks the menu item with id id, otherwise unchecks the menu item with id id. Calls DzPopupMenu.setCheckable( true ) if necessary.
*/
	setItemChecked(id:Number, check:Boolean):Number {
	
	}
	/**
 * @description If enable is true, enables the menu item with identifier id, otherwise disables the menu item with identifier id.
*/
	setItemEnabled(id:Number, enable:Boolean):Number {
	
	}
	/**
 * @description Sets the parameter of the activation signal of item id to param.
*/
	setItemParameter(id:Number, param:Number):Boolean {
	
	}
	/**
 * @description If visible is true, shows the menu item with id id, otherwise hides the menu item with id id.
*/
	setItemVisible(id:Number, visible:Boolean):Number {
	
	}
	/**
 * @description Sets text as What's This help for the menu item with identifier id.
*/
	setWhatsThis(id:Number, text:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	text(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	whatsThis(id:Number):String {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Pose Preset in the DSON format.


See Also:


 Sample: Save a Pose Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/poseassetfilter_dz}*/
class DzPoseAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzProperty
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/presentation_dz}*/
class DzPresentation extends DzBase {
	autoFitBase:String;
	colorA:Color;
	colorB:Color;
	description:String;
	iconLarge:String;
	iconSmall:String;
	label:String;
	preferredBase:String;
	type:String;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See the render to rib sample (line #440+), to see this class in action.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/process_dz}*/
class DzProcess extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @constructor
*/
	constructor(args:Array) {
	
	}
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @constructor
*/
	constructor(arg0:String) {
	
	}
	/**
 * @description Return Value:
*/
	canReadLineStderr() {
	
	}
	/**
 * @description Return Value:
*/
	canReadLineStdout() {
	
	}
	/**
 * @description Closes the process' standard input and deletes any pending data that hasn't been written to standard input.
*/
	closeStdin() {
	
	}
	/**
 * @description Terminates the process.
*/
	kill() {
	
	}
	/**
 * @description Attempts to run the process, writing buffer to the process' standard input. Standard input is closed if all of the data in buffer is written to it. If envis specified, the values in the Array [of strings] are interpreted as environment settings in the form VARIABLE=VALUE, and the process is started with these environment settings. If envis not specifiied, the process is started with the same environment settings as the starting process.
*/
	launch(buffer:String, env:Array):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	readLineStderr() {
	
	}
	/**
 * @description Return Value:
*/
	readLineStdout() {
	
	}
	/**
 * @description Reads the data that the process has written to standard error. When new data is written, the readyReadStderr() signal is emitted.
*/
	readStderr() {
	
	}
	/**
 * @description Reads the data that the process has written to standard output. When new data is written, the readyReadStdout() signal is emitted.
*/
	readStdout() {
	
	}
	/**
 * @description Attempts to run the process for the program and arguments specified with the arguments property or as specified in the constructor. If envis specified, the values in the Array [of strings] are interpreted as environment settings in the form VARIABLE=VALUE, and the process is started with these environment settings. If envis not specifiied, the process is started with the same environment settings as the starting process.
*/
	start(env:Array):Boolean {
	
	}
	/**
 * @description Attempts to terminate the process.
*/
	tryTerminate() {
	
	}
	/**
 * @description Writes buffer to standard input. The process may, or may not, read the data. The wroteToStdin() signal is emitted once all data in buffer has been written to the process.
*/
	writeToStdin(buffer:String):String {
	
	}

}
/**
 * @classdesc The "Product" container type represents a collection of assets (and supporting files/metadata) that are presented as a single entity to the end-user. Each product is assigned a Globally Unique Idendtifier (GUID) that is used to identify that entity within the content ecosystem. Once a GUID has been assigned to a product (at creation), it does not (and should not) change.


While nearly all of the information that defines a product can be replicated into another, for logistical reasons a GUID can only be associated with one "Store" (source) at any single moment in its lifetime. This means that if more than one content package containing metadata that defines a given GUID is installed by an end-user, the last package installed will define the product in the database.


By default, all newly created assets are assigned to a "LOCAL USER" product. This product is represented by a GUID consisting entirely of zeros; i.e., "00000000-0000-0000-0000-000000000000"


The "LOCAL USER" product is associated with the "LOCAL USER" store (source); this cannot be modified.


See Also:


 DzAssetMgr.findProductByGuid()

 DzAssetMgr.findProductByStoreToken()

 DzAssetMgr.createProduct()

 DzAssetMgr.createProductFromContainer()

 DzAssetMgr.createProductFromAssets()

 DzAssetMgr.createStore()

 DzAsset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productassetcontainer_dz}*/
class DzProductAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description Metadata that is created, owned and maintained by the user.
*/
	
static User;
	/**
 * @description Metadata that is created, owned and maintained by the vendor (originating source).
*/
	
static Vendor;
	/**
 * @description Metadata that is created, owned and maintained by the vendor (originating source) and/or the user.
*/
	
static UserAndVendor;
	/**
 * @description Cancels any pending cloud operation on the product, if any.
*/
	static cancelFromCloud() {
	
	}
	/**
 * @description Sets the product as belonging to the default group identifier; 0.
*/
	static clearGroup() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getCategories(metaType:ProductMetadataType, installedAssets:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	static getIconSize() {
	
	}
	/**
 * @description Return Value:
*/
	static getImage() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getMetadataXML(metaType:ProductMetadataType):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getMetadataXMLPath(userData:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	static getRealtiveInstallPath() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSupportFiles(forceRefresh:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	static getURL() {
	
	}
	/**
 * @description Installs a product from the cloud if it is not currently installed. The user will be prompted to authenticate if necessary.
*/
	static installFromCloud() {
	
	}
	/**
 * @description Return Value:
*/
	static isGroup(group:Number):Boolean {
	
	}
	/**
 * @description Loads the default icon for this product.
*/
	static loadDefaultIcon() {
	
	}
	/**
 * @description Causes the product image to be loaded.
*/
	static loadProductImage() {
	
	}
	/**
 * @description Pushes the metadata information into the database.
*/
	static pushMetadata() {
	
	}
	/**
 * @description Sets the icon size for this product container.
*/
	static setIconSize(size:Size):Size {
	
	}
	/**
 * @description Sets the image that will be used to draw the icon for this product.
*/
	static setImage(img:Image):Image {
	
	}
	/**
 * @description Sets the URL for this asset container
*/
	static setURL(url:String):String {
	
	}
	/**
 * @description Uninstalls the product if it is currently installed.
*/
	static uninstall() {
	
	}
	/**
 * @description Uninstalls the product if it is currently installed.
*/
	static uninstallFromCloud() {
	
	}
	/**
 * @description Updates the product if no other operations are currently being performed on it. The user will be prompted to authenticate if necessary.
*/
	static updateFromCloud() {
	
	}
	/**
 * @description Updates the metadata for this product. The user will be prompted to authenticate if necessary.
*/
	static updateMetaDataFromCloud(force:Boolean):Boolean {
	
	}

}
/**
 * @classdesc This container type does not directly support assets. The primary purpose of this container type is to collect results returned by a database query for products.


See Also:


 DzAssetMgr.searchForProducts()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productholdercontainer_dz}*/
class DzProductHolderContainer extends DzTopLevelAssetContainer, DzRefCountedItem {
	/**
 * @description Attempts to insert the given container as a child to this container.
*/
	static insertChildProductContainer(container:DzProductAssetContainer):Boolean {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Properties Preset in the DSON format.


See Also:


 Sample: Save a Properties Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertiesassetfilter_dz}*/
class DzPropertiesAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is the base class for all properties that are owned or controlled by Elements. Properties can be keyable or not.


See Also:


 DzElement
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/property_dz}*/
class DzProperty extends DzBase {
	/**
 * @description Best for saving/loading; includes raw value; sets without adjusting.
*/
	
static Standard;
	/**
 * @description Include the default value.
*/
	
static IncludeDefault;
	/**
 * @description Includes the value instead of the raw value.
*/
	
static CurrentValue;
	/**
 * @description Best for setting.
*/
	
static AdjustValue;
	/**
 * @description Excludes images.
*/
	
static SkipImages;
	/**
 * @description Adds a value to a settings.
*/
	static addValueToSettings(tm:DzTime, settings:DzSettings, flags:PropertyValueSettingsFlags):DzTime {
	
	}
	/**
 * @description Adds a value to a settings.
*/
	static addValueToSettings(settings:DzSettings, flags:PropertyValueSettingsFlags):DzSettings {
	
	}
	/**
 * @description Creates an undo item for the property.
*/
	static beginEdit() {
	
	}
	/**
 * @description Parameter(s):
*/
	static buildNameUriToRoot(rootNode:DzNode):DzUri {
	
	}
	/**
 * @description Return Value:
*/
	static canAnimate() {
	
	}
	/**
 * @description Return Value:
*/
	static canAutoFollow() {
	
	}
	/**
 * @description Finish the edit operation but cancel any changes.
*/
	static cancelEdit() {
	
	}
	/**
 * @description Clears the region associated with this property.
*/
	static clearRegion(preservePath:Boolean):Boolean {
	
	}
	/**
 * @description Copies the value(s) of the given property into this property.
*/
	static copyFrom(prop:DzProperty):void {
	
	}
	/**
 * @description Copies the value(s) of the property to a 'clipboard' so that they may be saved and applied (pasted) to another property; or to the same property.
*/
	static copyToClipboard() {
	
	}
	/**
 * @description Creates a new property that forwards all edits of its values to the property it is an alias of.
*/
	static createAlias() {
	
	}
	/**
 * @description Return Value:
*/
	static currentValueIsDefaultValue() {
	
	}
	/**
 * @description Return Value:
*/
	static currentValueIsDefinitionValue() {
	
	}
	/**
 * @description Deletes all keys on this property.
*/
	static deleteAllKeys() {
	
	}
	/**
 * @description Clears key values within the given range, including the endpoints.
*/
	static deleteKeys(interval:DzTimeRange):Number {
	
	}
	/**
 * @description Deletes all keys within a specified range.
*/
	static deleteKeys(start:Number, end:Number):Number {
	
	}
	/**
 * @description Deletes all selected keys.
*/
	static deleteSelectedKeys() {
	
	}
	/**
 * @description Searches node for a property that matches the name of this property.
*/
	static findMatchingProperty(node:DzNode):DzNode {
	
	}
	/**
 * @description Finalizes the undo item and pushes it on to the undo stack.
*/
	static finishEdit() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getAlias(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	static getAliasTarget() {
	
	}
	/**
 * @description Populates the given settings object with the attributes of this property.
*/
	static getAttributes(settings:DzPropertySettings):DzPropertySettings {
	
	}
	/**
 * @description Return Value:
*/
	static getAutoFollowTargetUri() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getController(idx:Number):DzController {
	
	}
	/**
 * @description Return Value:
*/
	static getControllerList() {
	
	}
	/**
 * @description Return Value:
*/
	static getGroup() {
	
	}
	/**
 * @description Return Value:
*/
	static getIndexOfSlaveControllers(cntrl:DzController):Number {
	
	}
	/**
 * @description Return Value:
*/
	static getKeyRange() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getKeyTime(i:Number):DzTime {
	
	}
	/**
 * @description Return Value:
*/
	static getLabel() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumAliases() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumControllers() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumKeys() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getNumKeys(range:DzTimeRange):Number {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedKeys() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSlaveControllers() {
	
	}
	/**
 * @description Return Value:
*/
	static getOwner() {
	
	}
	/**
 * @description Return Value:
*/
	static getPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getPresentation() {
	
	}
	/**
 * @description Return Value:
*/
	static getRegion() {
	
	}
	/**
 * @description Return Value:
*/
	static getSelectedKeyRange() {
	
	}
	/**
 * @description Return Value:
*/
	static getSlaveController(idx:Number):DzController {
	
	}
	/**
 * @description Return Value:
*/
	static getSlaveControllerList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getWidgetClass(styled:Boolean):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getWidgetClassOverride(styled:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	static hasControllers() {
	
	}
	/**
 * @description Return Value:
*/
	static hasKeys() {
	
	}
	/**
 * @description Return Value:
*/
	static hasSlaveControllers() {
	
	}
	/**
 * @description Parameter(s):
*/
	static hasWidgetClassOverride(styled:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isAlias() {
	
	}
	/**
 * @description Parameter(s):
*/
	static isCombinable(prop:DzProperty):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isDynamicallyAutoFollow() {
	
	}
	/**
 * @description Return Value:
*/
	static isDynamicallyHidden() {
	
	}
	/**
 * @description Return Value:
*/
	static isEditing() {
	
	}
	/**
 * @description Return Value:
*/
	static isFavorite() {
	
	}
	/**
 * @description Return Value:
*/
	static isGlobalFavorite() {
	
	}
	/**
 * @description Return Value:
*/
	static isHidden() {
	
	}
	/**
 * @description Parameter(s):
*/
	static isKeySelected(i:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isLocked() {
	
	}
	/**
 * @description Return Value:
*/
	static isManipulator() {
	
	}
	/**
 * @description Return Value:
*/
	static isNew() {
	
	}
	/**
 * @description Return Value:
*/
	static isNumeric() {
	
	}
	/**
 * @description Return Value:
*/
	static isOverridingControllers() {
	
	}
	/**
 * @description Return Value:
*/
	static isPrivateProperty() {
	
	}
	/**
 * @description Return Value:
*/
	static isRigProperty() {
	
	}
	/**
 * @description Return Value:
*/
	static isSelected() {
	
	}
	/**
 * @description Return Value:
*/
	static isUserProperty() {
	
	}
	/**
 * @description Locks/Unlocks this property. When locked, a property will not accept new key values or changes to current key values.
*/
	static lock(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Marks the asset as being modified.
*/
	static modifyAsset(newUri:DzUri):Boolean {
	
	}
	/**
 * @description Marks the asset as being modified.
*/
	static modifyAsset() {
	
	}
	/**
 * @description Moves the controller at curIdx to newIdx
*/
	static moveControllerToIndex(curIdx:Number, newIdx:Number):Boolean {
	
	}
	/**
 * @description Moves the controller ctrl to location newIdx
*/
	static moveControllerToIndex(ctrl:DzController, newIdx:Number):Boolean {
	
	}
	/**
 * @description Creates a copy of this property. The property will not have controllers, an owner, be in a region, or be linked.
*/
	static propertyDuplicate() {
	
	}
	/**
 * @description Return Value:
*/
	static rawValueIsDefinitionValue() {
	
	}
	/**
 * @description Removes all controllers from this property.
*/
	static removeAllControllers() {
	
	}
	/**
 * @description Removes the given controller from this property.
*/
	static removeController(ctrl:DzController):DzController {
	
	}
	/**
 * @description Removes the controller at the given index from this property.
*/
	static removeController(idx:Number):Number {
	
	}
	/**
 * @description Removes the controller that references the given property.
*/
	static removeController(prop:DzProperty):void {
	
	}
	/**
 * @description Select or deselect all keys.
*/
	static selectAllKeys(onOff:Boolean):Number {
	
	}
	/**
 * @description Selects/deselects the i'th key.
*/
	static selectKey(i:Number, onOff:Boolean):Number {
	
	}
	/**
 * @description Sets the selection state of any keys in the given range.
*/
	static selectKeys(range:DzTimeRange, onOff:Boolean):Number {
	
	}
	/**
 * @description Sets attributes for this property. "UserProperty" and "RigProperty" attributes are not copied from the settings unless a bool setting of "ForceSetUser" and/or "ForceSetRig" is set on the property settings object respectively.
*/
	static setAttributes(settings:DzPropertySettings):DzPropertySettings {
	
	}
	/**
 * @description Sets a path to locate the property on the follow target to follow.
*/
	static setAutoFollowTargetUri(path:DzUri):DzUri {
	
	}
	/**
 * @description Sets whether this property is animatable.
*/
	static setCanAnimate(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the property can automatically follow properties on a following figure.
*/
	static setCanAutoFollow(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not this property should [temporarily] auto-follow.
*/
	static setDynamicallyAutoFollow(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not this property should be [temporarily] hidden in the interfacee.
*/
	static setDynamicallyHidden(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not this property is hidden in the interface.
*/
	static setHidden(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the property is a favorite.
*/
	static setIsFavorite(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the property is a global favorite.
*/
	static setIsGlobalFavorite(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the property is one that will cause manipulation updates of the object in the viewport.
*/
	static setIsManipulator(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether this property is a rigging property.
*/
	static setIsRigProperty(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether this property is a user property (i.e., can be deleted by the user).
*/
	static setIsUserProperty(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets the label that the user sees in the interface for this property.
*/
	static setLabel(label:String):String {
	
	}
	/**
 * @description Sets whether or not the property is marked new.
*/
	static setNew(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not this property will override its controllers.
*/
	static setOverrideControllers(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the group that this property belongs to.
*/
	static setPath(path:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static setPresentation(pres:DzPresentation):DzPresentation {
	
	}
	/**
 * @description Parameter(s):
*/
	static setRegion(reg:geometryregion_dz):void {
	
	}
	/**
 * @description Sets whether or not the property is selected.
*/
	static setSelected(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the value using settings.
*/
	static setValueFromSettings(settings:DzSettings, flags:PropertyValueSettingsFlags):DzSettings {
	
	}
	/**
 * @description Sets the value using settings.
*/
	static setValueFromSettings(tm:DzTime, settings:DzSettings, flags:PropertyValueSettingsFlags):DzTime {
	
	}
	/**
 * @description Sets the name of the widget class to override the default widget class for this property.
*/
	static setWidgetClassOverride(styledWgtClassName:String, wgtClassName:String):DzError {
	
	}

}
/**
 * @classdesc DzPropertyGroup objects are all owned and managed by DzElement objects. Do not create property groups yourself - they are automatically created as needed when you assign individual properties to a group. To iterate through the property groups for an element, use DzElement.getPropertyGroups() to get the property group tree that the element's properties are grouped in.

// Create a new property
oProperty = new DzFloatProperty( "MyDeformer Control", true, false );
 
// Set the path of the property - this moves the property to the group corresponding
// to the given path, creating groups if necessary.
oProperty.setPath( "/Defomers/MyDeformerGroup" );

See Also:


 DzPropertyGroupTree
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygroup_dz}*/
class DzPropertyGroup extends DzBase {
	/**
 * @description Parameter(s):
*/
	static findChild(name:String):String {
	
	}

}
/**
 * @classdesc See Also:


 DzElement
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygrouptree_dz}*/
class DzPropertyGroupTree extends DzBase {
	/**
 * @description Parameter(s):
*/
	static findChild(name:String):DzPropertyGroup {
	
	}

}
/**
 * @classdesc Provides a DzComboBox like widget with a custom popup designed for choosing a DzProperty.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertyselectioncombobox_dz}*/
class DzPropertySelectionComboBox extends DzWidget {
	/**
 * @description Creates a property selection combobox as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Clears the selection of any properties.
*/
	clearPropertySelection() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertysettings_dz}*/
class DzPropertySettings extends DzSettings {
	/**
 * @description Default Constructor - creates an empty set of options
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Puppeteer Preset in the DSON format.


See Also:


 Sample: Save a Puppeteer Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/puppeteerassetfilter_dz}*/
class DzPuppeteerAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pushbutton_dz}*/
class DzPushButton extends DzButton {
	/**
 * @description Deprecated
*/
	
static Off;
	/**
 * @description Deprecated
*/
	
static NoChange;
	/**
 * @description Deprecated
*/
	
static On;
	/**
 * @description Deprecated
*/
	
static SingleShot;
	/**
 * @description Deprecated
*/
	
static Toggle;
	/**
 * @description Deprecated
*/
	
static Tristate;
	/**
 * @description TODO: Add description.
*/
	
static BCommand;
	/**
 * @description The button is drawn as a typical Push Button.
*/
	
static BTool;
	/**
 * @description The button is drawn as a typical Tool Button.
*/
	
static BDefault;
	/**
 * @description The button is drawn as a Default Push Button.
*/
	
static BBasic;
	/**
 * @description The button is drawn with the style's Button Bevel.
*/
	
static BNoFrame;
	/**
 * @description The button is drawn without a frame. The button is drawn with a custom style.
*/
	
static BCustom;
	/**
 * @description Holds whether or not the button will be sized based on the size of its icon (if any). If true, this overrides iconMetric.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Sets whether or not the button is a toggle button.
*/
	setCheckable(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	setToggleButton(yesNo:Boolean):Boolean {
	
	}

}
/**
 * @classdesc Class for importing files in Poser formats; .pz3, *.pz2, *.cr2, *.lt2, *.cm2, *.pp2, *.fc2, *.hd2, *.hr2, *.mc6, .pzz, *.p2z, *.crz, *.ltz, *.cmz, *.ppz, *.fcz, *.hdz, *.hrz, *.mcz


See Also:


 DzImportMgr.findImporterByClassName()

 DzImportMgr.findImporter()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pz3importer_dz}*/
class DzPZ3Importer extends DzImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/quat_dz}*/
class DzQuat extends Object {
	w:Number;
	x:Number;
	y:Number;
	z:Number;
	/**
 * @description Default Constructor. Creates an identity quaternion.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(quat:DzQuat) {
	
	}
	/**
 * @description Initialize with a rotation matrix.
 * @constructor
*/
	constructor(mtx:DzMatrix3) {
	
	}
	/**
 * @description Initialize with a rotation matrix.
 * @constructor
*/
	constructor(mtx:DzMatrix4) {
	
	}
	/**
 * @description Initialize with an Euler angle rotation.
 * @constructor
*/
	constructor(order:DzRotationOrder, angles:DzVec3) {
	
	}
	/**
 * @description Initialize with a rotation around an axis of the given angle (in radians).
 * @constructor
*/
	constructor(axis:DzVec3, radians:Number) {
	
	}
	/**
 * @description Initialize with 4-component quaternion.
 * @constructor
*/
	constructor(x:Number, y:Number, z:Number, w:Number, normalize=true:Boolean) {
	
	}
	/**
 * @description Parameter(s):
*/
	equals(quat:DzQuat, tolerance:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getAngleOfRotation() {
	
	}
	/**
 * @description Return Value:
*/
	getAxisOfRotation() {
	
	}
	/**
 * @description Return Value:
*/
	getValue(axis1:Number, axis2:Number, axis3:Number):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getXAxis() {
	
	}
	/**
 * @description Return Value:
*/
	getYAxis() {
	
	}
	/**
 * @description Return Value:
*/
	getZAxis() {
	
	}
	/**
 * @description Return Value:
*/
	inverse() {
	
	}
	/**
 * @description Changes a rotation to be its inverse.
*/
	invert() {
	
	}
	/**
 * @description Return Value:
*/
	isIdentity() {
	
	}
	/**
 * @description Makes sure that this rotation lies on the same side of the hypersphere as the one given. If not, it is altered to do so.
*/
	makeClosest(quat:DzQuat):void {
	
	}
	/**
 * @description Sets the quaternion to the identity quaternion. Zero this rotation.
*/
	makeIdentity() {
	
	}
	/**
 * @description Return Value:
*/
	multiply(quat:DzQuat):void {
	
	}
	/**
 * @description Multiplies the given vector by the matrix of this rotation. Vector is forced to unit length.
*/
	multVec(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Normalizes a rotation quaternion to unit 4D length
*/
	normalize() {
	
	}
	/**
 * @description Keep the axis the same. Multiply the angle of rotation by the amount 'scaleFactor'
*/
	scaleAngle(val:Number):Number {
	
	}
	/**
 * @description Sets the value to a rotation of radians around one of the primary axes (axis == 0:x, 1:y, 2:z)
*/
	setValue(axis:Number, radians:Number):Number {
	
	}
	/**
 * @description Sets the quaternion to an Euler rotation of angles around each axis given the rotation order (axis1, axis2, axis3) where axis == 1:x, 2:y, 3:z.
*/
	setValue(axis1:Number, axis2:Number, axis3:Number, angles:DzVec3):Number {
	
	}
	/**
 * @description Sets the value based on the angle and axis of rotation.
*/
	setValue(axis:DzVec3, radians:Number):DzVec3 {
	
	}
	/**
 * @description Sets the values of this quaternion.
*/
	setValue(x:Number, y:Number, z:Number, w:Number, normalize:Boolean):Number {
	
	}
	/**
 * @description Preforms spherical linear interpolation between two quaternions.
*/
	slerp(rot0:DzQuat, rot1:DzQuat, t:Number):Number {
	
	}

}
/**
 * @classdesc DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").


The easiest way to implement a "one of many" type choice is to create radio buttons as children of a DzButtonGroup.


Example:

// Create a new dialog
var wDlg = new DzDialog;
wDlg.caption = "DzRadioButton Example";
 
// Create a layout for the dialog
var wLyt = new DzVBoxLayout( wDlg );
wLyt.autoAdd = true;
 
// Create a button group for the options
var wOptBG = new DzVButtonGroup( wDlg );
wOptBG.columns = 1;
 
// Create the options
var wOpt1Btn = new DzRadioButton( wOptBG );
wOpt1Btn.text = "Option 1";
wOpt1Btn.checked = true;
var wOpt2Btn = new DzRadioButton( wOptBG );
wOpt2Btn.text = "Option 2";
var wOpt3Btn = new DzRadioButton( wOptBG );
wOpt3Btn.text = "Option 3";
 
// Launch the dialog
wDlg.exec();
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/radiobutton_dz}*/
class DzRadioButton extends DzButton {
	checked:Boolean;
	/**
 * @description Creates a radio button as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc Instances of DzRefCountedItem are objects that are intended to be shared between multiple owners. Each owner references the object when taking ownership, and dereference the object when it no longer needs the object. The object keeps an internal reference count, and when no other objects are referencing the object (i.e. the reference count reaches zero) the object will delete itself. 


Attention:


 Although this class is not directly exposed to DAZ Script, it is important to document the existence of it - for a proper understanding of the classes that also derive from it.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/refcounteditem_dz}*/
class DzRefCountedItem {

}
/**
 * @classdesc Implements a standard RenderMan interface for the scene to render itself through an offline renderer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderer_dz}*/
class DzRenderer extends DzBase {
	/**
 * @description Compiles the shader at the given path, if necessary, and returns the path to the compiled shader.
*/
	static compileShader(shaderPath:String):String {
	
	}

}
/**
 * @classdesc Many render engines provide a single mode of operation; i.e. the engine is either biased or it is physically based. However, as the development of a render engine evolves, it may provide more than one mode of operation, and each mode may provide a different set of features.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderermode_dz}*/
class DzRendererMode extends QObject {
	/**
 * @description Return Value:
*/
	static hasFeatures() {
	
	}

}
/**
 * @classdesc Render handler classes are responsible for the settings of a render, as well as collecting the final image data passed back from the renderer.


See Also:


 DzRenderer.render(), DzRenderer.customRender(), Dz3DViewport.hardwareRender(), Dz3DViewport.renderThumbnail(), pbufferview_dz.hardwareRender(), pbufferview_dz.renderThumbnail()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderhandler_dz}*/
class DzRenderHandler extends QObject {
	/**
 * @description Return Value:
*/
	static getBackColor() {
	
	}

}
/**
 * @classdesc The manager that is responsible for rendering.


There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getRenderMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendermgr_dz}*/
class DzRenderMgr extends DzBase {
	/**
 * @description The lowest priority.
*/
	
static RENDER_PRIORITY_LOWEST;
	/**
 * @description A low priority.
*/
	
static RENDER_PRIORITY_LOW;
	/**
 * @description A below normal priority.
*/
	
static RENDER_PRIORITY_BELOW_NORMAL;
	/**
 * @description The normal priority.
*/
	
static RENDER_PRIORITY_NORMAL;
	/**
 * @description An above normal priority.
*/
	
static RENDER_PRIORITY_ABOVE_NORMAL;
	/**
 * @description A high priority.
*/
	
static RENDER_PRIORITY_HIGH;
	/**
 * @description The highest priority.
*/
	
static RENDER_PRIORITY_HIGHEST;
	/**
 * @description Adds a directory to the list of known render directories.
*/
	static addRenderDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Interactively and progressively renders the scene with the given render settings, using the given handler from the given camera.
*/
	static doIPRRender(camera:DzCamera, renderHandler:DzRenderHandler, opt:DzRenderOptions):Boolean {
	
	}
	/**
 * @description Renders the scene with the given render settings. If no render settings are specified, then the current application render settings are used.
*/
	static doRender(opt:DzRenderOptions):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static findRenderer(className:String):DzRenderer {
	
	}
	/**
 * @description Return Value:
*/
	static getActiveRenderer() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getBaseAndRelativePath(absPath:String):Array {
	
	}
	/**
 * @description Return Value:
*/
	static getLastSavedRenderPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumRenderDirectories() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumRenderers() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getOptionHelper() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getRenderDirectoryPath(which:Number):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static getRenderElementObjects() {
	
	}
	/**
 * @description Return Value:
*/
	static getRenderer(which:Number):DzRenderer {
	
	}
	/**
 * @description Return Value:
*/
	static getRendererList() {
	
	}
	/**
 * @description Return Value:
*/
	static getRenderOptions() {
	
	}
	/**
 * @description Return Value:
*/
	static hasRender() {
	
	}
	/**
 * @description Return Value:
*/
	static isRendering() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static rebuildRenderElements() {
	
	}
	/**
 * @description Removes all render directories.
*/
	static removeAllRenderDirectories() {
	
	}
	/**
 * @description Removes a directory from the list of known render directories.
*/
	static removeRenderDirectory(directory:String):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static restoreDefaultRenderOptions() {
	
	}
	/**
 * @description Displays a dialog for saving the last render, and saves the image(s)/movie if the user does not cancel.
*/
	static saveLastRender() {
	
	}
	/**
 * @description Sets the active renderer for the application.
*/
	static setActiveRenderer(renderer:DzRenderer):DzRenderer {
	
	}
	/**
 * @description Displays the render options dialog to the user. This only works if the application is being run with the interface on, if the interface is off, this function does nothing.
*/
	static showRenderDialog() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static shutdown() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static stopIPRRender() {
	
	}

}
/**
 * @classdesc The RenderOptions class is responsible for the inclusion/exclusion of certain aspects of a render.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderoptions_dz}*/
class DzRenderOptions extends QObject {
	/**
 * @description Gamma correction off.
*/
	
static GCOff;
	/**
 * @description Gamma correction on.
*/
	
static GCOn;
	/**
 * @description The Box filter.
*/
	
static Box;
	/**
 * @description The triangle filter.
*/
	
static Triangle;
	/**
 * @description The Catmull-Rom filter.
*/
	
static CatmullRom;
	/**
 * @description The Gaussian filter.
*/
	
static Gaussian;
	/**
 * @description The Sinc filter.
*/
	
static Sinc;
	/**
 * @description Renders the image in the active viewport.
*/
	
static ActiveView;
	/**
 * @description Renders the image in a new window.
*/
	
static NewWindow;
	/**
 * @description Renders the image directly to a file.
*/
	
static DirectToFile;
	/**
 * @description A video file created/compressed by system specific video API's.
*/
	
static MovieFile;
	/**
 * @description A series of image files, one for each frame in the movie.
*/
	
static ImageSeries;
	/**
 * @description The shaders/materials for the objects will be used to render.
*/
	
static Normal;
	/**
 * @description The entire scene will be rendered with a cartoon style shader.
*/
	
static Cartoon;
	/**
 * @description Performs a 'Screen Shot' render, grabbing a frame from the interactive OpenGL viewport.
*/
	
static ScreenShot;
	/**
 * @description Performs a 'Fast Time' render, using OpenGL to create a render quality image.
*/
	
static HardwareAssisted;
	/**
 * @description Perfomrs an 'Offline' render with the current RenderMan renderer.
*/
	
static Software;
	/**
 * @description Default Constructor. Initializes render options.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Writes render options via the settings manager.
*/
	applyChanges() {
	
	}
	/**
 * @description Copies the settings from another render options object.
*/
	copyFrom(opt:DzRenderOptions):void {
	
	}
	/**
 * @description Parameter(s):
*/
	gammaCorrectColor(color:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description Sets values for render options found in the stored settings.
*/
	resetOptions() {
	
	}
	/**
 * @description Restores the applications default settings and replaces the stored values.
*/
	restoreDefaultSettings() {
	
	}
	/**
 * @description Set current aspect width for this render. Represented as widthRatio : heightRatio.
*/
	setAspectRatio(widthRatio:Number, heightRatio:Number):Number {
	
	}
	/**
 * @description Sets all options to the default values, but does not affect values of stored/remembered settings. Also, no "changed" signals are emitted when calling this method.
*/
	setToDefaults() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Render Settings Preset in the DSON format.


See Also:


 Sample: Save a Render Settings Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendersettingsassetfilter_dz}*/
class DzRenderSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc A manipulator that rotates an image layer in 90 degree increments.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotatemanip_dz}*/
class DzRotateManip extends DzImageManip {
	/**
 * @description No rotation is performed.
*/
	
static RotNone;
	/**
 * @description A 90 degree (clockwise) rotation is performed.
*/
	
static Rot90;
	/**
 * @description A 180 degree rotation is performed.
*/
	
static Rot180;
	/**
 * @description A 270 degree (clockwise) rotation is performed.
*/
	
static Rot270;
	/**
 * @description Holds the amount of rotation, in degrees.
 * @constructor
*/
	constructor(rot=RotNone:Rotation) {
	
	}
	/**
 * @description Return Value:
*/
	getDegrees() {
	
	}
	/**
 * @description Return Value:
*/
	getRotation() {
	
	}
	/**
 * @description Sets the amount of rotation for the image.
*/
	setDegrees(deg:Number):Number {
	
	}
	/**
 * @description Sets the type of rotation for the image.
*/
	setRotation(rot:Rotation):Rotation {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotationorder_dz}*/
class DzRotationOrder extends Object {
	firstAxis:Number;
	order:Number;
	secondAxis:Number;
	thirdAxis:Number;
	/**
 * @description Default Constructor. Creates a new rotation order and sets it to XYZ by default.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(order:DzRotationOrder) {
	
	}
	/**
 * @description Creates a new rotation order with the given axis order
 * @constructor
*/
	constructor(firstAxis:Number, secondAxis:Number, thirdAxis:Number) {
	
	}
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates a new rotation order with the given enumerated representation.
 * @constructor
*/
	constructor(order:Number) {
	
	}
	/**
 * @description Sets the order of rotation by the given axes.
*/
	setOrder(firstAxis:Number, secondAxis:Number, thirdAxis:Number):Number {
	
	}

}
/**
 * @classdesc This class provides the ability to define RSL shaders for the elements that can use them (DzShaderMaterial, DzShaderLight, DzShaderCamera).


Optimizations:


Two methods in this class that should not be overlooked are setActiveInShadowPass() and setOnlyInShadowPass(), as they can have a significant impact on render times.


In the context of Surface shaders, the data members set by these methods are used to identify whether the shader participates during the shadow [map] pass - the pass for each contributing light in the scene that indicates the use of Deep Shadow Maps for shadows. This affords developers a couple of key benifits:


 One key benifit is the ability to use a single Displacement shader in both the shadow pass as well as the beauty pass. Not only does this alleviate the duplication of code, but by utilizing a Displacement shader for any bump/diplacement operations, rendering times become much faster than performing the same operations in a Surface shader. This is due to the frequency that the shader code is executed. Displacement shaders are evaluated once, at the begining of a pass, and a caching mechanism for the displaced geometry is used as the render progresses. When the same code is placed in a Surface shader, the bump/displacment calculations are performed at every evaluation of the surface.

 Another key benifit is the ability to use a highly optimized Surface shader during the shadow [map] pass, which can have a significant impact on the time required to generate a shadow map - and thus complete the render.



In the context of Light shaders, the data members set by these methods are used to identify whether this shader participates when the DzLight.ShadowType indicates shadowing is used. This affords developers the benifit of being able to use Light shaders that are optimized for either condition.


Property Naming:


Standard Shader and Materials Presets make an effort to copy as much as possible from one element to the next via DzElement.copyFrom(). In order for this to occur, the properties must match in both name and type. Provided below are the names and types used by DzDefaultMaterial, DzLight, DzDistantLight, DzSpotLight and DzPointLight in the event that you would like use properties that will work with the copyFrom() method.


Default Material: 


Default Lights: 


Default Camera:  


Name 


Type 


Name 


Type  


Diffuse Color 


DzColorProperty


Negative Bump 


DzFloatProperty


Diffuse Strength 


DzFloatProperty


Positive Bump 


DzFloatProperty


Glossiness 


DzFloatProperty


Displacement Strength 


DzFloatProperty


Specular Color 


DzColorProperty


Minimum Displacement 


DzFloatProperty


Specular Strength 


DzFloatProperty


Maximum Displacement 


DzFloatProperty


Multiply Specular

 Through Opacity 


DzBoolProperty


Reflection Color 


DzColorProperty


Ambient Color 


DzColorProperty


Reflection Strength 


DzFloatProperty


Ambient Strength 


DzFloatProperty


Refraction Color 


DzColorProperty


Opacity Strength 


DzFloatProperty


Refraction Strength 


DzFloatProperty


Bump Strength 


DzFloatProperty


Index of Refraction 


DzFloatProperty


Name 


Type  


Color 


DzColorProperty


Intensity 


DzFloatProperty


Shadow Type 


DzEnumProperty


Shadow Bias 


DzFloatProperty


Shadow Softness 


DzFloatProperty


Illumination 


DzEnumProperty


Spread Angle 


DzFloatProperty


Name 


Type  


Focal Length 


DzFloatProperty


DOF 


DzBoolProperty


Depth of Field 


DzFloatProperty


Aperature 


DzFloatProperty


Samples:


 rispec_constant_shader_definition - The definition file for the standard RenderMan Constant Surface Shader, that builds the properties displayed to users in the Surfaces tab (Advanced sub tab).

 ./samples/shader swapping/



See Also:


 

 rispec_constant_shader_preset - A [heavily commented] Shader Preset that applies a material definition script (below) for the standard RenderMan Constant Surface Shader.

 rispec_constant_material_definition - The definition file for the above, that builds the shader objects used by the render for the current material.

 rispec_constant_surface_shader - The RSL source for the standard RenderMan Constant Surface Shader.

 s_standard_render_time_script - The render-time script that sets various RiAttributes dependant on the values of properties provided to the user.



Recommended Reading:


 The RenderMan Interface Specification (RISpec) - Pixar Animation Studios

 Advanced RenderMan: Creating CGI for Motion Pictures - (ISBN:1558606181) - Tony Apodaca and Larry Gritz 1999

 RenderMan Companion: A Programmer's Guide to Realistic Computer Graphics - (ISBN:0201508680) - Steve Upstill 1989

 Texturing & Modeling: A Procedural Approach (3rd Edition) - (ISBN:1558608486) - David S. Ebert, F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steve Worley 1998

 3Delight Documentation - The 3Delight Team
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rslshader_dz}*/
class DzRSLShader extends DzBase, DzRefCountedItem {
	/**
 * @description Null
*/
	
static None;
	/**
 * @description Uses the RiSurfaceV API call when passed to the renderer.
*/
	
static Surface;
	/**
 * @description Uses the RiLightSourceV API call when passed to the renderer.
*/
	
static Light;
	/**
 * @description Uses the RiAreaLightSourceV API call when passed to the renderer.
*/
	
static LightArea;
	/**
 * @description Uses the RiAtmosphereV API call when passed to the renderer.
*/
	
static VolumeAtmosphere;
	/**
 * @description Uses the RiInteriorV API call when passed to the renderer.
*/
	
static VolumeInterior;
	/**
 * @description Uses the RiExteriorV API call when passed to the renderer.
*/
	
static VolumeExterior;
	/**
 * @description Uses the RiDisplacementV API call when passed to the renderer.
*/
	
static Displacement;
	/**
 * @description Uses the RiImagerV API call when passed to the renderer.
*/
	
static Imager;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a mappable numeric property to this shader object. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
*/
	addMappableProperty(prop:DzNumericProperty, token:String, mapToken:String):Boolean {
	
	}

}
/**
 * @classdesc Save filter classes save out a subset of scene settings in a DAZ Script format such as poses, light sets, camera sets, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefilter_dz}*/
class DzSaveFilter extends DzFileIO {
	/**
 * @description If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
static UseExtension;
	/**
 * @description Plain text file - no Unicode support
*/
	
static TextScriptFile;
	/**
 * @description Binary DAZ file format - supports Unicode characters
*/
	
static DAZScriptFile;
	/**
 * @description Encrypted Binary DAZ file format - supports Unicode characters
*/
	
static EncDAZScriptFile;
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getSaveFilterMgr().


Example:


Getting the class names of all DzSaveFilter objects 

var oSaveFilterMgr = App.getSaveFilterMgr();
var nSaveFilters = oSaveFilterMgr.getNumFilters();
var oSaveFilter = undefined;
for( var i = 0; i < nSaveFilters; i +=1 ){
	oSaveFilter = oSaveFilterMgr.getFilter( i );
	print( oSaveFilter.className() );
}
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefiltermgr_dz}*/
class DzSaveFilterMgr extends QObject {
	/**
 * @description If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
static UseExtension;
	/**
 * @description Plain text file - no Unicode support
*/
	
static TextScriptFile;
	/**
 * @description Binary DAZ file format - supports Unicode characters
*/
	
static DAZScriptFile;
	/**
 * @description Encrypted Binary DAZ file format - supports Unicode characters
*/
	
static EncDAZScriptFile;
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
*/
	static doSave(filterIndex:Number, dir:String):DzError {
	
	}
	/**
 * @description Return Value:
*/
	static getSavePath() {
	
	}
	/**
 * @description Save the scene contents to a file with the given save filter.
*/
	static writeFile(mode:ScriptFileMode, fileName:String, filterName:String):DzError {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scalemanip_dz}*/
class DzScaleManip extends DzImageManip {
	heightScale:Number;
	widthScale:Number;
	/**
 * @description Holds the scaling of the image across its height.
 * @constructor
*/
	constructor(w=1.0:Number, h=1.0:Number) {
	
	}
	/**
 * @description Sets the scale for the image.
*/
	setScale(w:Number, h:Number):Number {
	
	}

}
/**
 * @classdesc There is only one of these objects in the application. It is the communication hub between the core code and the interface, so it tracks all nodes, skeletons, lights, cameras, etc. that become part of the scene. This object is directly available using the Global.Scene variable.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scene_dz}*/
class DzScene extends DzBase {
	/**
 * @description DefaultMethod - If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
*/
	
static DefaultMethod;
	/**
 * @description OpenNew - Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
*/
	
static OpenNew;
	/**
 * @description MergeFile - Merges the file with any pre-existing elements in the scene.
*/
	
static MergeFile;
	/**
 * @description Only visible items with geometry that cast shadows will be included.
*/
	
static DzObjectsOnly;
	/**
 * @description Include lights in the bounding box.
*/
	
static DzIncludeLightsFlag;
	/**
 * @description Include cameras in the bounding box.
*/
	
static DzIncludeCamerasFlag;
	/**
 * @description Include items that do not cast shadows in the bounding box.
*/
	
static DzIncludeNonShadowersFlag;
	/**
 * @description Include items that are not visible in the bounding box.
*/
	
static DzIncludeNonVisibleFlag;
	/**
 * @description Include all nodes in the bounding box.
*/
	
static DzIncludeAllFlag;
	/**
 * @description Adds a scene data item to the scene.
*/
	static addDataItem(item:DzSceneData):DzError {
	
	}
	/**
 * @description Adds a node to the scene if it is not already in the scene.
*/
	static addNode(node:DzNode):Boolean {
	
	}
	/**
 * @description Adds a world-space modifier to the scene's modifier stack.
*/
	static addWSModifier(modifier:wsmodifier_dz, index:Number):DzError {
	
	}
	/**
 * @description Starts a time-editing operation. All changes to scene time, play range, and animation range that occur between this call and a call to finishTimeEdit() will be wrapped into a single undo item.
*/
	static beginTimeEdit() {
	
	}
	/**
 * @description Resets the scene to its initial, clean state. All data is deleted and the undo stack is cleared.
*/
	static clear() {
	
	}
	/**
 * @description Attempts to find a camera with the given name in the scene.
*/
	static findCamera(name:String):DzCamera {
	
	}
	/**
 * @description Attempts to find a camera with the given label in the scene.
*/
	static findCameraByLabel(label:String):DzCamera {
	
	}
	/**
 * @description Return Value:
*/
	static findDataItem(name:String):DzSceneData {
	
	}
	/**
 * @description Attempts to find a light with the given name in the scene.
*/
	static findLight(name:String):DzLight {
	
	}
	/**
 * @description Attempts to find a light with the given label in the scene.
*/
	static findLightByLabel(label:String):DzLight {
	
	}
	/**
 * @description Parameter(s):
*/
	static findMaterialByElementID(id:Number):DzMaterial {
	
	}
	/**
 * @description Parameter(s):
*/
	static findModifierByElementID(id:Number):DzModifier {
	
	}
	/**
 * @description Attempts to find a node with the given name in the scene.
*/
	static findNode(name:String):DzNode {
	
	}
	/**
 * @description Parameter(s):
*/
	static findNodeByElementID(id:Number):DzNode {
	
	}
	/**
 * @description Attempts to find a node with the given label in the scene.
*/
	static findNodeByLabel(label:String):DzNode {
	
	}
	/**
 * @description Parameter(s):
*/
	static findNodeIndex(node:DzNode):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	static findObjectByElementID(id:Number):DzObject {
	
	}
	/**
 * @description Parameter(s):
*/
	static findShapeByElementID(id:Number):Number {
	
	}
	/**
 * @description Attempts to find a skeleton with the given name in the scene.
*/
	static findSkeleton(name:String):DzSkeleton {
	
	}
	/**
 * @description Attempts to find a skeleton with the given label in the scene.
*/
	static findSkeletonByLabel(label:String):DzSkeleton {
	
	}
	/**
 * @description Parameter(s):
*/
	static findSkeletonIndex(skelton:DzSkeleton):Number {
	
	}
	/**
 * @description Ends a time editing operation started with a call to beginTimeEdit().
*/
	static finishTimeEdit() {
	
	}
	/**
 * @description Return Value:
*/
	static getAnimRange() {
	
	}
	/**
 * @description Return Value:
*/
	static getAssetLoadPath() {
	
	}
	/**
 * @description Return Value:
*/
	static getAudio() {
	
	}
	/**
 * @description Return Value:
*/
	static getAudioStartFrame() {
	
	}
	/**
 * @description Return Value:
*/
	static getAuthor() {
	
	}
	/**
 * @description Return Value:
*/
	static getBackdrop() {
	
	}
	/**
 * @description Calculate the bounding box for the current scene.
*/
	static getBoundingBox(flags:Number):DzBox3 {
	
	}
	/**
 * @description Parameter(s):
*/
	static getCamera(index:Number):DzCamera {
	
	}
	/**
 * @description Return Value:
*/
	static getCameraList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getDataItem(index:Number):DzSceneData {
	
	}
	/**
 * @description Return Value:
*/
	static getDataItemList() {
	
	}
	/**
 * @description Return Value:
*/
	static getFilename() {
	
	}
	/**
 * @description Return Value:
*/
	static getFrame() {
	
	}
	/**
 * @description Return Value:
*/
	static getHighlightNode() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getLight(index:Number):DzLight {
	
	}
	/**
 * @description Return Value:
*/
	static getLightList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getNode(index:Number):DzNode {
	
	}
	/**
 * @description Return Value:
*/
	static getNodeList() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumCameras() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumDataItems() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumLights() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumNodes() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedCameras() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedLights() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedNodes() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedSkeletons() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSelectedTimeRanges() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumSkeletons() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumStorablesInScene() {
	
	}
	/**
 * @description Return Value:
*/
	static getNumWSModifiers() {
	
	}
	/**
 * @description Return Value:
*/
	static getPlayRange() {
	
	}
	/**
 * @description Return Value:
*/
	static getPreviewLights() {
	
	}
	/**
 * @description Return Value:
*/
	static getPrimarySelection() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSelectedCamera(index:Number):DzCamera {
	
	}
	/**
 * @description Return Value:
*/
	static getSelectedCameraList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSelectedLight(index:Number):DzLight {
	
	}
	/**
 * @description Return Value:
*/
	static getSelectedLightList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSelectedNode(index:Number):DzNode {
	
	}
	/**
 * @description Return Value:
*/
	static getSelectedNodeList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSelectedSkeleton(index:Number):DzSkeleton {
	
	}
	/**
 * @description Return Value:
*/
	static getSelectedSkeletonList() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getSkeleton(index:Number):DzSkeleton {
	
	}
	/**
 * @description Return Value:
*/
	static getSkeletonList() {
	
	}
	/**
 * @description Return Value:
*/
	static getSortedLightList() {
	
	}
	/**
 * @description Return Value:
*/
	static getTime() {
	
	}
	/**
 * @description Return Value:
*/
	static getTimeStep() {
	
	}
	/**
 * @description Parameter(s):
*/
	static getUniqueTopLevelLabel(label:String, node:DzNode):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getWSModifier(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	static getWSModifierList() {
	
	}
	/**
 * @description Invalidates the scene, flagging it as needing to be redrawn.
*/
	static invalidate() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static invalidateLightSorting() {
	
	}
	/**
 * @description Return Value:
*/
	static isClearing() {
	
	}
	/**
 * @description Return Value:
*/
	static isDAZLoading() {
	
	}
	/**
 * @description Return Value:
*/
	static isLoading() {
	
	}
	/**
 * @description Return Value:
*/
	static isLoopingEnabled() {
	
	}
	/**
 * @description Return Value:
*/
	static isPlaying() {
	
	}
	/**
 * @description Attempts to load a native file from the given filename.
*/
	static loadScene(filename:String, method:DzOpenMethod):DzError {
	
	}
	/**
 * @description Sets looping of playback on/off.
*/
	static loopPlayback(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Indicate that the scene has changed since the last save.
*/
	static markChanged() {
	
	}
	/**
 * @description Return Value:
*/
	static needsSave() {
	
	}
	/**
 * @description Pauses playback of the current animation.
*/
	static pause() {
	
	}
	/**
 * @description Start playback of the current play range.
*/
	static play(realtime:Boolean):Boolean {
	
	}
	/**
 * @description Removes all cameras from the scene.
*/
	static removeAllCameras() {
	
	}
	/**
 * @description Removes all lights from the scene.
*/
	static removeAllLights() {
	
	}
	/**
 * @description Removes the scene data item from the scene.
*/
	static removeDataItem(item:DzSceneData):DzError {
	
	}
	/**
 * @description Removes the given node from the scene.
*/
	static removeNode(node:DzNode):Boolean {
	
	}
	/**
 * @description Removes all nodes that have items in their hierarchy that are currently selected.
*/
	static removeSelected() {
	
	}
	/**
 * @description Removes the modifier from the scene's modifier stack if it exists.
*/
	static removeWSModifier(modifier:wsmodifier_dz):DzError {
	
	}
	/**
 * @description Deprecated
*/
	static saveScene(filename:String):DzError {
	
	}
	/**
 * @description Saves a thumbnail-size OpenGL render of the current viewport to the given file name.
*/
	static saveThumbnail(filename:String):String {
	
	}
	/**
 * @description Sets the selection state for all nodes in the scene.
*/
	static selectAllNodes(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the selection state for all skeletons in the scene.
*/
	static selectAllSkeletons(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Selects/Deselects all time range.
*/
	static selectAllTime(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the animation range for the scene.
*/
	static setAnimRange(range:DzTimeRange):DzTimeRange {
	
	}
	/**
 * @description Sets the asset load path of this scene.
*/
	static setAssetLoadPath(absolutePath:String):String {
	
	}
	/**
 * @description Sets the current audio object and the frame on which it should start playing.
*/
	static setAudio(audio:DzAudioClip, startFrame:Number):DzAudioClip {
	
	}
	/**
 * @description Sets the backdrop object.
*/
	static setBackdrop(backdrop:DzBackdrop):DzBackdrop {
	
	}
	/**
 * @description Set the scene time to the given frame based on current time step.
*/
	static setFrame(frame:Number):Number {
	
	}
	/**
 * @description Sets the currently highlighted node. This is typically called from DzViewTool-derived classes.
*/
	static setHighlightNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Sets the play range for the scene.
*/
	static setPlayRange(range:DzTimeRange):DzTimeRange {
	
	}
	/**
 * @description Sets whether or not light preview is enabled or disabled.
*/
	static setPreviewLights(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the node to use as the primary selection.
*/
	static setPrimarySelection(node:DzNode):Boolean {
	
	}
	/**
 * @description Set the scene time to the given time.
*/
	static setTime(time:DzTime):DzTime {
	
	}
	/**
 * @description Sets the Frame rate for the scene.
*/
	static setTimeStep(time:DzTime):DzTime {
	
	}
	/**
 * @description Step time forward/back by number of frames.
*/
	static stepTime(nFrames:Number, forward:Boolean):Number {
	
	}
	/**
 * @description Recursively updates all nodes in the scene.
*/
	static update() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Scene in the DSON format.


See Also:


 Sample: Save a Scene
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sceneassetfilter_dz}*/
class DzSceneAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzScene.addDataItem()

 DzScene.removeDataItem()

 DzScene.findDataItem()

 DzScene.getNumDataItems()

 DzScene.getDataItem()

 DzScene.getDataItemList()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenedata_dz}*/
class DzSceneData extends DzCustomData {

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenehelper_dz}*/
class DzSceneHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	collectNodes(selectedOnly:Boolean, boneTopSelected:Boolean, boneSkeleton:Boolean):Array {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Scene Subset in the DSON format.


See Also:


 Sample: Save a Scene Subset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesubsetassetfilter_dz}*/
class DzSceneSubsetAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc An asset save filter for saving Figure/Prop Assets, or Dynamic Cloth Assets, for each object in the scene, in the DSON format.


See Also:


 Sample: Save Scene Support Assets

 DzNodeSupportAssetFilter

 DzDynamicClothSupportAssetFilter
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesupportassetfilter_dz}*/
class DzSceneSupportAssetFilter extends DzSceneAssetFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/script_dz}*/
class DzScript extends DzBase {
	/**
 * @description If the file extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
static UseExtension;
	/**
 * @description Plain text file - no Unicode support
*/
	
static TextScriptFile;
	/**
 * @description Binary DAZ file format - supports Unicode characters
*/
	
static DAZScriptFile;
	/**
 * @description Encrypted Binary DAZ file format - supports Unicode characters
*/
	
static EncDAZScriptFile;
	/**
 * @description Unknown language.
*/
	
static Unknown;
	/**
 * @description DAZ Script 1 (QSA) language.
*/
	
static DAZScript1;
	/**
 * @description DAZ Script 2 (QtScript) language.
*/
	
static DAZScript2;
	/**
 * @description Constructor.
 * @constructor
*/
	constructor(name="":String) {
	
	}
	/**
 * @description Copy Constructor
 * @constructor
*/
	constructor(script:DzScript) {
	
	}
	/**
 * @description Appends the given code to the end of the current script.
*/
	addCode(code:String):String {
	
	}
	/**
 * @description Appends the given string and a newline character to the script.
*/
	addLine(line:String, indentLevel:Number):String {
	
	}
	/**
 * @description Appends the given code to the end of the current script.
*/
	addLines(code:String, indentLevel:Number):String {
	
	}
	/**
 * @description Calls a function in the script.
*/
	call(function:String, args:Array):Boolean {
	
	}
	/**
 * @description Checks the syntax of the script for errors using the current interpreter.
*/
	checkSyntax() {
	
	}
	/**
 * @description Clears any code in the current script, and clears the encryption state if the script was read from an encrypted file.
*/
	clear() {
	
	}
	/**
 * @description Converts the script to DAZ Script 2 syntax.
*/
	convertToDAZScript2() {
	
	}
	/**
 * @description Return Value:
*/
	errorLine() {
	
	}
	/**
 * @description Return Value:
*/
	errorMessage() {
	
	}
	/**
 * @description Execute the script.
*/
	execute() {
	
	}
	/**
 * @description Execute the script with an argument list.
*/
	execute(args:Array):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getAuthor() {
	
	}
	/**
 * @description Return Value:
*/
	getCode() {
	
	}
	/**
 * @description Return Value:
*/
	getFilename() {
	
	}
	/**
 * @description Return Value:
*/
	getLastStatus() {
	
	}
	/**
 * @description Return Value:
*/
	getScriptLanguage() {
	
	}
	/**
 * @description Return Value:
*/
	getScriptType() {
	
	}
	/**
 * @description Return Value:
*/
	getScriptVersion() {
	
	}
	/**
 * @description Return Value:
*/
	getShouldReuseInterpreter() {
	
	}
	/**
 * @description Return Value:
*/
	isEmpty() {
	
	}
	/**
 * @description Return Value:
*/
	isEncrypted() {
	
	}
	/**
 * @description Loads the script from a file.
*/
	loadFromFile(filename:String, convert:Boolean):Boolean {
	
	}
	/**
 * @description Sets the script to be encrypted.
*/
	makeEncrypted() {
	
	}
	/**
 * @description Return Value:
*/
	result() {
	
	}
	/**
 * @description Save the script to a file.
*/
	saveToFile(filename:String, mode:ScriptFileMode, filetype:String):DzError {
	
	}
	/**
 * @description Replaces the existing code of the script with code.
*/
	setCode(code:String):String {
	
	}
	/**
 * @description Sets whether the same context is used between uses of call().
*/
	setReuseInterpreter(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	stackTrace() {
	
	}
	/**
 * @description Access to whether or not the script was converted from the enumerated value specified.
*/
	wasConverted(language:DzScript.ScriptLanguage):Boolean {
	
	}

}
/**
 * @classdesc All DzScripts are executed in the context of a DzScriptContext instance - therefore, all the properties and methods on DzScriptContext are accessible to a script as global functions and variables. It will usually not be necessary for a script to create or use this class directly.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptcontext_dz}*/
class DzScriptContext extends DzBase {
	/**
 * @description Accept and finish a hold on the undo stack started by calling beginUndo().
*/
	static acceptUndo(caption:String):String {
	
	}

}
/**
 * @classdesc Implements a scriptable RenderMan interface for the scene to render itself through the 3Delight renderer.


See Also:


 DzRenderMgr.findRenderer()

 DzDelightRenderer

 Sample: Rendering : Scripted Renderer Settings

 Sample: Rendering : Scripted Renderer Save Preset

 Sample: Rendering : Scripted Renderer Load

 Sample: Rendering : Scripted Renderer Pass



Attention:


 This class is only available as a component of DAZ Studio Advanced Edition.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptedrenderer_dz}*/
class DzScriptedRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Builds an environment space transform that can be used by shaders to account for differences between the application and the 3Delight render engine.
*/
	buildEnvironmentSpaceTransform() {
	
	}

}
/**
 * @classdesc A DzScrollArea provides a scrolling view of another widget.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollarea_dz}*/
class DzScrollArea extends DzWidget {
	alignment:DzWidget;
	maximumViewportSize:Size;
	widgetResizable:Boolean;
	/**
 * @description Creates a scroll area as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
*/
	ensureVisible(x:Number, y:Number, xmargin:Number, ymargin:Number):Number {
	
	}
	/**
 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
*/
	ensureWidgetVisible(childWidget:DzWidget, xmargin:Number, ymargin:Number):DzWidget {
	
	}
	/**
 * @description Hides the frame around the scroll area.
*/
	hideFrame() {
	
	}
	/**
 * @description Sets whether or not to display the horizontal scrollbar.
*/
	setHorizontalScrollbarDisplay(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not to display the vertical scrollbar.
*/
	setVerticalScrollbarDisplay(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the contents of the scroll area to a widget.
*/
	setWidget(widget:DzWidget):DzWidget {
	
	}

}
/**
 * @classdesc A DzScrollView provides a scrolling area with on-demand scroll bars.


Deprecated


Exists only to keep old code working. Do not use in new code. Use DzScrollArea where possible instead.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollview_dz}*/
class DzScrollView extends DzWidget {
	/**
 * @description Creates a scroll view as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/searchcontainer_dz}*/
class DzSearchContainer extends DzTopLevelAssetContainer, DzRefCountedItem {

}
/**
 * @classdesc This class provides a mapping between the names of the facegroup_dz objects associated with a facetmesh_dz and the DzNode objects that are likewise associated with that mesh. This mapping plays a part in the mechanism that allows a user to click on different areas of the mesh in the viewport and have that translate to the selection of a node.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/selectionmap_dz}*/
class DzSelectionMap extends DzBase {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a new face group/node mapping to the selection map.
*/
	addPair(faceGroupName:String, node:DzNode, replaceIfExists:Boolean):DzError {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settings_dz}*/
class DzSettings extends QObject {
	/**
 * @description A string value.
*/
	
static StringValue;
	/**
 * @description An integer (whole number) value.
*/
	
static IntValue;
	/**
 * @description A boolean (true/false) value.
*/
	
static BoolValue;
	/**
 * @description A floating-point (decimal) value.
*/
	
static FloatValue;
	/**
 * @description A nested settings value.
*/
	
static SettingsValue;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Clears all values from this settings object.
*/
	clear() {
	
	}
	/**
 * @description Copies the setting with the given index to the specified settings object.
*/
	copySetting(which:Number, copyTo:DzSettings):Number {
	
	}
	/**
 * @description Copies the setting with the given index to the specified settings object.
*/
	copySetting(key:String, copyTo:DzSettings):String {
	
	}
	/**
 * @description Populates this settings object with the data encoded in a string.
*/
	fromString(settings:String):Boolean {
	
	}
	/**
 * @description Gets a boolean value from the settings.
*/
	getBoolValue(key:String, def:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getFloatValue(key:String, def:Number):Number {
	
	}
	/**
 * @description Gets an integer value from the settings.
*/
	getIntValue(key:String, def:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKey(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getNumValues() {
	
	}
	/**
 * @description Parameter(s):
*/
	getSettingIndex(key:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getSettingsValue(key:String):String {
	
	}
	/**
 * @description Gets a string value from the settings.
*/
	getStringValue(key:String, def:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getValue(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getValueType(which:Number):Type {
	
	}
	/**
 * @description Parameter(s):
*/
	hasKey(key:String):Number {
	
	}
	/**
 * @description Removes a value.
*/
	removeValue(key:String):String {
	
	}
	/**
 * @description Replaces the settings of this object with the settings of the specified object.
*/
	replaceWithSettings(settings:DzSettings):void {
	
	}
	/**
 * @description Adds a boolean value.
*/
	setBoolValue(key:String, value:Boolean):String {
	
	}
	/**
 * @description Adds a float value.
*/
	setFloatValue(key:String, value:Number):String {
	
	}
	/**
 * @description Adds an integer value.
*/
	setIntValue(key:String, value:Number):String {
	
	}
	/**
 * @description Adds a nested settings value.
*/
	setSettingsValue(key:String, settings:DzSettings):String {
	
	}
	/**
 * @description Adds a nested (empty) settings value.
*/
	setSettingsValue(key:String):String {
	
	}
	/**
 * @description Adds a string value.
*/
	setStringValue(key:String, value:String):String {
	
	}
	/**
 * @description Return Value:
*/
	toJson() {
	
	}
	/**
 * @description Return Value:
*/
	toJsonString() {
	
	}
	/**
 * @description Appends lines of code to a script object that will reconstruct this DzSettings object.
*/
	toScript(varName:String, script:DzScript, indent:Number, define:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	toString() {
	
	}

}
/**
 * @classdesc Choosing the appropriate key type and pushing/popping keys (paths) is handled by the object.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settingshelper_dz}*/
class DzSettingsHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Retrieves a value from the subkey at the given key.
*/
	get(path:String, name:String, value:Object):Object {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Shader Preset in the DSON format.


See Also:


 Sample: Save a Shader Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderassetfilter_dz}*/
class DzShaderAssetFilter extends DzAssetFileOutFilter {

}
/**
 * @classdesc This class provides a DzBasicCamera derived object with creator-defined properties that will be passed to the RSL Shader at render-time. Properties intended to be used to pass values as arguments to a shader attached to the camera must be added using DzRSLShader. Properties for the camera that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadercamera_dz}*/
class DzShaderCamera extends DzBasicCamera {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds shader to this camera's internal list of shaders and sets shader 's owner to this camera.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getCameraName() {
	
	}
	/**
 * @description Return Value:
*/
	getDefinitionFile() {
	
	}
	/**
 * @description Return Value:
*/
	getNumShaders() {
	
	}
	/**
 * @description Return Value:
*/
	getRenderTimeFile() {
	
	}
	/**
 * @description Return Value:
*/
	getShader(index:Number):DzRSLShader {
	
	}
	/**
 * @description Removes shader from this camera's internal list of shaders.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Sets the internal name of the camera; this is not the same as the QObject.name property. By default, this is "Custom".
*/
	setCameraName(name:String):String {
	
	}
	/**
 * @description Sets the relative path of the [DAZ Script] file that builds this camera's property list.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):String {
	
	}
	/**
 * @description Sets the relative path of the [DAZ Script] file that will be executed at render-time. This script can declare variables, set displays, hiders, and/or options as well as shader parameters for the element, and implement custom logic for special effects.
*/
	setRenderTimeFile(renderTimeFile:String):Boolean {
	
	}
	/**
 * @description Sets the global graphic state by adding a series of RiDeclare calls before RiWorldBegin.
*/
	declare(tokens:Array, types:Array):Array {
	
	}
	/**
 * @description Sets the global graphic state by adding a RiDisplayV call before RiWorldBegin.
*/
	setDisplay(name:String, type:String, mode:String, tokens:Array, params:Array):String {
	
	}
	/**
 * @description Sets the global graphic state by adding a RiHiderV call before RiWorldBegin.
*/
	setHider(type:String, tokens:Array, params:Array):String {
	
	}
	/**
 * @description Sets the global graphic state by adding a RiOptionV call before RiWorldBegin.
*/
	setOption(option:String, tokens:Array, params:Array):String {
	
	}

}
/**
 * @classdesc DzShaderDescription contains information about a RenderMan shader - this includes the type of the shader, and a list of its parameters.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderdescription_dz}*/
class DzShaderDescription extends QObject {
	/**
 * @description Surface shader.
*/
	
static SurfaceShader;
	/**
 * @description Light Shader.
*/
	
static LightShader;
	/**
 * @description Displacement Shader.
*/
	
static DisplacementShader;
	/**
 * @description Volume Shader.
*/
	
static VolumeShader;
	/**
 * @description Image Shader.
*/
	
static ImageShader;
	/**
 * @description Return Value:
*/
	static getNumParameters() {
	
	}

}
/**
 * @classdesc This class provides a DzLight derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the light only has two properties - Color and Intensity. The values of these properties are not sent to the shader by default, nor are any attributes set representing the value of these properties. Unless put to use via DzRSLShader, these properties are purely for OpenGL purposes. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty() or DzRSLShader.addMappableProperty(). All other properties for the light must be added using DzRSLShader in order to be used to pass values as arguments to the shader. Properties for the light that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderlight_dz}*/
class DzShaderLight extends DzLight {
	/**
 * @description Null - Only in the scene to provide access to properties.
*/
	
static NullLight;
	/**
 * @description Emits global light.
*/
	
static AmbientLight;
	/**
 * @description Emits light in all directions.
*/
	
static PointLight;
	/**
 * @description Emits parallel light.
*/
	
static DistantLight;
	/**
 * @description Emits light in a pattern.
*/
	
static SpotLight;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds shader to this light's internal list of shaders and sets shader 's owner to this light.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getColorControl() {
	
	}
	/**
 * @description Return Value:
*/
	getDefinitionFile() {
	
	}
	/**
 * @description Return Value:
*/
	getIntensity() {
	
	}
	/**
 * @description Return Value:
*/
	getIntensityControl() {
	
	}
	/**
 * @description Return Value:
*/
	getLightName() {
	
	}
	/**
 * @description Return Value:
*/
	getLightType() {
	
	}
	/**
 * @description Return Value:
*/
	getNumShaders() {
	
	}
	/**
 * @description Return Value:
*/
	getShader(index:Number):DzRSLShader {
	
	}
	/**
 * @description Return Value:
*/
	getShadowMapPath() {
	
	}
	/**
 * @description Removes shader from this light's internal list of shaders.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Sets the relative path of the [DAZ Script] file that builds this light's property list.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):String {
	
	}
	/**
 * @description Sets the internal name of the light; this is not the same as the QObject.name property. By default, this is "Custom".
*/
	setLightName(name:String):String {
	
	}
	/**
 * @description Sets the type of a light. A light's type determines the OpenGL representation.
*/
	setLightType(type:LightType):LightType {
	
	}
	/**
 * @description Sets a flag so that transforms are applied to the coordinate space that the light is in, greatly simplifying shader math.
*/
	setUseLocalShaderSpace(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	usesLocalShaderSpace() {
	
	}

}
/**
 * @classdesc This class provides a DzMaterial derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the material only has two properties - Diffuse Color (Cs) and Opacity Strength (Os) - which are not passed as tokens to the shader, rather they are attributes sent directly to the renderer, via RiColor() and RiOpacity() respectively. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty(). All other properties for the material must be added using DzRSLShader.addShaderProperty() and DzRSLShader.addMappableProperty() in order to be used to pass values as arguments to the shader. Properties for the material that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().


Samples:


 rispec_constant_shader_preset - A [heavily commented] Shader Preset that applies a material definition script (below) for the standard RenderMan Constant Surface Shader.



See Also:


 

 rispec_constant_shader_definition - The definition file for the standard RenderMan Constant Surface Shader, that builds the properties displayed to users in the Surfaces tab (Advanced sub tab).

 rispec_constant_material_definition - The definition file for the above, that builds the shader objects used by the render for the current material.

 rispec_constant_surface_shader - The RSL source for the standard RenderMan Constant Surface Shader.

 s_standard_render_time_script - The render-time script that sets various RiAttributes dependant on the values of properties provided to the user.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadermaterial_dz}*/
class DzShaderMaterial extends DzMaterial, DzRefCountedItem {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds shader to this material's internal list of shaders and sets shader 's owner to this material.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDefinitionFile() {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseProperty() {
	
	}
	/**
 * @description Return Value:
*/
	getNumShaders() {
	
	}
	/**
 * @description Return Value:
*/
	getOpacityProperty() {
	
	}
	/**
 * @description Return Value:
*/
	getShader(index:Number):DzRSLShader {
	
	}
	/**
 * @description Removes shader from this material's internal list of shaders.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	}
	/**
 * @description Sets the relative path of the [DAZ Script] file that defines this material.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):String {
	
	}
	/**
 * @description Sets the name of the material type that will be returned by getMaterialName(). By default, this is "Custom"
*/
	setMaterialName(name:String):String {
	
	}
	/**
 * @description Sets whether this material needs the Tangent Space Params: varying vector dPds and varying float dPdsM. dPds is the tangent vector along the surface. dPdsM is the handedness of the bitangent vector on the surface. The bitangent can be reconstructed using:
*/
	setNeedsTangentSpaceParams(onoff:Boolean):Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderparameter_dz}*/
class DzShaderParameter extends QObject {
	/**
 * @description Unknown Parameter type.
*/
	
static UnknownType;
	/**
 * @description Point type parameter.
*/
	
static PointType;
	/**
 * @description Normal type parameter.
*/
	
static NormalType;
	/**
 * @description Vector type parameter.
*/
	
static VectorType;
	/**
 * @description Color type parameter.
*/
	
static ColorType;
	/**
 * @description Scalar type parameter.
*/
	
static ScalarType;
	/**
 * @description String type parameter.
*/
	
static StringType;
	/**
 * @description Matrix type parameter.
*/
	
static MatrixType;

}
/**
 * @classdesc An asset save filter for saving a Shader Definition Support Asset in the DSON format.


See Also:


 Sample: Save a Shader Definition Support Asset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadersupportassetfilter_dz}*/
class DzShaderSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 Sample: Adjust Rigging to Shape



Attention:


 This object is provided by the Joint Editor Tool plugin. It is only available when the Joint Editor Tool plugin is activated and enabled.



Since:


 4.9.3.93
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaperiggingadjuster_dz}*/
class DzShapeRiggingAdjuster extends QObject {
	/**
 * @description Default Constructor. Creates a shape rigging adjuster that can be used to adjust bone positions and orientations of the selected figure, based on the current shape.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Performs the rigging adjustment based on the current shape.
*/
	doAdjustments() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Shaping Preset in the DSON format.


See Also:


 Sample: Save a Shaping Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shapingassetfilter_dz}*/
class DzShapingAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementdata_dz}*/
class DzSimpleElementData extends DzElementData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=false:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getSettings() {
	
	}

}
/**
 * @classdesc Implements a custom data item that causes a specified script to be executed after the element that owns the data item has been loaded into the scene.


A global transient variable named DataItem, which refers to the DzSimpleElementScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.


A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)


If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the element.


Attention:


 The differences between this implementation and DzElementPostLoadFileData are that this implementation must reference the file path of a script and has an associated DzSettings that can be used to configure the script.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementscriptdata_dz}*/
class DzSimpleElementScriptData extends DzSimpleElementData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=true:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getScriptFilePath() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenedata_dz}*/
class DzSimpleSceneData extends DzSceneData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=false:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getSettings() {
	
	}

}
/**
 * @classdesc Implements a custom data item that causes a specified script to be executed after the scene has been loaded.


A global transient variable named DataItem, which refers to the DzSimpleSceneScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.


A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the scene was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)


If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the scene.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenescriptdata_dz}*/
class DzSimpleSceneScriptData extends DzSimpleSceneData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=true:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getScriptFilePath() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Simulation Settings Preset in the DSON format.


See Also:


 Sample: Save a Simulation Settings Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simulationsettingsassetfilter_dz}*/
class DzSimulationSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QSize type used in the DAZ Studio SDK. A Size object is a two dimensional representation of a width and height.


Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/size}*/
class Size extends QObject {
	height:Number;
	width:Number;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Swaps the width and height of the size.
*/
	translate() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeleton_dz}*/
class DzSkeleton extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Clears the generated morphs.
*/
	clearGeneratedMorphs() {
	
	}

}
/**
 * @classdesc A specialized subclass of DzNodeProperty which will only allow the user to select nodes that are skeletons from the scene. This is currently used by skeletons for the 'Fit To' property.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeletonproperty_dz}*/
class DzSkeletonProperty extends DzNodeProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getSkeletonValue() {
	
	}

}
/**
 * @classdesc This class is mainly used by the framework to store source paths for imported Poser content. The class can be used as follows to retrieve the path of the CR2 file from which a figure was loaded:



Todo


Examples:


This class could also be used by plug-in developers for other custom importers to store the source file for imported items.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sourcefiledata_dz}*/
class DzSourceFileData extends DzElementData {
	sourceFilePath:String;
	/**
 * @description Creates a new Source File Data object that stores the given file path.
 * @constructor
*/
	constructor(filePath="":String) {
	
	}
	/**
 * @description Return Value:
*/
	getGeometryChanged() {
	
	}

}
/**
 * @classdesc A DzSplitter provides the user with the ability to control the size of child widgets by dragging the boundary between the children.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/splitter_dz}*/
class DzSplitter extends DzWidget {
	childrenCollapsible:Boolean;
	handleWidth:Number;
	opaqueResize:Boolean;
	orientation:DzWidget;
	/**
 * @description Creates a splitter widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description TODO:
Add description.
*/
	addWidget(widget:DzWidget):DzWidget {
	
	}
	/**
 * @description TODO:
Add description.
*/
	count() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	indexOf(widget:DzWidget):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertWidget(index:Number, widget:DzWidget):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isCollapsible(index:Number):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	restoreState(state:ByteArray):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	saveState() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setCollapsible(index:Number, collapse:Boolean):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setStretchFactor(index:Number, stretch:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	widget(index:Number):DzWidget {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/spotlight_dz}*/
class DzSpotLight extends DzDistantLight {
	/**
 * @description Default Constructor. Creates a new spotlight.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getBaseOpacity() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/stringproperty_dz}*/
class DzStringProperty extends DzProperty {
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getValue() {
	
	}

}
/**
 * @classdesc Example:


Reset the current style colors to their default values.

		var oSTYLE = App.getStyle();
		var nCOLORS = oSTYLE.getNumInterfaceColors();
		for( var i = 0; i < nCOLORS; i += 1 )
		{
			oSTYLE.setInterfaceColor( i, oSTYLE.getInterfaceColorDefault( i ) );
		}
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/style_dz}*/
class DzStyle extends QObject {
	/**
 * @description The mode when the user is not interacting with the pixmap, but the item represented by the pixmap is available.
*/
	
static Normal;
	/**
 * @description The mode when the item represented by the pixmap is not available.
*/
	
static Disabled;
	/**
 * @description The mode when the item represented by the pixmap is available and the user is interacting with it.
*/
	
static Active;
	/**
 * @description The mode when the item represented by the pixmap is selected.
*/
	
static Selected;
	/**
 * @description The pixmap when the widget is in the On state.
*/
	
static On;
	/**
 * @description The pixmap when the widget is in the Off state.
*/
	
static Off;
	/**
 * @description Return Value:
*/
	static actionPixmap(className:String, mode:PixmapMode, state:PixmapState):Pixmap {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/subtractblend_dz}*/
class DzSubtractBlend extends DzImageBlend {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc A DzTabWidget provides a stack of tabbed widgets.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/tabwidget_dz}*/
class DzTabWidget extends DzWidget {
	/**
 * @description The top of the widget.
*/
	
static North;
	/**
 * @description The bottom of the widget.
*/
	
static South;
	/**
 * @description The left of the widget.
*/
	
static West;
	/**
 * @description The right of the widget.
*/
	
static East;
	/**
 * @description Creates a tab widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds page as a new tab with the given label.
*/
	addTab(page:DzWidget, label:String):Number {
	
	}
	/**
 * @description Removes all the pages, but does not delete them.
*/
	clear() {
	
	}
	/**
 * @description Return Value:
*/
	cornerWidget() {
	
	}
	/**
 * @description Return Value:
*/
	currentWidget() {
	
	}
	/**
 * @description Return Value:
*/
	indexOf(page:DzWidget):Number {
	
	}
	/**
 * @description Inserts page as a new tab with the label label at position index.
*/
	insertTab(index:Number, page:DzWidget, label:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	isTabEnabled(index:Number):Number {
	
	}
	/**
 * @description Removes the page at index from the tab widget.
*/
	removeTab(index:Number):Number {
	
	}
	/**
 * @description Sets widget to be shown in the corner of the tab widget.
*/
	setCornerWidget(widget:DzWidget):DzWidget {
	
	}
	/**
 * @description Makes widget the current page.
*/
	setCurrentWidget(page:DzWidget):DzWidget {
	
	}
	/**
 * @description Sets the enabled state of the page at position index.
*/
	setTabEnabled(index:Number, enable:Boolean):Number {
	
	}
	/**
 * @description Sets the label of the page at position index.
*/
	setTabText(index:Number, label:String):Number {
	
	}
	/**
 * @description Sets the tool tip text for the page at position index.
*/
	setTabToolTip(index:Number, tip:String):Number {
	
	}
	/**
 * @description Sets the what's this text for the page at position index.
*/
	setTabWhatsThis(index:Number, text:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	tabText(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	tabToolTip(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	tabWhatsThis(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	widget(index:Number):DzWidget {
	
	}

}
/**
 * @classdesc A DzTextBrowser extends DzTextEdit (in read-only mode), adding functionality that allows users to navigate hyper-linked documents.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textbrowser_dz}*/
class DzTextBrowser extends DzTextEdit {
	backwardCount:Number;
	forwardCount:Number;
	isBackwardAvailable:Boolean;
	isForwardAvailable:Boolean;
	openExternalLinks:Boolean;
	openLinks:Boolean;
	searchPaths:Array;
	source:String;
	/**
 * @description Creates a text browser widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Changes the document displayed to the previous document in the list built by navigating links. Does nothing if there is no previous document.
*/
	backward() {
	
	}
	/**
 * @description Clears the history of visited documents and disables the forward and backward navigation.
*/
	clearHistory() {
	
	}
	/**
 * @description Changes the document displayed to the next document in the list built by navigating links. Does nothing if there is no next document.
*/
	forward() {
	
	}
	/**
 * @description Parameter(s):
*/
	historyTitle(index:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	historyUrl(index:Number):String {
	
	}
	/**
 * @description Changes the current document displayed to be the first document displayed.
*/
	home() {
	
	}
	/**
 * @description Reloads the current document.
*/
	reload() {
	
	}

}
/**
 * @classdesc A DzTextEdit provides a powerful single-page rich text editor widget.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textedit_dz}*/
class DzTextEdit extends DzWidget {
	/**
 * @description Do not perform any automatic formatting.
*/
	
static AutoNone;
	/**
 * @description Only automatically format bulletted lists.
*/
	
static AutoBulletList;
	/**
 * @description Apply all available autoformatting.
*/
	
static AutoAll;
	/**
 * @description Do not wrap the text.
*/
	
static NoLineWrap;
	/**
 * @description Wrap the text at the current width of the widget.
*/
	
static WidgetWidth;
	/**
 * @description Wrap the text at a fixed number of pixels from the widget's left side.
*/
	
static FixedPixelWidth;
	/**
 * @description Wrap the text at a fixed number of character columns from the widget's left side.
*/
	
static FixedColumnWidth;
	/**
 * @description Do not wrap the text at all.
*/
	
static NoWrap;
	/**
 * @description Wrap the text at word boundaries.
*/
	
static WordWrap;
	/**
 * @description Same as NoWrap.
*/
	
static ManualWrap;
	/**
 * @description Wrap the text at any point on a line, even if it occurs in the middle of a word.
*/
	
static WrapAnywhere;
	/**
 * @description If possible, WordWrap, otherwise WrapAnywhere.
*/
	
static WrapAtWordBoundaryOrAnywhere;
	/**
 * @description Creates a text edit widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Parameter(s):
*/
	anchorAt(pos:Point):String {
	
	}
	/**
 * @description Adds text as a new paragraph to the end of the editor.
*/
	append(text:String):String {
	
	}
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
*/
	backspace() {
	
	}
	/**
 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the cursor will be moved one word to the left and the word will be deleted.
*/
	backspaceWord() {
	
	}
	/**
 * @description Removes all text from the editor.
*/
	clear() {
	
	}
	/**
 * @description Copies the selected text into the clipboard.
*/
	copy() {
	
	}
	/**
 * @description Moves the cursor backward the given number of characters.
*/
	cursorBackward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor forward the given number of characters.
*/
	cursorForward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor backward one word.
*/
	cursorWordBackward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor forward one word.
*/
	cursorWordForward(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Copies the selected text into the clipboard, and removes it from the editor.
*/
	cut() {
	
	}
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
*/
	del() {
	
	}
	/**
 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the word to the right of the cursor will be deleted.
*/
	deleteWord() {
	
	}
	/**
 * @description Moves the cursor to the line below the current line.
*/
	down(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Moves the cursor to the end of the document.
*/
	end(mark:Boolean):Boolean {
	
	}
	/**
 * @description Ensures that the cursor is visible by scrolling the editor if necessary.
*/
	ensureCursorVisible() {
	
	}
	/**
 * @description Finds the next occurrence of expression using the given options and changes the cursor to select the match.
*/
	find(expression:String, caseSensitive:Boolean, wholeWord:Boolean, backward:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	hasSelectedText() {
	
	}
	/**
 * @description Moves the cursor to the beginning of the document.
*/
	home(mark:Boolean):Boolean {
	
	}
	/**
 * @description Splits the block (paragraph) at the cursor position.
*/
	insertBlock() {
	
	}
	/**
 * @description Inserts text, which is assumed to be HTML formatted, at the current cursor position.
*/
	insertHtml(text:String):String {
	
	}
	/**
 * @description Inserts text at the current cursor position.
*/
	insertPlainText(text:String):String {
	
	}
	/**
 * @description Moves the cursor to the end of the line.
*/
	lineEnd(mark:Boolean):Boolean {
	
	}
	/**
 * @description Moves the cursor to the beginning of the line.
*/
	lineStart(mark:Boolean):Boolean {
	
	}
	/**
 * @description Moves the cursor a page down in the document.
*/
	pageDown(mark:Boolean):Boolean {
	
	}
	/**
 * @description Moves the cursor a page up in the document.
*/
	pageUp(mark:Boolean):Boolean {
	
	}
	/**
 * @description Inserts any text on the clipboard into the line at the cursor's current position.
*/
	paste() {
	
	}
	/**
 * @description If redoAvailable is true, redoes the next operation in the editor.
*/
	redo() {
	
	}
	/**
 * @description Scrolls the editor to make the text at the anchor name visible, if it can be found in the document. If the anchor isn't found no scrolling will occur. An anchor is defined using the HTML anchor tag, e.g., <a name="target">.
*/
	scrollToAnchor(name:String):String {
	
	}
	/**
 * @description Selects all the text in the editor.
*/
	selectAll() {
	
	}
	/**
 * @description Return Value:
*/
	selectedText() {
	
	}
	/**
 * @description Return Value:
*/
	selectionEnd() {
	
	}
	/**
 * @description Return Value:
*/
	selectionStart() {
	
	}
	/**
 * @description Parameter(s):
*/
	text(blockIdx:Number):String {
	
	}
	/**
 * @description If undoAvailable is true, undoes the last operation in the editor.
*/
	undo() {
	
	}
	/**
 * @description Moves the cursor to the line above the current line.
*/
	up(mark:Boolean, steps:Number):Boolean {
	
	}
	/**
 * @description Zooms in on the text by making the base font size range points larger and recalculating all font sizes to be the new size.
*/
	zoomIn(range:Number):Number {
	
	}
	/**
 * @description Zooms out on the text by making the base font size range points smaller and recalculating all font sizes to be the new size.
*/
	zoomOut(range:Number):Number {
	
	}

}
/**
 * @classdesc This is a sharable object that stores information for a texture (image map) that is used in OpenGL. Do not create a texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texture_dz}*/
class DzTexture extends QObject, DzRefCountedItem {
	/**
 * @description TODO: Add description.
*/
	
static Standard;
	/**
 * @description TODO: Add description.
*/
	
static LatLong;
	/**
 * @description TODO: Add description.
*/
	
static LightProbe;
	/**
 * @description TODO: Add description.
*/
	
static CustomTexture;
	/**
 * @description Return Value:
*/
	static getFilename() {
	
	}

}
/**
 * @classdesc NEEDS DESCRIPTION
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturecomponent_dz}*/
class DzTextureComponent extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static RotNone;
	/**
 * @description TODO: Add description.
*/
	
static Rot90;
	/**
 * @description TODO: Add description.
*/
	
static Rot180;
	/**
 * @description TODO: Add description.
*/
	
static Rot270;
	/**
 * @description TODO:
Add description.
*/
	static flip(horizontal:Boolean, vertical:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static loadImageData(image:Image):Image {
	
	}

}
/**
 * @classdesc NEEDS DESCRIPTION
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturelayer_dz}*/
class DzTextureLayer extends DzTextureComponent {
	/**
 * @description TODO: Add description.
*/
	
static BlendAlpha;
	/**
 * @description TODO: Add description.
*/
	
static BlendAdd;
	/**
 * @description TODO: Add description.
*/
	
static BlendSubtract;
	/**
 * @description TODO: Add description.
*/
	
static BlendMultiply;
	/**
 * @description TODO:
Add description.
*/
	static clearMask() {
	
	}

}
/**
 * @classdesc NEEDS DESCRIPTION
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturemask_dz}*/
class DzTextureMask extends DzTextureComponent {

}
/**
 * @classdesc DzTime is used for storing and passing time values. Time references in DAZ Studio are stored in 'ticks' - there are 4800 ticks per second. This number was chosen because of its divisibility by typical frame rates. For example, at 60 fps (frames per second) there are 80 ticks between each frame; at 30 fps, 160 ticks; at 20 fps, 180 ticks; etc.


Attention:


 Methods throughout the DAZ Studio API that take a DzTime as an argument can also take a Number in its place.



Example:

var oTimeStep = Scene.getTimeStep();
print( typeof oTimeStep );
 
var nTimeStep = oTimeStep.valueOf();
print( nTimeStep );
 
var oTime = Scene.getTime();
print( typeof oTime );
 
var nTime = oTime.valueOf();
print( nTime );
 
Scene.setTime( nTimeStep * 2 );
 
oTime = Scene.getTime();
print( typeof oTime );
 
nTime = oTime.valueOf();
print( nTime );
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/time_dz}*/
class DzTime {
	/**
 * @description Return Value:
*/
	static valueOf() {
	
	}

}
/**
 * @classdesc A DzTimeEdit provides a time editor.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timeedit_dz}*/
class DzTimeEdit extends DzDateTimeEdit {
	max:Date;
	min:Date;
	separator:String;
	/**
 * @description Creates a time edit widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc Provides repetitive and single-shot timers.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timer_dz}*/
class DzTimer extends QObject {
	active:Boolean;
	interval:Number;
	singleShot:Number;
	/**
 * @description Construct a timer with the given parent.
 * @constructor
*/
	constructor(parent=undefined:QObject) {
	
	}
	/**
 * @description Starts, or restarts, the timer with a timeout interval of msec milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
*/
	start(msec:Number):Number {
	
	}
	/**
 * @description Starts, or restarts, the timer with a timeout interval of interval milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
*/
	start() {
	
	}
	/**
 * @description Stops the timer.
*/
	stop() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timerange_dz}*/
class DzTimeRange extends Object {
	end:Number;
	start:Number;
	/**
 * @description Default Constructor. Creates the time range [DZ_MIN_TIME,DZ_MAX_TIME]
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	add(time:Number):Number {
	
	}
	/**
 * @description Extends the ends of this range by the given amount of time
*/
	extendEndsBy(time:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getDuration() {
	
	}
	/**
 * @description Sets the time range to include the given time
*/
	include(time:Number):Number {
	
	}
	/**
 * @description Sets the time range to include the given time range
*/
	include(range:DzTimeRange):void {
	
	}
	/**
 * @description Sets this time range to the intersection with the given time range.
*/
	intersect(range:DzTimeRange):void {
	
	}
	/**
 * @description Return Value:
*/
	isEmpty() {
	
	}
	/**
 * @description Return Value:
*/
	isIncluded(time:Number):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isIncluded(range:DzTimeRange):Boolean {
	
	}
	/**
 * @description Sets the time range to be empty.
*/
	makeEmpty() {
	
	}
	/**
 * @description Return Value:
*/
	overlaps(range:DzTimeRange):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	subtract(time:Number):Number {
	
	}

}
/**
 * @classdesc This class provides access to a toolbar in the interface. This class is not intended to be constructed directly, rather an instance of the class is created using DzPaneMgr.createToolBar().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbar_dz}*/
class DzToolBar extends QWidget {
	/**
 * @description The dock area at the top of a DzActivityLayout.
*/
	
static ToolBarTop;
	/**
 * @description The dock area at the bottom of a DzActivityLayout.
*/
	
static ToolBarBottom;
	/**
 * @description The dock area on the left side of a DzActivityLayout.
*/
	
static ToolBarLeft;
	/**
 * @description The dock area on the right side of a DzActivityLayout.
*/
	
static ToolBarRight;
	/**
 * @description No dock area. The toolbar cannot be docked.
*/
	
static NoToolBarArea;
	/**
 * @description Removes all items from the bar.
*/
	static clear() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbaritem_dz}*/
class DzToolBarItem extends QObject {
	/**
 * @description A toolbar separator (i.e. divider)
*/
	
static Separator;
	/**
 * @description An action item - a toolbar item that activates a DzAction
*/
	
static Action;
	/**
 * @description A toolbar item that activates a custom DzAction.  See Also: DzActionMgr for more about custom actions.
*/
	
static CustomAction;
	/**
 * @description A toolbar item that provides a non-standard widget.
*/
	
static CustomWidget;
	/**
 * @description A toolbar item that adjusts itself so that any items after it are left aligned over the application viewport.
*/
	
static ViewportLeftAlignSpacer;
	/**
 * @description A toolbar item that adjusts itself so that any items after it are centered over the application viewport.
*/
	
static ViewportCenterAlignSpacer;

}
/**
 * @classdesc This container type does not directly support assets. The primary purpose of this container type is to serve as the top-most container in an asset containers hierarchy.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toplevelassetcontainer_dz}*/
class DzTopLevelAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description The container is idle.
*/
	
static csNone;
	/**
 * @description The container is busy with an update.
*/
	
static csBusy;
	/**
 * @description The update operation completed without errors.
*/
	
static csFinished;
	/**
 * @description The update operation was canceled.
*/
	
static csCanceled;
	/**
 * @description An error occured during the update operation.
*/
	
static csError;
	/**
 * @description Return Value:
*/
	static getState() {
	
	}

}
/**
 * @classdesc Attention:


 This object is provided by the Transfer Utility plugin. It is only available when the Transfer Utility plugin is activated and enabled.



Since:


 4.6.2.85
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/transferutility_dz}*/
class DzTransferUtility extends QObject {
	/**
 * @description TODO: Add description.
*/
	
static NoAsset;
	/**
 * @description TODO: Add description.
*/
	
static GeometryAsset;
	/**
 * @description TODO: Add description.
*/
	
static NodeAsset;
	/**
 * @description TODO: Add description.
*/
	
static BaseGeom;
	/**
 * @description TODO: Add description.
*/
	
static BaseMorph;
	/**
 * @description TODO: Add description.
*/
	
static BaseCurrent;
	/**
 * @description TODO: Add description.
*/
	
static NoMorphs;
	/**
 * @description TODO: Add description.
*/
	
static NameList;
	/**
 * @description TODO: Add description.
*/
	
static Favorites;
	/**
 * @description TODO: Add description.
*/
	
static FavoritesAndSubComponets;
	/**
 * @description TODO: Add description.
*/
	
static ShapingAndPoseType;
	/**
 * @description TODO: Add description.
*/
	
static AllMorphs;
	/**
 * @description Default Constructor. Creates a transfer utility that can be used to transfer weights, morph, maps, etc using projection.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Performs the projection transfer based on the current settings.
*/
	doTransfer() {
	
	}

}
/**
 * @classdesc A generic asset container that takes on the type of the data assigned to it, which can be used to present hierarchical structures that are representable by a slash ('/') delimted path.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/typeassetcontainer_dz}*/
class DzTypeAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	static data:Object;
	/**
 * @description Adds a new container with the given name, if one doesn't already exist.
*/
	static addChildContainer(typePath:String):Number {
	
	}

}
/**
 * @classdesc Provides functionality that allows QtDesigner to be used in the creation of graphical user interfaces used by scripts.


See Also:


 designer-manual
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiloader_dz}*/
class DzUiLoader extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a path to the list of paths the .ui loader searches when locating QtDesigner plug-ins.
*/
	addPluginPath(path:String):String {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uipopupwgt_dz}*/
class DzUIPopUpWgt extends QWidget {
	/**
 * @description Default Constructor. Creates a new ui popup widget.
 * @constructor
*/
	constructor(parent:QWidget) {
	
	}
	/**
 * @description Return Value:
*/
	getFileName() {
	
	}

}
/**
 * @classdesc Encapsulates a widget loaded from a QtDesigner (*.ui) file. Do not create an instance of this class, request an instance via DzUiLoader.


See Also:


 DzUiLoader.createWidget()

 DzUiLoader.load()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiwidget_dz}*/
class DzUiWidget extends DzWidget {

}
/**
 * @classdesc There is only one undo stack in the application, which is created and owned by DzApp. This object is directly available using the Global.UndoStack variable.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/undostack_dz}*/
class DzUndoStack extends QObject {
	/**
 * @description It is recommended that you use Global.acceptUndo() instead of calling this function directly to avoid leaving the undo stack open.
*/
	static accept(caption:String):String {
	
	}

}
/**
 * @classdesc Represents a URI as it is used for the DSON file format. DzUri provides functionality in addition to standard URI/URL representations that is specific to the DSON file format.


DzUri provides for a traditional URI with path and fragment portions. In addition, it further divides the fragment into 1 to 3 parts for ease of use in the DSON file format. The following is an example of a URI as represented by the DzURI class:


/Converted/Victoria4/Victoria4.dsf.rCollar?rotation/x


The file path portion of this URI is: "/Converted/Victoria4/Victoria4.dsf"


The fragment portion of this URI is: "rCollar?rotation/x"


The fragment is further divided into an identifier and a property path. In this case the identifier is "rCollar" and the property path is "rotation/x".


All the sections of the fragment are optional, however, to be valid, each section in the fragment requires the preceding section to also be valid. So, the following URIs are valid:


 /Converted/Victoria4/Victoria4.dsf.rCollar

 /Converted/Victoria4/Victoria4.dsf.rCollar?rotation

 /Converted/Victoria4/Victoria4.dsf.rCollar?rotation/x



And the following URIs are not valid:


 /Converted/Victoria4/Victoria4.dsf#?rotation/x

 /Converted/Victoria4/Victoria4.dsf#?/x

 /Converted/Victoria4/Victoria4.dsf#?rotation



Since:


 4.8.1.18
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uri_dz}*/
class DzUri extends Object {
	/**
 * @description TODO: Add description.
*/
	
static NoPart;
	/**
 * @description TODO: Add description.
*/
	
static Scheme;
	/**
 * @description TODO: Add description.
*/
	
static NodePath;
	/**
 * @description TODO: Add description.
*/
	
static ModifierPath;
	/**
 * @description TODO: Add description.
*/
	
static PropertyPath;
	/**
 * @description TODO: Add description.
*/
	
static IDPart;
	/**
 * @description TODO: Add description.
*/
	
static FilePath;
	/**
 * @description TODO: Add description.
*/
	
static AllParts;
	/**
 * @description TODO: Add description.
*/
	
static NoScheme;
	/**
 * @description TODO: Add description.
*/
	
static ID;
	/**
 * @description TODO: Add description.
*/
	
static Name;
	/**
 * @description Default constructor. Creates an empty URI.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy constructor. Creates a URI as a copy of another URI.
 * @constructor
*/
	constructor(uri:DzUri) {
	
	}
	/**
 * @description Constructor. Creates a URI from its string representation.
 * @constructor
*/
	constructor(uri:String) {
	
	}
	/**
 * @description Clears the current values of this URI.
*/
	clear() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clearFoundLocalFilename() {
	
	}
	/**
 * @description Detaches this URI from any shared data. Makes the underlying data in this URI unique from all other URIs.
*/
	detach() {
	
	}
	/**
 * @description Return Value:
*/
	isEmpty() {
	
	}
	/**
 * @description Return Value:
*/
	isNull() {
	
	}
	/**
 * @description Sets the value of this URI from a string representation of the full URI.
*/
	setUri(uri:String):String {
	
	}
	/**
 * @description Attempts to convert the URI to the path of a local file.
*/
	toLocalFilename(preferredPath:String):String {
	
	}
	/**
 * @description Attempts to convert the URI to the path of a local file.
*/
	toLocalFilename() {
	
	}
	/**
 * @description Attempts to convert the URI to the path of a local file.
*/
	toPath(preferredPath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	toString(flags:PartFlags):String {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvset_dz}*/
class DzUVSet extends DzRefCountedItem {
	assetAuthor:DzAuthor;
	assetFileRevision:DzVersion;
	assetId:String;
	assetModifiedDate:Date;
	assetSource:DzUri;
	assetUri:DzUri;
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a UV Set Definition Support Asset in the DSON format.


See Also:


 Sample: Save a UV Set Definition Support Asset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvsupportassetfilter_dz}*/
class DzUVSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.TopToBottom.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vboxlayout_dz}*/
class DzVBoxLayout extends DzBoxLayout {
	/**
 * @description Creates a vertical box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc DzButtonGroup with a vertical layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vbuttongroup_dz}*/
class DzVButtonGroup extends DzButtonGroup {
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc See Also:


 DzInt2



Since:


 4.6.4.88
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec2_dz}*/
class DzVec2 extends Object {
	x:Number;
	y:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs() {
	
	}
	/**
 * @description Return Value:
*/
	add(vec:DzVec2):void {
	
	}
	/**
 * @description Return Value:
*/
	average() {
	
	}
	/**
 * @description Clamps each component of this vector.
*/
	clamp(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number):Number {
	
	}
	/**
 * @description Clamps the maximum value for each component of this vector.
*/
	clampMax(max:Number):Number {
	
	}
	/**
 * @description Clamps the minimum value for each component of this vector.
*/
	clampMin(min:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	cross(vec:DzVec2):void {
	
	}
	/**
 * @description Return Value:
*/
	divide(vec:DzVec2):void {
	
	}
	/**
 * @description Parameter(s):
*/
	dot(vec:DzVec2):Number {
	
	}
	/**
 * @description Tests if this vector and another vector are considered equal, within a tolerance.
*/
	equals(vec:DzVec2, tolerance:Number):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getAngleTo(vec:DzVec2):Number {
	
	}
	/**
 * @description Return Value:
*/
	length() {
	
	}
	/**
 * @description Return Value:
*/
	lengthSquared() {
	
	}
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
*/
	linearInterp(t:Number, v1:DzVec2, v2:DzVec2):Number {
	
	}
	/**
 * @description Sets this vector to (1.0, 1.0).
*/
	makeIdentity() {
	
	}
	/**
 * @description Sets this vector to (0.0, 0.0).
*/
	makeZero() {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number):Number {
	
	}
	/**
 * @description Modulates each component of this vector.
*/
	modulo(min:Number, max:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	multiply(vec:DzVec2):void {
	
	}
	/**
 * @description Negates each component of this vector.
*/
	negate() {
	
	}
	/**
 * @description Modifies this vector to be its unit length.
*/
	normalize() {
	
	}
	/**
 * @description Return Value:
*/
	normalized() {
	
	}
	/**
 * @description Sets this vector to have a specific length in the current direction.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square() {
	
	}
	/**
 * @description Return Value:
*/
	subtract(vec:DzVec2):void {
	
	}

}
/**
 * @classdesc See Also:


 DzVec2

 DzInt2
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec3_dz}*/
class DzVec3 extends Object {
	x:Number;
	y:Number;
	z:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(vec:DzVec3) {
	
	}
	/**
 * @description Creates and inititializes this vector with an array of 3 float values.
 * @constructor
*/
	constructor(vals:Array) {
	
	}
	/**
 * @description Creates and inititializes this vector with 3 floats.
 * @constructor
*/
	constructor(x:Number, y:Number, z:Number) {
	
	}
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs() {
	
	}
	/**
 * @description Return Value:
*/
	add(vec:DzVec3):void {
	
	}
	/**
 * @description Return Value:
*/
	average() {
	
	}
	/**
 * @description Clamps each component of this vector.
*/
	clamp(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number):Number {
	
	}
	/**
 * @description Clamps the maximum value for each component of this vector.
*/
	clampMax(max:Number):Number {
	
	}
	/**
 * @description Clamps the minimum value for each component of this vector.
*/
	clampMin(min:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	cross(vec:DzVec3):void {
	
	}
	/**
 * @description Return Value:
*/
	divide(vec:DzVec3):void {
	
	}
	/**
 * @description Parameter(s):
*/
	dot(vec:DzVec3):Number {
	
	}
	/**
 * @description Tests if this vector and another vector are considered equal, within a tolerance.
*/
	equals(vec:DzVec3, tolerance:Number):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getAngleTo(vec:DzVec3):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getRotationTo(vec:DzVec3):DzQuat {
	
	}
	/**
 * @description Return Value:
*/
	length() {
	
	}
	/**
 * @description Return Value:
*/
	lengthSquared() {
	
	}
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
*/
	linearInterp(t:Number, v1:DzVec3, v2:DzVec3):Number {
	
	}
	/**
 * @description Sets this vector to (1.0, 1.0, 1.0).
*/
	makeIdentity() {
	
	}
	/**
 * @description Sets this vector to (0.0, 0.0, 0.0).
*/
	makeZero() {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number):Number {
	
	}
	/**
 * @description Modulates each component of this vector.
*/
	modulo(min:Number, max:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	multiply(vec:DzVec3):void {
	
	}
	/**
 * @description Negates each component of this vector.
*/
	negate() {
	
	}
	/**
 * @description Modifies this vector to be its unit length.
*/
	normalize() {
	
	}
	/**
 * @description Return Value:
*/
	normalized() {
	
	}
	/**
 * @description Sets this vector to have a specific length in the current direction.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square() {
	
	}
	/**
 * @description Return Value:
*/
	subtract(vec:DzVec3):void {
	
	}

}
/**
 * @classdesc This class was added to DAZ Studio 4.x to make it easier to work with 64-bit version numbers and to facilitate compatibility with the old 32-bit version numbers.


Version numbers are typically displayed to the user as short version strings, e.g. 4.0, or long version strings, e.g. 4.0.0.0.


The version number consists of 4 components: The Major version number, the Minor version number, the Revision number, and the Build number. This is displayed in the following order: Major.Minor.Revision.Build.


In DAZ Studio, version numbers are typically stored as 64-bit unsigned integers with 16 bits for each number. This means that each number has a valid range of 0-65535. The most significant 16 bits are the Major version number, the next most significant 16 bits are the Minor version number, the next most significant 16 bits are the Revision number and the least significant 16 bits are the Build number. So, a packed version number in hexadecimal notation might look like: 0x1111222233334444 where 1111 is the Major version number, 2222 is the Minor version number 3333 is the Revision number and 4444 is the build number.


It is recommended that this class be used when possible to reduce confusion when dealing with version numbers in code.


This class provides methods for all of the numerical comparison operators (<, >, <=, >=, ==, !=) to make it easy to compare version numbers without directly using the packed value, or the individual components.


Since:


 4.8.1.20
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/version_dz}*/
class DzVersion extends Object {
	/**
 * @description Default constructor. Creates an empty version number - i.e. 0.0.0.0
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	equal(version:DzVersion):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getBuildNumber() {
	
	}
	/**
 * @description Return Value:
*/
	getLongVersionString() {
	
	}
	/**
 * @description Return Value:
*/
	getMajorVersion() {
	
	}
	/**
 * @description Return Value:
*/
	getMinorVersion() {
	
	}
	/**
 * @description Return Value:
*/
	getRevisionNumber() {
	
	}
	/**
 * @description Return Value:
*/
	getVersionNumber() {
	
	}
	/**
 * @description Return Value:
*/
	getVersionNumber32() {
	
	}
	/**
 * @description Return Value:
*/
	getVersionString() {
	
	}
	/**
 * @description Return Value:
*/
	greaterThan(version:DzVersion):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	greaterThanOrEqual(version:DzVersion):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isValid() {
	
	}
	/**
 * @description Return Value:
*/
	lessThan(version:DzVersion):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	lessThanOrEqual(version:DzVersion):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	notEqual(version:DzVersion):Boolean {
	
	}
	/**
 * @description Sets the 64-bit version number from an old 32-bit version number.
*/
	setVersionNumber(version:Number):Number {
	
	}
	/**
 * @description Sets the version number from the 4 16-bit components.
*/
	setVersionNumber(major:Number, minor:Number, revision:Number, build:Number):Number {
	
	}

}
/**
 * @classdesc A DzHGroupBox provides a DzGroupBox with a vertical layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vgroupbox_dz}*/
class DzVGroupBox extends DzGroupBox {
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoclip_dz}*/
class DzVideoClip extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a frame to the end of the clip
*/
	appendFrame(img:Image):Image {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoexporter_dz}*/
class DzVideoExporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/view_dz}*/
class DzView extends QWidget {
	/**
 * @description Return Value:
*/
	static getDescription() {
	
	}

}
/**
 * @classdesc Encapsulation of a 3D viewport. This object includes the surrounding decoration and camera manipulation controls. It contains the actual 3D viewport.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewport_dz}*/
class DzViewport extends QWidget {
	/**
 * @description Return Value:
*/
	static get3DViewport() {
	
	}

}
/**
 * @classdesc There is only one of these widgets in the application. This widget is created and owned by DzMainWindow, and can be accessed by requesting a pointer to it from DzMainWindow via DzMainWindow.getViewportMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewportmgr_dz}*/
class DzViewportMgr extends QWidget {
	/**
 * @description No visible view ports
*/
	
static NO_PANES;
	/**
 * @description A single visible viewport
*/
	
static SINGLE_PANE;
	/**
 * @description 2 visible view ports split the view area into right and left
*/
	
static LEFT_RIGHT;
	/**
 * @description 2 visible view ports split the view area into top and bottom
*/
	
static TOP_BOTTOM;
	/**
 * @description 3 visible view ports 2 on the left side and 1 on the right
*/
	
static LEFT2_RIGHT;
	/**
 * @description 4 visible view ports 3 on the left side and 1 on the right
*/
	
static LEFT3_RIGHT;
	/**
 * @description 3 visible view ports 2 on the right side and 1 on the left
*/
	
static LEFT_RIGHT2;
	/**
 * @description 4 visible view ports 3 on the right side and 1 on the left
*/
	
static LEFT_RIGHT3;
	/**
 * @description 3 visible view ports 2 on the top side and 1 on the bottom
*/
	
static TOP2_BOTTOM;
	/**
 * @description 4 visible view ports 3 on the top side and 1 on the bottom
*/
	
static TOP3_BOTTOM;
	/**
 * @description 3 visible view ports 2 on the bottom side and 1 on the top
*/
	
static TOP_BOTTOM2;
	/**
 * @description 4 visible view ports 3 on the bottom side and 1 on the top
*/
	
static TOP_BOTTOM3;
	/**
 * @description 4 visible view ports one in each corner
*/
	
static FOUR_PANE;
	/**
 * @description Total number of layouts
*/
	
static NUM_LAYOUTS;
	/**
 * @description TODO: Add description.
*/
	
static Node;
	/**
 * @description TODO: Add description.
*/
	
static SkeletonThenNode;
	/**
 * @description TODO: Add description.
*/
	
static Skeleton;
	/**
 * @description No Quick draw enabled.
*/
	
static QDOff;
	/**
 * @description Wireframe Quick draw enabled.
*/
	
static QDWire;
	/**
 * @description Smooth-Shade Quick draw enabled.
*/
	
static QDSmooth;
	/**
 * @description TODO: Add description.
*/
	
static Nested;
	/**
 * @description TODO: Add description.
*/
	
static Flat;
	/**
 * @description TODO: Add description.
*/
	
static NoAccel;
	/**
 * @description TODO: Add description.
*/
	
static LeftClick;
	/**
 * @description TODO: Add description.
*/
	
static RightClick;
	/**
 * @description TODO: Add description.
*/
	
static MidClick;
	/**
 * @description TODO: Add description.
*/
	
static AltLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static AltRightClick;
	/**
 * @description TODO: Add description.
*/
	
static AltMidClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlRightClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlMidClick;
	/**
 * @description TODO: Add description.
*/
	
static ShiftLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static ShiftRightClick;
	/**
 * @description TODO: Add description.
*/
	
static ShiftMidClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltRightClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltMidClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlShiftLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlShiftRightClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlShiftMidClick;
	/**
 * @description TODO: Add description.
*/
	
static AltShiftLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static AltShiftRightClick;
	/**
 * @description TODO: Add description.
*/
	
static AltShiftMidClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltShiftLeftClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltShiftRightClick;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltShiftMidClick;
	/**
 * @description TODO: Add description.
*/
	
static NoModifier;
	/**
 * @description TODO: Add description.
*/
	
static Alt;
	/**
 * @description TODO: Add description.
*/
	
static Shift;
	/**
 * @description TODO: Add description.
*/
	
static Ctrl;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAlt;
	/**
 * @description TODO: Add description.
*/
	
static CtrlShift;
	/**
 * @description TODO: Add description.
*/
	
static CtrlAltShift;
	/**
 * @description TODO: Add description.
*/
	
static ShiftAlt;
	/**
 * @description TODO: Add description.
*/
	
static NoOperation;
	/**
 * @description TODO: Add description.
*/
	
static OrbitCamera;
	/**
 * @description TODO: Add description.
*/
	
static RotateCamera;
	/**
 * @description TODO: Add description.
*/
	
static PanCamera;
	/**
 * @description TODO: Add description.
*/
	
static DollyCamera;
	/**
 * @description TODO: Add description.
*/
	
static BankCamera;
	/**
 * @description TODO: Add description.
*/
	
static ZoomDCamera;
	/**
 * @description TODO: Add description.
*/
	
static ZoomFCamera;
	/**
 * @description Sets the next tool in the list after the currently active tool to be the currently active tool.
*/
	static activateNextTool() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewrenderhandler_dz}*/
class DzViewRenderHandler extends DzImageRenderHandler {
	/**
 * @description Create a new view render handler for rendering a single frame.
 * @constructor
*/
	constructor(size:Size, time:DzTime, filename:String, isSoftware:Boolean) {
	
	}

}
/**
 * @classdesc View Tools are registered with the DzViewportMgr singleton and are available to access and modifiy via DAZScript.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewtool_dz}*/
class DzViewTool extends DzBase {
	/**
 * @description Derived classes can return a popup menu that will be displayed when the user selects the options menu for the Tool pane.
*/
	static getOptionsMenu() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Wearable(s) Preset in the DSON format.


See Also:


 Sample: Save a Wearable(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/wearablesassetfilter_dz}*/
class DzWearablesAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/weld_dz}*/
class DzWeld extends DzBase {
	/**
 * @description Creates a new weld operation.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getTargetBone() {
	
	}

}
/**
 * @classdesc The base class for all wrapped widgets. This is an abstract base class that provides general functionality for DAZScript widget components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_dz}*/
class DzWidget extends QObject {
	/**
 * @description Aligns horizontally with the left edge.
*/
	
static AlignLeft;
	/**
 * @description TODO: Add description.
*/
	
static AlignLeading;
	/**
 * @description Aligns horizontally with the right edge.
*/
	
static AlignRight;
	/**
 * @description TODO: Add description.
*/
	
static AlignTrailing;
	/**
 * @description Aligns horizontally in the center.
*/
	
static AlignHCenter;
	/**
 * @description Justifies the text in the available space.
*/
	
static AlignJustify;
	/**
 * @description TODO: Add description.
*/
	
static AlignAbsolute;
	/**
 * @description TODO: Add description.
*/
	
static AlignHorizontal_Mask;
	/**
 * @description Aligns vertically with the top edge.
*/
	
static AlignTop;
	/**
 * @description Aligns vertically with the bottom edge.
*/
	
static AlignBottom;
	/**
 * @description Aligns vertically in the center.
*/
	
static AlignVCenter;
	/**
 * @description TODO: Add description.
*/
	
static AlignVertical_Mask;
	/**
 * @description Aligns in the center in both dimensions.
*/
	
static AlignCenter;
	/**
 * @description Aligns horizontally according to the language (left for most).
*/
	
static AlignAuto;
	/**
 * @description Horizontal orientation (Left to Right).
*/
	
static Horizontal;
	/**
 * @description Vertical orientation (Top to Bottom).
*/
	
static Vertical;
	/**
 * @description Sort in ascending order.
*/
	
static AscendingOrder;
	/**
 * @description Sort in descending order.
*/
	
static DescendingOrder;
	/**
 * @description Provided for backward compatability.
*/
	
static Ascending;
	/**
 * @description Provided for backward compatability.
*/
	
static Descending;
	/**
 * @description TODO: Add description.
*/
	
static ElideLeft;
	/**
 * @description TODO: Add description.
*/
	
static ElideRight;
	/**
 * @description TODO: Add description.
*/
	
static ElideMiddle;
	/**
 * @description TODO: Add description.
*/
	
static ElideNone;
	/**
 * @description Treat all whitespace as spaces and print one line.
*/
	
static TextSingleLine;
	/**
 * @description If it is impossible to stay within the bounds, print outside.
*/
	
static TextDontClip;
	/**
 * @description Makes the ASCII tab character move to the next tab stop.
*/
	
static TextExpandTabs;
	/**
 * @description Diplays the string "&P" as P. For an ampersand, use "&&".
*/
	
static TextShowMnemonic;
	/**
 * @description Break lines at appropriate points, e.g., word boundaries.
*/
	
static TextWordWrap;
	/**
 * @description Break lines anywhere, even within words.
*/
	
static TextWrapAnywhere;
	/**
 * @description Treat this text as "hidden" and do not print it.
*/
	
static TextDontPrint;
	/**
 * @description TODO: Add description.
*/
	
static TextIncludeTrailingSpaces;
	/**
 * @description Same as TextShowMnemonic but does not draw the underlines.
*/
	
static TextHideMnemonic;
	/**
 * @description Ensures that text lines are justified.
*/
	
static TextJustificationForced;
	/**
 * @description TODO: Add description.
*/
	
static TextForceLeftToRight;
	/**
 * @description TODO: Add description.
*/
	
static TextForceRightToLeft;
	/**
 * @description TODO: Add description.
*/
	
static TextLongestVariant;
	/**
 * @description TODO: Add description.
*/
	
static TextBypassShaping;
	/**
 * @description TODO: Add description.
*/
	
static NoTextInteraction;
	/**
 * @description No interaction with the text is possible.
*/
	
static TextSelectableByMouse;
	/**
 * @description Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.
*/
	
static TextSelectableByKeyboard;
	/**
 * @description Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
*/
	
static LinksAccessibleByMouse;
	/**
 * @description Links can be highlighted and activated with the mouse.
*/
	
static LinksAccessibleByKeyboard;
	/**
 * @description Links can be focused using tab and activated with enter.
*/
	
static TextEditable;
	/**
 * @description The text is fully editable.
*/
	
static TextEditorInteraction;
	/**
 * @description The default for a DzTextEdit.
*/
	
static TextBrowserInteraction;
	/**
 * @description Creates a new widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Return Value:
*/
	findChildOfWidget(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getChildrenOfWidget(name:String):Array {
	
	}
	/**
 * @description Return Value:
*/
	getLayout() {
	
	}
	/**
 * @description Return Value:
*/
	getWidget() {
	
	}
	/**
 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
*/
	grab(rectangle:Rect):Pixmap {
	
	}
	/**
 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
*/
	grab(x:Number, y:Number, width:Number, height:Number):Pixmap {
	
	}
	/**
 * @description Hide the widget; make it invisible.
*/
	hide() {
	
	}
	/**
 * @description Translates the widget coordinate pos from the coordinate system of parent to this widget's coordinate system. parent must not be undefined and must be a parent of the calling widget.
*/
	mapFrom(parent:DzWidget, pos:Point):Point {
	
	}
	/**
 * @description Translates the global screen coordinate pos to widget coordinates.
*/
	mapFromGlobal(pos:Point):Point {
	
	}
	/**
 * @description Translates the widget coordinate pos from the coordinate system of the parent widget to this widget's coordinate system.
*/
	mapFromParent(pos:Point):Point {
	
	}
	/**
 * @description Translates the widget coordinate pos to the coordinate system of parent. parent must not be undefined and must be a parent of the calling widget.
*/
	mapTo(parent:DzWidget, pos:Point):Point {
	
	}
	/**
 * @description Translates the widget coordinate pos to global screen coordinates. For example, mapToGlobal( Point(0, 0) ) would give the global coordinates of the top-left pixel of the widget.
*/
	mapToGlobal(pos:Point):Point {
	
	}
	/**
 * @description Translates the widget coordinate pos to a coordinate in the parent widget.
*/
	mapToParent(pos:Point):Point {
	
	}
	/**
 * @description Reparents the widget.
*/
	reparent(parent:DzWidget, pnt:Point, showIt:Boolean):Point {
	
	}
	/**
 * @description Sets a fixed height for the widget.
*/
	setFixedHeight(height:Number):Number {
	
	}
	/**
 * @description Sets a fixed width and height for the widget.
*/
	setFixedSize(width:Number, height:Number):Number {
	
	}
	/**
 * @description Sets a fixed width for the widget.
*/
	setFixedWidth(width:Number):Number {
	
	}
	/**
 * @description Sets the position and size for the widget (relative to its parent).
*/
	setGeometry(x:Number, y:Number, w:Number, h:Number):Number {
	
	}
	/**
 * @description Show the widget; make it visible if its parent is visible.
*/
	show() {
	
	}

}
/**
 * @classdesc This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QWidget class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_q}*/
class QWidget extends QObject {
	static acceptDrops:Boolean;
	static accessibleDescription:String;
	static accessibleName:String;
	static autoFillBackground:Boolean;
	static baseSize:Size;
	static childrenRect:Rect;
	static enabled:Boolean;
	static focus:Boolean;
	static font:Font;
	static frameGeometry:Rect;
	static frameSize:Size;
	static fullScreen:Boolean;
	static geometry:Rect;
	static height:Number;
	static isActiveWindow:Boolean;
	static maximized:Boolean;
	static maximumHeight:Number;
	static maximumSize:Size;
	static maximumWidth:Number;
	static minimized:Boolean;
	static minimumHeight:Number;
	static minimumSize:Size;
	static minimumSizeHint:Size;
	static minimumWidth:Number;
	static mouseTracking:Boolean;
	static normalGeometry:Rect;
	static palette:Palette;
	static pos:Point;
	static rect:Rect;
	static size:Size;
	static sizeHint:Size;
	static sizeIncrement:Size;
	static statusTip:String;
	static styleSheet:String;
	static toolTip:String;
	static updatesEnabled:Boolean;
	static visible:Boolean;
	static whatsThis:String;
	static width:Number;
	static windowFilePath:String;
	static windowIconText:String;
	static windowModified:Boolean;
	static windowOpacity:Number;
	static windowTitle:String;
	static x:Number;
	static y:Number;
	/**
 * @description TODO:
Add description.
*/
	static close() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static hide() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static lower() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static raise() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static repaint() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setDisabled(disable:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setEnabled(enabled:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setFocus() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setHidden(hidden:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setStyleSheet(styleSheet:String):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setVisible(visible:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setWindowModified(modified:Boolean):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static setWindowTitle(title:String):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static show() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static showFullScreen() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static showMaximized() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static showMinimized() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static showNormal() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	static update() {
	
	}

}
/**
 * @classdesc Provides functionality for reading and writing zlib compressed *.zip files.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/zipfile_dz}*/
class DzZipFile extends DzFileInfo {
	/**
 * @description Open the file for reading only.
*/
	
static ReadOnly;
	/**
 * @description Open the file for writing only.
*/
	
static WriteOnly;
	/**
 * @description The file is opened in append mode, so that all data is written to the end of the file.
*/
	
static Append;
	/**
 * @description Creates a zip file with the given file name.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Compresses all the files in the given directory.
*/
	addDirToZip(pathOnDisk:String, pathInZip:String):Boolean {
	
	}

}